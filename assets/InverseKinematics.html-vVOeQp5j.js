const e=JSON.parse('{"key":"v-3f268965","path":"/Animation/gameOpenGL/InverseKinematics.html","title":"Inverse Kinematics","lang":"en-US","frontmatter":{"date":"2022-06-11T20:51:36.000Z","tag":"Animation","order":12},"headers":[{"level":2,"title":"Understand how CCD IK works","slug":"understand-how-ccd-ik-works","link":"#understand-how-ccd-ik-works","children":[]},{"level":2,"title":"Implement a CCD solver","slug":"implement-a-ccd-solver","link":"#implement-a-ccd-solver","children":[]},{"level":2,"title":"Understand how FABRIK works","slug":"understand-how-fabrik-works","link":"#understand-how-fabrik-works","children":[]},{"level":2,"title":"Ball-and-socket constraints","slug":"ball-and-socket-constraints","link":"#ball-and-socket-constraints","children":[]},{"level":2,"title":"Hinge constraints","slug":"hinge-constraints","link":"#hinge-constraints","children":[]},{"level":2,"title":"Understand where and how IK solvers fit into an animation pipeline","slug":"understand-where-and-how-ik-solvers-fit-into-an-animation-pipeline","link":"#understand-where-and-how-ik-solvers-fit-into-an-animation-pipeline","children":[{"level":3,"title":"Finding the foot goals","slug":"finding-the-foot-goals","link":"#finding-the-foot-goals","children":[]},{"level":3,"title":"Interpolating the foot goals","slug":"interpolating-the-foot-goals","link":"#interpolating-the-foot-goals","children":[]},{"level":3,"title":"Vertical character placement","slug":"vertical-character-placement","link":"#vertical-character-placement","children":[]},{"level":3,"title":"IK Pass","slug":"ik-pass","link":"#ik-pass","children":[]},{"level":3,"title":"Foot alignment","slug":"foot-alignment","link":"#foot-alignment","children":[]}]}],"git":{"createdTime":1699280150000,"updatedTime":1707215246000,"contributors":[{"name":"BanMing","email":"ban-ming@foxmail.com","commits":3},{"name":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":3}]},"readingTime":{"minutes":5.64,"words":1693},"filePathRelative":"Animation/gameOpenGL/InverseKinematics.md","localizedDate":"June 11, 2022","excerpt":"<h1> Inverse Kinematics</h1>\\n<p>逆向运动学是处理一个特殊节点怎么移动到一个世界坐标的位置上的过程。</p>\\n<h2> Understand how CCD IK works</h2>\\n<p>CCD是循环旋转下降（Cyclic Coordinate Descent）,这个算法有三个基础概念：</p>\\n<ul>\\n<li>Goal：目标的世界坐标点</li>\\n<li>Ik chain：所有需要移动和选择的节点列表</li>\\n<li>End effector：节点列表末端</li>\\n</ul>\\n<p>这个算法原理很简单，它是一个迭代算法。最开始迭代从节点列表的倒数第二个节点开始，倒数第一个是<code>End effector</code>。我们来解释一次迭代的过程：</p>"}');export{e as data};
