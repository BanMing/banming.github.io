import{_ as e}from"./scalablefloats-Q3FIO6sN.js";import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as n,b as s}from"./app-gmnTxx6m.js";const i="/assets/2024-01-02-21-53-50-FR_9SFaT.png",o="/assets/2024-01-02-22-19-44-qtzHJEFJ.png",c="/assets/2024-01-03-22-28-48-KC1gdG5K.png",l="/assets/2024-01-03-22-59-59-19U6HFn1.png",d="/assets/2024-02-07-18-49-20-GJJpRC4P.png",p="/assets/2024-02-08-17-27-15-wx3-0Mn_.png",r="/assets/2024-02-08-17-30-31--gv6YAAD.png",u="/assets/2024-01-06-13-23-21-k99YelBI.png",g="/assets/2024-01-16-16-39-54-6ECCrj1g.png",h="/assets/2024-01-16-17-30-06-nY-KjaHk.png",m="/assets/2024-01-16-17-34-01-hW0lF67p.png",f="/assets/2024-02-22-08-19-44-Ybp60s8o.png",y="/assets/2024-02-22-08-24-41-zPtvrZUL.png",b="/assets/2024-02-22-08-27-56-HNBJpfac.png",k="/assets/2024-02-22-08-40-44-qeKRk52v.png",v="/assets/2024-02-28-00-20-34-HTqN6S0a.png",A="/assets/2024-04-14-22-13-10-QMUwpLZv.png",G="/assets/2024-04-14-22-15-18-ATCTVQsr.png",T="/assets/2024-01-25-11-34-43-M0GKjq84.png",x="/assets/2024-01-25-11-35-29-Mtmx-AZi.png",C="/assets/2024-03-05-21-55-08-nafF1N55.png",E="/assets/2024-03-05-22-00-49-kNf0q2cY.png",_="/assets/2024-03-05-23-30-08-t1vPENuO.png",S="/assets/2024-03-05-21-59-11-0xHZ4gEW.png",w="/assets/2024-03-16-23-22-34-DzBB2ahK.png",P="/assets/2024-03-16-23-25-26-RqKZI0DP.png",M="/assets/2024-01-22-21-07-52-jns_74gB.png",I="/assets/2024-03-17-16-46-25-rg1CRroq.png",D="/assets/2024-03-17-16-48-51-EmIJMME_.png",R="/assets/2024-03-17-17-27-12-ffWkTqpq.png",B="/assets/2024-03-17-17-30-15-4EJ1HmlF.png",F="/assets/2024-03-17-17-33-00-kBx1LU20.png",O="/assets/2024-03-17-17-40-05--c_N4ecn.png",N={},U=s('<h1 id="gameplay-ability-system" tabindex="-1"><a class="header-anchor" href="#gameplay-ability-system" aria-hidden="true">#</a> Gameplay Ability System</h1><figure><img src="'+i+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><ul><li>Ability System Component：控制技能生命周期。</li><li>Attribute Set：数据配置</li><li>Gameplay Ability：技能逻辑</li><li>Ability Task：技能执行在一帧，可以设置不同的回调也就是任务，来响应技能执行。</li><li>Gameplay Effect：技能产生的影响，修改了那些数据。</li><li>Gameplay Cue：技能相关的音效，粒子效果，相机抖动等。</li><li>Gameplay Tag：描述物体的状态或数据，可以用来控制技能的释放等。</li></ul><h2 id="ability-system-component" tabindex="-1"><a class="header-anchor" href="#ability-system-component" aria-hidden="true">#</a> Ability System Component</h2><figure><img src="'+o+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p><code>Ability System Component</code>和<code>Attribute Set</code>可以放在<code>Pawn</code>上也可以放在<code>Player State</code>。他们的区别是<code>Pawn</code>会在游戏中会被销毁，那么技能系统也就销毁了。</p><h3 id="init-ability-actor-info" tabindex="-1"><a class="header-anchor" href="#init-ability-actor-info" aria-hidden="true">#</a> Init Ability Actor Info</h3><p>当<code>ASC</code>在不同的宿主上时，初始化的地方各有不同，主要原因是要确保<code>Controller</code>已经被初始化。</p><figure><img src="'+c+`" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p><code>ASC</code>可以有两种类型的宿主，在初始化<code>ASC</code>时，使用该函数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">UAbilitySystemComponent</span><span class="token double-colon punctuation">::</span><span class="token function">InitAbilityActorInfo</span><span class="token punctuation">(</span>AActor<span class="token operator">*</span> InOwnerActor<span class="token punctuation">,</span> AActor<span class="token operator">*</span> InAvatarActor<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>InOwnerActor 逻辑上的宿主</li><li>InAvatarActor 游戏世界里物理宿主</li></ul><p>在多人游戏中一般可以这样设置：</p><figure><img src="`+l+`" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h3 id="egameplayeffectreplicationmode" tabindex="-1"><a class="header-anchor" href="#egameplayeffectreplicationmode" aria-hidden="true">#</a> EGameplayEffectReplicationMode</h3><table><thead><tr><th style="text-align:center;">Replication</th><th style="text-align:center;">Use Case</th><th style="text-align:center;">Description</th></tr></thead><tbody><tr><td style="text-align:center;">Full</td><td style="text-align:center;">Single Player</td><td style="text-align:center;">Gameplay Effects are replicated to all clients</td></tr><tr><td style="text-align:center;">Mixed</td><td style="text-align:center;">Multiplayer, Player-Controlled</td><td style="text-align:center;">Game Effects are replicated to the owning client only. Gameplay Cues and Gameplay Tags replicated to all clients.</td></tr><tr><td style="text-align:center;">Minimal</td><td style="text-align:center;">Multiplayer, AI-Controlled</td><td style="text-align:center;">Gameplay Effects are <strong>NOT</strong> replicated. Gameplay Cues and Gameplay Tags replicated to all clients.</td></tr></tbody></table><p>当设置为<code>Mixed</code>时，<code>ASC</code>的拥有者必须是<code>Controller</code>。<code>PlayerState</code>会自动转换为<code>Controller</code>。如果是其他的类型，就需要调用<code>SetOwner()</code>把<code>ASC</code>设置到<code>Controller</code>上。</p><p>使用蓝图库来获取该组件：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;AbilitySystemBlueprintLibrary.h&quot;</span></span>
<span class="token class-name">UAbilitySystemBlueprintLibrary</span><span class="token double-colon punctuation">::</span><span class="token function">GetAbilitySystemComponent</span><span class="token punctuation">(</span>AActor<span class="token operator">*</span> Target<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="attribute-set" tabindex="-1"><a class="header-anchor" href="#attribute-set" aria-hidden="true">#</a> Attribute Set</h2><p>使用下面的宏来设置属性函数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;AbilitySystemComponent.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ATTRIBUTE_ACCESSORS</span><span class="token expression"><span class="token punctuation">(</span>ClassName<span class="token punctuation">,</span> PropertyName<span class="token punctuation">)</span>           </span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token function">GAMEPLAYATTRIBUTE_PROPERTY_GETTER</span><span class="token punctuation">(</span>ClassName<span class="token punctuation">,</span> PropertyName<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token function">GAMEPLAYATTRIBUTE_VALUE_GETTER</span><span class="token punctuation">(</span>PropertyName<span class="token punctuation">)</span>               </span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token function">GAMEPLAYATTRIBUTE_VALUE_SETTER</span><span class="token punctuation">(</span>PropertyName<span class="token punctuation">)</span>               </span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token function">GAMEPLAYATTRIBUTE_VALUE_INITTER</span><span class="token punctuation">(</span>PropertyName<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>头文件实列：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>	<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadOnly<span class="token punctuation">,</span> ReplicatedUsing <span class="token operator">=</span> OnRep_Health<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;Vital Attributes&quot;</span><span class="token punctuation">)</span>
	FGameplayAttributeData Health<span class="token punctuation">;</span>
    <span class="token function">ATTRIBUTE_ACCESSORS</span><span class="token punctuation">(</span>ThisClass<span class="token punctuation">,</span> Health<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">OnRep_Health</span><span class="token punctuation">(</span><span class="token keyword">const</span> FGameplayAttributeData<span class="token operator">&amp;</span> OldHealth<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类实列：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">UAuraAttributeSet</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">FLifetimeProperty</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
	<span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>OutLifetimeProps<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">DOREPLIFETIME_CONDITION_NOTIFY</span><span class="token punctuation">(</span>ThisClass<span class="token punctuation">,</span> Health<span class="token punctuation">,</span> COND_None<span class="token punctuation">,</span> REPNOTIFY_Always<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">UAuraAttributeSet</span><span class="token double-colon punctuation">::</span><span class="token function">OnRep_Health</span><span class="token punctuation">(</span><span class="token keyword">const</span> FGameplayAttributeData<span class="token operator">&amp;</span> OldHealth<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">GAMEPLAYATTRIBUTE_REPNOTIFY</span><span class="token punctuation">(</span>ThisClass<span class="token punctuation">,</span> Health<span class="token punctuation">,</span> OldHealth<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="basevalue-vs-currentvalue" tabindex="-1"><a class="header-anchor" href="#basevalue-vs-currentvalue" aria-hidden="true">#</a> BaseValue vs CurrentValue</h3><p>一个<code>Attribute</code>是由两个数值组成的：</p><ul><li><code>BaseValue</code>：在一段时间内的永久的值(GameplayEffectExecute执行期间)</li><li><code>CurrentValue</code>：<code>BaseValue</code>+<code>GameplayEffect</code>的临时修改值</li></ul><p>在<code>GameplayEffect Execute</code>对<code>Atrribute</code>进行修改时，<code>BaseValue</code>在这个期间是不做修改的。<code>CurrentValue</code>是实时在修改的。在Debug中显示的数值一直都是<code>CurrentValue</code>。</p><p>不过<code>GameplayEffect</code>设置的<code>Scalabe Float</code> 如下图：</p><figure><img src="`+d+`" alt="GameplayEffect Scalabe Float" tabindex="0" loading="lazy"><figcaption>GameplayEffect Scalabe Float</figcaption></figure><p><code>BaseValue</code> 最先被修改，之后再是<code>CurrentValue</code>。其中回调的顺序为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PreAttributeBaseChange-&gt;PreAttributeChange-&gt;PostAttributeChange-&gt;PostAttributeBaseChange-&gt;PostGameplayEffectExecute
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用datatable初始化" tabindex="-1"><a class="header-anchor" href="#使用datatable初始化" aria-hidden="true">#</a> 使用DataTable初始化</h3><p>创建 <code>FAttributeMetaData</code>的DataTable，配置如下：</p><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>行的名字为<code>C++中AttributeSet类型名字+属性名字</code>，然后把这个数据表配置到<code>PlayerSate-&gt;Attribute Test-&gt;Default Starting Data</code>上即可。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这种方式并不是良策，常见的初始化属性值：直接对<code>ACS</code>添加一个初始化的<code>GameplayEffect</code>。</p><h3 id="常用函数" tabindex="-1"><a class="header-anchor" href="#常用函数" aria-hidden="true">#</a> 常用函数</h3><ul><li>PreAttributeBaseChange(const FGameplayAttribute&amp; Attribute, float&amp; NewValue) const：<code>BaseValue</code>在修改前，调用。</li><li>PreAttributeChange(const FGameplayAttribute&amp; Attribute, float&amp; NewValue) ：<code>CurrentValue</code>在修改前，调用。</li><li>PostAttributeChange(const FGameplayAttribute&amp; Attribute, float OldValue, float NewValue)：<code>CurrentValue</code>在修改后，调用。</li><li>PostAttributeBaseChange(const FGameplayAttribute&amp; Attribute, float OldValue, float NewValue) const：<code>BaseValue</code>在修改后，调用。</li><li>PostGameplayEffectExecute(const struct FGameplayEffectModCallbackData &amp;Data):在一个<code>GameplayEffect</code>执行修改数据之前，调用。</li></ul><p>**注意：在<code>PreAttributeChange</code>函数中对<code>NewValue</code>进行范围设置，只会影响到当前数据的变化，并不会影响到基础数据，所以需要在<code>PostGameplayEffectExecute</code>函数中再对基础数据做出范围设置，Epic 推荐在每一次<code>Attribute</code>被修改后都做一次范围设置，也就是监听<code>UAbilitySystemComponent::GetGameplayAttributeValueChangeDelegate(FGameplayAttribute Attribute)</code>委托 **</p><h2 id="gameplay-effect" tabindex="-1"><a class="header-anchor" href="#gameplay-effect" aria-hidden="true">#</a> Gameplay Effect</h2><figure><img src="'+u+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p>执行规则：</p><ul><li>Instant 一次</li><li>Has Duration 一段时间</li><li>Infinite 无限次</li></ul><h3 id="periodic-gameplay-effects" tabindex="-1"><a class="header-anchor" href="#periodic-gameplay-effects" aria-hidden="true">#</a> Periodic Gameplay Effects</h3><figure><img src="'+g+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p>在一段时间内定期修改基础数值</p><h3 id="stacking" tabindex="-1"><a class="header-anchor" href="#stacking" aria-hidden="true">#</a> Stacking</h3><h3 id="aggregate-by-soucre" tabindex="-1"><a class="header-anchor" href="#aggregate-by-soucre" aria-hidden="true">#</a> Aggregate by Soucre</h3><figure><img src="'+h+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h3 id="aggregate-by-soucre-1" tabindex="-1"><a class="header-anchor" href="#aggregate-by-soucre-1" aria-hidden="true">#</a> Aggregate by Soucre</h3><figure><img src="'+m+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h3 id="modifiers-magnitdue" tabindex="-1"><a class="header-anchor" href="#modifiers-magnitdue" aria-hidden="true">#</a> Modifiers Magnitdue</h3><p>更改的操作有4种：</p><table><thead><tr><th>Operation</th><th>Description</th></tr></thead><tbody><tr><td><code>Add</code></td><td>在指定的<code>Attribute</code>上<strong>加上</strong>配置的数值，使用负数来实现减法。</td></tr><tr><td><code>Multiply</code></td><td>Multiplies the result to the <code>Modifier&#39;s</code> specified <code>Attribute</code>.</td></tr><tr><td><code>Divide</code></td><td>Divides the result against the <code>Modifier&#39;s</code> specified <code>Attribute</code>.</td></tr><tr><td><code>Override</code></td><td>Overrides the <code>Modifier&#39;s</code> specified <code>Attribute</code> with the result.</td></tr></tbody></table><p>有4种修改器：</p><table><thead><tr><th><code>Modifier</code> Type</th><th>Description</th></tr></thead><tbody><tr><td><code>Scalable Float</code></td><td><code>FScalableFloats</code> are a structure that can point to a Data Table that has the variables as rows and levels as columns. The Scalable Floats will automatically read the value of the specified table row at the ability&#39;s current level (or different level if overriden on the <a href="#concepts-ge-spec"><code>GameplayEffectSpec</code></a>). This value can further be manipulated by a coefficient. If no Data Table/Row is specified, it treats the value as a 1 so the coefficient can be used to hard code in a single value at all levels. <img src="'+e+'" alt="ScalableFloat" loading="lazy"></td></tr><tr><td><code>Attribute Based</code></td><td><code>Attribute Based</code> <code>Modifiers</code> take the <code>CurrentValue</code> or <code>BaseValue</code> of a backing <code>Attribute</code> on the <code>Source</code> (who created the <code>GameplayEffectSpec</code>) or <code>Target</code> (who received the <code>GameplayEffectSpec</code>) and further modifies it with a coefficient and pre and post coefficient additions. <code>Snapshotting</code> means the backing <code>Attribute</code> is captured when the <code>GameplayEffectSpec</code> is created whereas no snapshotting means the <code>Attribute</code> is captured when the <code>GameplayEffectSpec</code> is applied.</td></tr><tr><td><code>Custom Calculation Class</code></td><td><code>Custom Calculation Class</code> provides the most flexibility for complex <code>Modifiers</code>. This <code>Modifier</code> takes a <a href="#concepts-ge-mmc"><code>ModifierMagnitudeCalculation</code></a> class and can further manipulate the resulting float value with a coefficient and pre and post coefficient additions.</td></tr><tr><td><code>Set By Caller</code></td><td><code>SetByCaller</code> <code>Modifiers</code> are values that are set outside of the <code>GameplayEffect</code> at runtime by the ability or whoever made the <code>GameplayEffectSpec</code> on the <code>GameplayEffectSpec</code>. For example, you would use a <code>SetByCaller</code> if you want to set the damage to be based on how long the player held down a button to charge the ability. <code>SetByCallers</code> are essentially <code>TMap&lt;FGameplayTag, float&gt;</code> that live on the <code>GameplayEffectSpec</code>. The <code>Modifier</code> is just telling the <code>Aggregator</code> to look for a <code>SetByCaller</code> value associated with the supplied <code>GameplayTag</code>. The <code>SetByCallers</code> used by <code>Modifiers</code> can only use the <code>GameplayTag</code> version of the concept. The <code>FName</code> version is disabled here. If the <code>Modifier</code> is set to <code>SetByCaller</code> but a <code>SetByCaller</code> with the correct <code>GameplayTag</code> does not exist on the <code>GameplayEffectSpec</code>, the game will throw a runtime error and return a value of 0. This might cause issues in the case of a <code>Divide</code> operation. See <a href="#concepts-ge-spec-setbycaller"><code>SetByCallers</code></a> for more information on how to use <code>SetByCallers</code>.</td></tr></tbody></table><h3 id="modifiers-order-of-operation" tabindex="-1"><a class="header-anchor" href="#modifiers-order-of-operation" aria-hidden="true">#</a> Modifiers Order of Operation</h3><p>执行顺序是从上往下。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="attribute-base-modifier-coefficeient" tabindex="-1"><a class="header-anchor" href="#attribute-base-modifier-coefficeient" aria-hidden="true">#</a> Attribute Base Modifier Coefficeient</h3><p>与预先处理基础数据。</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="custom-calculation" tabindex="-1"><a class="header-anchor" href="#custom-calculation" aria-hidden="true">#</a> Custom Calculation</h3><figure><img src="'+v+'" alt="Custom Calculation" tabindex="0" loading="lazy"><figcaption>Custom Calculation</figcaption></figure><h3 id="execution-calculation" tabindex="-1"><a class="header-anchor" href="#execution-calculation" aria-hidden="true">#</a> Execution Calculation</h3><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+G+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="set-by-caller" tabindex="-1"><a class="header-anchor" href="#set-by-caller" aria-hidden="true">#</a> Set By Caller</h3><p>使用<code>UAbilitySystemBlueprintLibrary::AssignTagSetByCallerMagnitude(SpecHandle, GameplayTags.Damage, 50.f);</code>函数来设置<code>Tag</code>对于的数值。</p><h3 id="tags" tabindex="-1"><a class="header-anchor" href="#tags" aria-hidden="true">#</a> Tags</h3><p>GameplayEffect中的Tag配置：</p><figure><img src="'+T+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><table><thead><tr><th>Category</th><th>Description</th></tr></thead><tbody><tr><td>Gameplay Effect Asset Tags</td><td>Tags that the <code>GameplayEffect</code> has. They do not do any function on their own and serve only the purpose of describing the <code>GameplayEffect</code>.</td></tr><tr><td>Granted Tags</td><td>Tags that live on the <code>GameplayEffect</code> but are also given to the <code>ASC</code> that the <code>GameplayEffect</code> is applied to. They are removed from the <code>ASC</code> when the <code>GameplayEffect</code> is removed. This only works for <code>Duration</code> and <code>Infinite</code> <code>GameplayEffects</code>.</td></tr><tr><td>Ongoing Tag Requirements</td><td>Once applied, these tags determine whether the <code>GameplayEffect</code> is on or off. A <code>GameplayEffect</code> can be off and still be applied. If a <code>GameplayEffect</code> is off due to failing the Ongoing Tag Requirements, but the requirements are then met, the <code>GameplayEffect</code> will turn on again and reapply its modifiers. This only works for <code>Duration</code> and <code>Infinite</code> <code>GameplayEffects</code>.</td></tr><tr><td>Application Tag Requirements</td><td>Tags on the Target that determine if a <code>GameplayEffect</code> can be applied to the Target. If these requirements are not met, the <code>GameplayEffect</code> is not applied.</td></tr><tr><td>Remove Gameplay Effects with Tags</td><td><code>GameplayEffects</code> on the Target that have any of these tags in their <code>Asset Tags</code> or <code>Granted Tags</code> will be removed from the Target when this <code>GameplayEffect</code> is successfully applied.</td></tr></tbody></table><p>以上设置在<strong>5.3</strong>之前还是有的，在<strong>5.3</strong>中是把上面的属性设置到组件里如图：</p><figure><img src="'+x+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><table><thead><tr><th>Gameplay Effect</th><th>Component Description</th></tr></thead><tbody><tr><td>UChanceToApplyGameplayEffectComponent</td><td>应用Gameplay效果的率。</td></tr><tr><td>UBlockAbilityTagsGameplayEffectComponent</td><td>根据所有者Gameplay效果目标Actor的Gameplay标签，进行Gameplay技能激活阻止处理。</td></tr><tr><td>UAssetTagsGameplayEffectComponent</td><td>Gameplay效果资产拥有的标签。这些标签 <strong>不会</strong> 转移到Actor。</td></tr><tr><td>UAdditionalEffectsGameplayEffectComponent</td><td>添加尝试在特定条件下激活（或任何条件下都不激活）的其他Gameplay效果。</td></tr><tr><td>UTargetTagsGameplayEffectComponent</td><td>将标签授予Gameplay效果的目标（有时指所有者），在效果结束时会自动取消掉该标签。只在<code>Duration</code>模式下，生效且在开启<code>Stack</code>限制时，只会添加一此在对象上。</td></tr><tr><td>UTargetTagRequirementsGameplayEffectComponent</td><td>指定如果此GE须应用或继续执行，目标（Gameplay效果的拥有者）必须具备的标签要求。</td></tr><tr><td>URemoveOtherGameplayEffectComponent</td><td>基于某些条件移除其他Gameplay效果。</td></tr><tr><td>UCustomCanApplyGameplayEffectComponent</td><td>处理CustomApplicationRequirement函数的配置，以查看是否应该应用此Gameplay效果。</td></tr><tr><td>UImmunityGameplayEffectComponent</td><td>免疫会阻止其他GameplayEffectSpecs的应用。</td></tr></tbody></table><h2 id="gameplay-ability" tabindex="-1"><a class="header-anchor" href="#gameplay-ability" aria-hidden="true">#</a> Gameplay Ability</h2><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以简单总结为以下几点：</p><ul><li>一定定义了技能或能力的类</li><li>必须被生成 <ul><li>在服务器上生成</li><li><code>Spec</code>复制给对应的客户端</li></ul></li><li>使用<code>Activated</code>方法来使用</li><li>激活需要消耗，也有冷却</li><li>异步执行 <ul><li>同一时间激活多个</li></ul></li><li>技能任务 <ul><li>异步表现不同操作</li></ul></li></ul><h3 id="tags-1" tabindex="-1"><a class="header-anchor" href="#tags-1" aria-hidden="true">#</a> Tags</h3><table><thead><tr><th>Gameplay Tag</th><th>Description</th></tr></thead><tbody><tr><td>Ability Tags</td><td>该技能拥有的标签</td></tr><tr><td>Cancel Abilities with Tag</td><td>激活该技能时，取消带有这些标签的所有技能</td></tr><tr><td>Block Abilities with Tag</td><td>激活该技能时，锁定带有这些标签的所有技能</td></tr><tr><td>Activation Owned Tags</td><td>激活该技能时，把这些标签赋予激活对象。在AbilitySystemGlobals中开启ReplicateActivationOwnedTags，这些标签会被复制。</td></tr><tr><td>Activation Required Tags</td><td>该技能只能在拥有这些标签的Actor/Component上激活</td></tr><tr><td>Activation Blocked Tags</td><td>该技能被锁定，如果激活对象Actor/Component上有这些标签</td></tr><tr><td>Source Required Tags</td><td>激活源Actor/Component上有所有这些标签才能激活这个技能</td></tr><tr><td>Source Blocked Tags</td><td>激活源Actor/Component上有所有这些标签，该技能被锁定</td></tr><tr><td>Target Required Tags</td><td>激活目标Actor/Component上有所有这些标签才能激活这个技能</td></tr><tr><td>Target Blocked Tags</td><td>激活目标Actor/Component上有所有这些标签，该技能被锁定</td></tr></tbody></table><h3 id="instancing-policy" tabindex="-1"><a class="header-anchor" href="#instancing-policy" aria-hidden="true">#</a> Instancing Policy</h3><table><thead><tr><th>Instancing Policy</th><th>Description</th><th>Details</th></tr></thead><tbody><tr><td>Instanced Per Actor</td><td>一个单例在能力被创建时，每一次激活复用</td><td>可以存储持久数据。每次激活，变量必须手动重置。</td></tr><tr><td>Instanced Per Execution</td><td>每激活一次，创建一个实例</td><td>不能存储两次激活之间的数据。</td></tr><tr><td>Non-Instanced</td><td>只有默认类对象，没有实例，静态类</td><td>不能存储状态，不能绑定回调任务。</td></tr></tbody></table><h3 id="net-execution-policy" tabindex="-1"><a class="header-anchor" href="#net-execution-policy" aria-hidden="true">#</a> Net Execution Policy</h3><table><thead><tr><th>Net Execution Policy</th><th>Description</th></tr></thead><tbody><tr><td>Local Only</td><td>只在客户端上运行，不在服务器运行。</td></tr><tr><td>Local Predicted</td><td>先在客户端上激活，然后在服务器上。本地使用预测。服务器可以回滚非法改变</td></tr><tr><td>Server Only</td><td>只在服务器上运行</td></tr><tr><td>Server Initiated</td><td>现在服务器上运行，然后在对于客户端上执行</td></tr></tbody></table><h3 id="things-not-to-use" tabindex="-1"><a class="header-anchor" href="#things-not-to-use" aria-hidden="true">#</a> Things Not to Use</h3><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="enhanced-input" tabindex="-1"><a class="header-anchor" href="#enhanced-input" aria-hidden="true">#</a> Enhanced Input</h3><ul><li>Input Action are bound to inputs via the Input Mapping Context.</li><li>We can decide how to activate abilities in response to inputs. <ul><li>Lyra provides one example</li><li>We&#39;ll use a similar approach (though less complicated)</li></ul></li><li>Data Driven <ul><li>Change Input-to-Ability mappings at runtime</li></ul></li></ul><h2 id="ability-task" tabindex="-1"><a class="header-anchor" href="#ability-task" aria-hidden="true">#</a> Ability Task</h2><figure><img src="'+S+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="target-data" tabindex="-1"><a class="header-anchor" href="#target-data" aria-hidden="true">#</a> Target Data</h3><p>如果需要使用这个数据，需要调用初始化:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>	<span class="token comment">// This is required to use Target Data</span>
	<span class="token class-name">UAbilitySystemGlobals</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InitGlobalData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用<code>ServerSetReplicatedTargetData()</code>把数据复制到服务器</p><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="gameplay-cue" tabindex="-1"><a class="header-anchor" href="#gameplay-cue" aria-hidden="true">#</a> Gameplay Cue</h2><h2 id="gameplay-tag" tabindex="-1"><a class="header-anchor" href="#gameplay-tag" aria-hidden="true">#</a> Gameplay Tag</h2><figure><img src="'+M+`" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p>可以多出使用Tag：</p><ul><li>Inputs</li><li>Abilities</li><li>Attributes</li><li>Damage Types</li><li>Buffs/Debuffs</li><li>Messages</li><li>Data</li><li>Anything you want！</li></ul><p>管理所有Tags：</p><ul><li>存在<code>Config/DefaultGameplayTags.ini</code>文件中 -<code>Edit-&gt;Project Setting-&gt;GameplayTags</code></li><li>使用<code>DataTable</code>创建<code>GameplayTagTableRow</code>数据表，需要配置到项目设置中的<code>Gameplay Tag Table List</code></li></ul><p>如果直接在编辑器下定义，需要在C++中使用，可以使用这个API：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token class-name">FGameplayTag</span><span class="token double-colon punctuation">::</span><span class="token function">RequestGameplayTag</span><span class="token punctuation">(</span><span class="token string">&quot;Ability.Attack&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>c++</code>中声明自定义Tag，使用<code>UGameplayTagsManager::Get().AddNativeGameplayTag()</code>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token comment">// 头文件</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;GameplayTagContainer.h&quot;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">FAuraGameplayTags</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">static</span> <span class="token keyword">const</span> FAuraGameplayTags<span class="token operator">&amp;</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> GameplayTags<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">InitNativeGameplayTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>

	FGameplayTag Attributes_Primary_Strength<span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">static</span> FAuraGameplayTags GameplayTags<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//源文件</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;GameplayTagsManager.h&quot;</span></span>

FAuraGameplayTags FAuraGameplayTags<span class="token double-colon punctuation">::</span>GameplayTags<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token class-name">FAuraGameplayTags</span><span class="token double-colon punctuation">::</span><span class="token function">InitNativeGameplayTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	GameplayTags<span class="token punctuation">.</span>Attributes_Primary_Strength <span class="token operator">=</span> <span class="token class-name">UGameplayTagsManager</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddNativeGameplayTag</span><span class="token punctuation">(</span><span class="token function">FName</span><span class="token punctuation">(</span><span class="token string">&quot;Attributes.Primary.Strength&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FString</span><span class="token punctuation">(</span><span class="token string">&quot;Test Des.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="prediction" tabindex="-1"><a class="header-anchor" href="#prediction" aria-hidden="true">#</a> Prediction</h2><figure><img src="`+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果客户端使用一个技能，向服务器请求，然后服务器确认给客户端。这里的时间差就会很久。</p><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>预测就是，客户端先执行需要使用的技能，同时向服务器发送。服务器在验证后，如果正常就不需要做什么，如果不正常需要取消客户端的技能操作。</p><h3 id="gas-automatically-predicts" tabindex="-1"><a class="header-anchor" href="#gas-automatically-predicts" aria-hidden="true">#</a> GAS Automatically Predicts</h3><ul><li>Gameplay Ability Activation</li><li>Triggered Events</li><li>Gameplay Effect Application <ul><li>Attribute Modifiers (not Execution Calculations)</li><li>GameplayTag Modification</li></ul></li><li>Gameplay Cue Events <ul><li>From within a predicted Gameplay Ability</li><li>Their own Events</li></ul></li><li>Montages</li><li>Movement (UCharacterMovement)</li></ul><h3 id="gas-does-not-predict" tabindex="-1"><a class="header-anchor" href="#gas-does-not-predict" aria-hidden="true">#</a> GAS Does NOT Predict</h3><ul><li>Gameplay Effect Removal</li><li>Gameplay Effect Periodic Effects</li></ul><h3 id="prediction-key" tabindex="-1"><a class="header-anchor" href="#prediction-key" aria-hidden="true">#</a> Prediction Key</h3><figure><img src="'+R+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="ability-activation" tabindex="-1"><a class="header-anchor" href="#ability-activation" aria-hidden="true">#</a> Ability Activation</h3><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="gameplay-effects-prediction" tabindex="-1"><a class="header-anchor" href="#gameplay-effects-prediction" aria-hidden="true">#</a> Gameplay Effects Prediction</h3><ul><li>Side effects</li><li>Only applied on Clients if: <ul><li>There is a valid prediction key</li></ul></li><li>The following are predicted: <ul><li>Attribute Modifications</li><li>Gameplay Tag Modifcations</li><li>Gameplay Cues</li></ul></li><li>When the <strong>FActiveGameplayEffect</strong> is created <ul><li>Stores the Prediction key (Active Gameplay Effect)</li></ul></li><li>On the server, it gets the same key</li><li><strong>FActiveGameplayEffect</strong> is replicated <ul><li>Client checks the key</li><li>If they match, then &quot;OnApplied&quot; logic doesn&#39;t need to be done</li></ul></li></ul><figure><img src="'+O+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="more-info" tabindex="-1"><a class="header-anchor" href="#more-info" aria-hidden="true">#</a> More Info</h3><ul><li>GameplayPrediction.h</li></ul><h2 id="replication-mode" tabindex="-1"><a class="header-anchor" href="#replication-mode" aria-hidden="true">#</a> Replication Mode</h2><table><thead><tr><th>Replication Mode</th><th>Use Case</th><th>Description</th></tr></thead><tbody><tr><td>Full</td><td>Single Player</td><td>Gameplay Effects are replicated to all clients</td></tr><tr><td>Mixed</td><td>Multiplayer,Player-Controlled</td><td>Gameplay Effects are replicated to the owning client only. Gameplay Cues and Gameplay Tags replicated to all clients.</td></tr><tr><td>Minimal</td><td>Multiplayer,AI-Controlled</td><td>GamePlay Effects are <strong>not</strong> replicated. Gameplay Cues and Gameplay Tags replicated to all clients.</td></tr></tbody></table><h2 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> Debug</h2><p>调试命令：<code>ShowDebug AbilitySystem</code></p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2><p>https://docs.unrealengine.com/5.0/en-US/gameplay-ability-system-for-unreal-engine/</p><p>https://github.com/tranek/GASDocumentation#intro</p>',142),q=[U];function z(V,L){return t(),n("div",null,q)}const J=a(N,[["render",z],["__file","GameplayAbilitySystem.html.vue"]]);export{J as default};
