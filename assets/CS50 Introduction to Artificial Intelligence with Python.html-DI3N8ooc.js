import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,f as n,o as i}from"./app-Bki4oVoX.js";const o={};function r(s,e){return i(),a("div",null,e[0]||(e[0]=[n('<h1 id="cs50-s-introduction-to-artificial-intelligence-with-python" tabindex="-1"><a class="header-anchor" href="#cs50-s-introduction-to-artificial-intelligence-with-python"><span>CS50’s Introduction to Artificial Intelligence with Python</span></a></h1><p><a href="https://cs50.harvard.edu/ai/2024/" target="_blank" rel="noopener noreferrer">课程地址</a></p><h2 id="search" tabindex="-1"><a class="header-anchor" href="#search"><span>Search</span></a></h2><ul><li><a href="https://cdn.cs50.net/ai/2020/spring/lectures/0/lecture0.pdf" target="_blank" rel="noopener noreferrer">Slides</a></li></ul><p>Search problems involve an agent that is given an initial state and a goal state, and it returns a solution of how to get from the former to the latter. A navigator app uses a typical search process, where the agent (the thinking part of the program) receives as input your current location and your desired destination, and, based on a search algorithm, returns a suggested path. However, there are many other forms of search problems, like puzzles or mazes.</p><figure><img src="https://cs50.harvard.edu/ai/2024/notes/0/15puzzle.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Finding a solution to a 15 puzzle would require the use of a search algorithm.</p><ul><li>Agent: An entity that perceives its environment and acts upon that environment. In a navigator app, for example, the agent would be a representation of a car that needs to decide on which actions to take to arrive at the destination.</li><li>State: A configuration of an agent in its environment. For example, in a 15 puzzle, a state is any one way that all the numbers are arranged on the board. <ul><li>Initial State: The state from which the search algorithm starts. In a navigator app, that would be the current location.</li></ul></li><li>Actions: Choices that can be made in a state. More precisely, actions can be defined as a function. Upon receiving state <code>s</code> as input, <code>Actions(s)</code> returns as output the set of actions that can be executed in state <code>s</code>. For example, in a 15 puzzle, the actions of a given state are the ways you can slide squares in the current configuration (4 if the empty square is in the middle, 3 if next to a side, 2 if in the corner</li><li>Transition Model: A description of what state results from performing any applicable action in any state. More precisely, the transition model can be defined as a function. Upon receiving state <code>s</code> and action <code>a</code> as input, <code>Results(s, a)</code> returns the state resulting from performing action <code>a</code> in state <code>s</code>. For example, given a certain configuration of a 15 puzzle (state <code>s</code>), moving a square in any direction (action <code>a</code>) will bring to a new configuration of the puzzle (the new state).</li><li>State Space: The set of all states reachable from the initial state by any sequence of actions.</li><li>Goal Test: Way to determine whether a given state is a goal state.</li><li>Path Cost: Numerical cost associated with a given path.</li></ul>',8)]))}const h=t(o,[["render",r],["__file","CS50 Introduction to Artificial Intelligence with Python.html.vue"]]),d=JSON.parse('{"path":"/AI/CS50%20Introduction%20to%20Artificial%20Intelligence%20with%20Python.html","title":"CS50’s Introduction to Artificial Intelligence with Python","lang":"en-US","frontmatter":{},"git":{"createdTime":1713437774000,"updatedTime":1713439157000,"contributors":[{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":2,"url":"https://github.com/BanMing"}]},"readingTime":{"minutes":1.38,"words":413},"filePathRelative":"AI/CS50 Introduction to Artificial Intelligence with Python.md","localizedDate":"April 18, 2024","excerpt":"\\n<p><a href=\\"https://cs50.harvard.edu/ai/2024/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">课程地址</a></p>\\n<h2>Search</h2>\\n<ul>\\n<li><a href=\\"https://cdn.cs50.net/ai/2020/spring/lectures/0/lecture0.pdf\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Slides</a></li>\\n</ul>\\n<p>Search problems involve an agent that is given an initial state and a goal state, and it returns a solution of how to get from the former to the latter. A navigator app uses a typical search process, where the agent (the thinking part of the program) receives as input your current location and your desired destination, and, based on a search algorithm, returns a suggested path. However, there are many other forms of search problems, like puzzles or mazes.</p>"}');export{h as comp,d as data};
