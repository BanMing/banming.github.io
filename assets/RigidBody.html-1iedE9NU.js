import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as d,c as n,e as a,d as h,f as t,b as s}from"./app-5CF5CBXP.js";const c="/assets/20211215233530-ew5GdlwD.png",o="/assets/20211215234326-DD0ZOec0.png",l="/assets/20211229080506-9YQkdOxQ.png",p={},f=s('<h1 id="刚体" tabindex="-1"><a class="header-anchor" href="#刚体" aria-hidden="true">#</a> 刚体</h1><h2 id="什么是刚体" tabindex="-1"><a class="header-anchor" href="#什么是刚体" aria-hidden="true">#</a> 什么是刚体？</h2><p>一个物体表面很结实，它没有形变</p><h2 id="刚体模拟" tabindex="-1"><a class="header-anchor" href="#刚体模拟" aria-hidden="true">#</a> 刚体模拟</h2><p>更新不同时间点物体的状态</p><h2 id="刚体运动" tabindex="-1"><a class="header-anchor" href="#刚体运动" aria-hidden="true">#</a> 刚体运动</h2><p>只允许刚体平移和旋转</p><p>TODO 刚体模拟过程</p><h2 id="旋转矩阵" tabindex="-1"><a class="header-anchor" href="#旋转矩阵" aria-hidden="true">#</a> 旋转矩阵</h2><p>优点：</p><ul><li>可以很方便的旋转任意向量</li></ul><p>缺点：</p><ul><li>有冗余：矩阵有九个元素，旋转只有三个方向</li><li>不直观且复杂</li><li>计算时间微分也就是求角速度不是那么容易</li></ul><h2 id="欧拉角旋转" tabindex="-1"><a class="header-anchor" href="#欧拉角旋转" aria-hidden="true">#</a> 欧拉角旋转</h2><p>优点：</p><ul><li>直观</li></ul><p>缺点：</p><ul><li>万象锁</li><li>计算时间微分也就是求角速度不是那么容易</li></ul><h2 id="四元数旋转" tabindex="-1"><a class="header-anchor" href="#四元数旋转" aria-hidden="true">#</a> 四元数旋转</h2><p>最开始是用来定义一个三维空间中一个点，前一个数为实数<code>s</code>，后一个数<code>v</code>为向量即三个虚数。</p><p>在Unity中 <code>s</code> 为 <code>w</code>，<code>v</code> 为 <code>x,y,z</code></p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="如何使用四元数表示旋转" tabindex="-1"><a class="header-anchor" href="#如何使用四元数表示旋转" aria-hidden="true">#</a> 如何使用四元数表示旋转</h2><p>我们需要绕 <strong>v</strong> 向量旋转Θ角度，可以写成下面这样，于此同时也约束了旋转向量的长度。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="角速度" tabindex="-1"><a class="header-anchor" href="#角速度" aria-hidden="true">#</a> 角速度</h2><h2 id="力矩" tabindex="-1"><a class="header-anchor" href="#力矩" aria-hidden="true">#</a> 力矩</h2><h2 id="距离函数" tabindex="-1"><a class="header-anchor" href="#距离函数" aria-hidden="true">#</a> 距离函数</h2><p>检测是否产生碰撞</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="penalty" tabindex="-1"><a class="header-anchor" href="#penalty" aria-hidden="true">#</a> Penalty</h2><p>当发生碰撞了过后，就对物体施加一个力。 速度、位移下一帧更新。</p><h2 id="impulse" tabindex="-1"><a class="header-anchor" href="#impulse" aria-hidden="true">#</a> Impulse</h2><p>发生碰撞后，速度、位移马上更新。</p><h2 id="阅读" tabindex="-1"><a class="header-anchor" href="#阅读" aria-hidden="true">#</a> 阅读</h2><p>https://graphics.pixar.com/pbm2001/</p>',36),u={href:"https://graphics.pixar.com/pbm2001/pdf/notesg.pdf",target:"_blank",rel:"noopener noreferrer"};function g(x,_){const e=r("ExternalLinkIcon");return d(),n("div",null,[f,a("p",null,[a("a",u,[h("Witkin and Baraff. 2001. Physically Based Modeling – Rigid Body Dynamics. SIGGRAPH Courses."),t(e)])])])}const y=i(p,[["render",g],["__file","RigidBody.html.vue"]]);export{y as default};
