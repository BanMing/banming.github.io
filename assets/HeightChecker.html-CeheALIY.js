import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as t}from"./app-Dh12W6gx.js";const o={};function p(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="height-checker" tabindex="-1"><a class="header-anchor" href="#height-checker"><span>Height Checker</span></a></h1><p>Students are asked to stand in non-decreasing order of heights for an annual photo.</p><p>Return the minimum number of students that must move in order for all students to be standing in non-decreasing order of height.</p><p>Notice that when a group of students is selected they can reorder in any possible way between themselves and the non seleted students remain on their seats.</p><hr><details><summary> Tips </summary> Build the correct order of heights by sorting another array, then compare the two arrays. </details><hr><details><summary> Solution </summary><h3 id="_1-my-badly-solution" tabindex="-1"><a class="header-anchor" href="#_1-my-badly-solution"><span>1. my badly solution</span></a></h3><p>like bubble sort</p><ul><li>get the smallest height index A</li><li>swap A with current index</li><li>mark the heights to map</li><li>after sorting,get how many heights have swaped?</li></ul><hr><h3 id="_2-best-solution" tabindex="-1"><a class="header-anchor" href="#_2-best-solution"><span>2. best solution</span></a></h3><ul><li>Build the correct order of heights by sorting another array</li><li>then compare the two arrays.</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">heightChecker</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>heights<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sortHeights</span><span class="token punctuation">(</span>heights<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> heights<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">sort</span><span class="token punctuation">(</span>sortHeights<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sortHeights<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> sortHeights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            res<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> res<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr>`,9)]))}const r=s(o,[["render",p],["__file","HeightChecker.html.vue"]]),u=JSON.parse('{"path":"/Basic/algorithm/leetcode/array/HeightChecker.html","title":"Height Checker","lang":"en-US","frontmatter":{"date":"2020-09-05T13:56:05.000Z"},"headers":[{"level":3,"title":"1. my badly solution","slug":"_1-my-badly-solution","link":"#_1-my-badly-solution","children":[]},{"level":3,"title":"2. best solution","slug":"_2-best-solution","link":"#_2-best-solution","children":[]}],"git":{"createdTime":1599285365000,"updatedTime":1706518071000,"contributors":[{"name":"BanMing","email":"ban-ming@foxmail.com","commits":2},{"name":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":1}]},"readingTime":{"minutes":0.6,"words":180},"filePathRelative":"Basic/algorithm/leetcode/array/HeightChecker.md","localizedDate":"September 5, 2020","excerpt":"\\n<p>Students are asked to stand in non-decreasing order of heights for an annual photo.</p>\\n<p>Return the minimum number of students that must move in order for all students to be standing in non-decreasing order of height.</p>\\n<p>Notice that when a group of students is selected they can reorder in any possible way between themselves and the non seleted students remain on their seats.</p>"}');export{r as comp,u as data};
