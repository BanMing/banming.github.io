const e=JSON.parse('{"key":"v-b782f288","path":"/GameEngine/Unity/manual/normal/coroutine.html","title":"Coroutine","lang":"en-US","frontmatter":{"date":"2021-03-23T08:33:58.000Z"},"headers":[],"git":{"createdTime":1699280150000,"updatedTime":1706518071000,"contributors":[{"name":"BanMing","email":"ban-ming@foxmail.com","commits":2},{"name":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":1}]},"readingTime":{"minutes":0.78,"words":234},"filePathRelative":"GameEngine/Unity/manual/normal/coroutine.md","localizedDate":"March 23, 2021","excerpt":"<h1> Coroutine</h1>\\n<p>原理：\\n一个协成方法会在编译的时候，转化成一个类，在使用的时候生成一个对象，使用 <code>DelayedCallManager</code> 来调用。这个有点像timermanager那种感觉。\\n因为一个对象所有在协成中的局部变量都会成为对象中的变量，所以说如果协成不使用 yeild return ，也就不会释放该对象。在使用该协成时我们就是在使用的时候new一个即可，不需要保存下来。\\n尽量减少使用....或者说把多个协成合并起来，\\n在使用一个monobehavior中使用了StartCoroutine开启一个协成，我们把该脚本disable了是无法关闭协成的，\\n• 但是我们把该脚本的GameObject设置SetActive（false）时协成会被关掉，\\n• 当然调用 Destroy该脚本也可以关掉，\\n• 也可以直接调用StopCoroutine</p>"}');export{e as data};
