import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e,f as p,o as t}from"./app-Bki4oVoX.js";const i="/assets/2025-04-09-22-16-23-BhjorHIu.gif",s="/assets/2025-04-09-22-21-46-CswuQgyu.png",o="/assets/2025-04-09-22-23-35-B4EAjkgZ.png",l="/assets/2025-04-09-22-34-03-DkVhob6A.png",c="/assets/2025-04-10-00-09-21-B9Rp0CHk.gif",r="/assets/2025-04-09-23-41-14-ljOn_OcC.png",u="/assets/2025-04-09-23-39-45-DGlslCh7.png",d="/assets/2025-04-09-23-43-39-D1-iO5ZA.png",k="/assets/2025-04-09-23-57-44-_1wbzTus.png",m="/assets/2025-04-09-23-45-20-BCRB-X2E.png",g="/assets/2025-04-09-23-46-23-BGEUguBS.png",v="/assets/2025-04-09-23-48-28-wHapOozt.png",h="/assets/2025-04-10-00-04-07-C_I9f7eC.png",b={};function f(_,n){return t(),e("div",null,n[0]||(n[0]=[p('<h1 id="乳摇动画" tabindex="-1"><a class="header-anchor" href="#乳摇动画"><span>乳摇动画</span></a></h1><p>有两种做法：</p><ul><li>弹簧控制器</li><li>物理模拟</li></ul><p>通常来说使用物理模拟的情况会多一些</p><h2 id="弹簧控制器" tabindex="-1"><a class="header-anchor" href="#弹簧控制器"><span>弹簧控制器</span></a></h2><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>骨骼中需要有胸部骨骼：</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在动画蓝图中分别对胸部骨骼添加添加<code>Spring Controller</code>控制节点即可</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可配置选项如下：</p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>核心参数：</p><ul><li>SpringBone：指定要应用弹簧效果的骨骼</li><li>SpringStiffness：弹簧刚度，值越大恢复越快</li><li>SpringDamping：弹簧阻尼，控制运动衰减速度</li><li>ErrorResetThresh：误差重置阈值，防止过度拉伸</li></ul><p>其中<code>Filter Channels</code>是设置可位移和旋转的通道。</p><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><ul><li>初始化：节点获取初始骨骼位置和旋转</li><li>物理模拟： <ul><li>计算弹簧力（基于胡克定律(<code>F = -kx</code>)）</li><li>应用阻尼力（与速度成比例(<code>F = -bv</code>)）</li><li>考虑重力、风力等外力</li></ul></li><li>数值积分：使用Verlet积分等方法更新位置</li><li>约束应用：确保运动在限定范围内</li><li>结果输出：将计算的位置/旋转应用到骨骼</li></ul><h3 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析"><span>源码分析</span></a></h3><p>源码在<a href="https://github.com/EpicGames/UnrealEngine/blob/2d53fcab0066b1f16dd956b227720841cad0f6f7/Engine/Source/Runtime/AnimGraphRuntime/Private/BoneControllers/AnimNode_SpringBone.cpp#L92" target="_blank" rel="noopener noreferrer">Engine/Source/Runtime/AnimGraphRuntime/Private/BoneControllers/AnimNode_SpringBone.cpp</a>文件中</p><p>主要逻辑在<code>FAnimNode_SpringBone::EvaluateSkeletalControl_AnyThread</code>中，这个函数的主要作用是根据物理弹簧模型计算骨骼的新位置和旋转，并将结果输出到OutBoneTransforms数组中。下面解析其工作原理：</p><h4 id="_1-初始检查和设置" tabindex="-1"><a class="header-anchor" href="#_1-初始检查和设置"><span>1. 初始检查和设置</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token function">DECLARE_SCOPE_HIERARCHICAL_COUNTER_ANIMNODE</span><span class="token punctuation">(</span>EvaluateSkeletalControl_AnyThread<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">ANIM_MT_SCOPE_CYCLE_COUNTER_VERBOSE</span><span class="token punctuation">(</span>SpringBone<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token function">IsInGameThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">check</span><span class="token punctuation">(</span>OutBoneTransforms<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">bool</span> bNoOffset <span class="token operator">=</span> <span class="token operator">!</span>bTranslateX <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bTranslateY <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bTranslateZ<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>bNoOffset<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>声明性能计数器和多线程安全范围</li><li>检查输出数组是否为空</li><li>如果没有启用任何平移轴，则直接返回</li></ul><h4 id="_2-获取骨骼初始位置" tabindex="-1"><a class="header-anchor" href="#_2-获取骨骼初始位置"><span>2. 获取骨骼初始位置</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">const</span> FBoneContainer<span class="token operator">&amp;</span> BoneContainer <span class="token operator">=</span> Output<span class="token punctuation">.</span>Pose<span class="token punctuation">.</span><span class="token function">GetPose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetBoneContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> FCompactPoseBoneIndex SpringBoneIndex <span class="token operator">=</span> SpringBone<span class="token punctuation">.</span><span class="token function">GetCompactPoseIndex</span><span class="token punctuation">(</span>BoneContainer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> FTransform<span class="token operator">&amp;</span> SpaceBase <span class="token operator">=</span> Output<span class="token punctuation">.</span>Pose<span class="token punctuation">.</span><span class="token function">GetComponentSpaceTransform</span><span class="token punctuation">(</span>SpringBoneIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">FTransform BoneTransformInWorldSpace <span class="token operator">=</span> SpaceBase <span class="token operator">*</span> Output<span class="token punctuation">.</span>AnimInstanceProxy<span class="token operator">-&gt;</span><span class="token function">GetComponentTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">FVector <span class="token keyword">const</span> TargetPos <span class="token operator">=</span> BoneTransformInWorldSpace<span class="token punctuation">.</span><span class="token function">GetLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取骨骼容器和骨骼索引</li><li>计算骨骼在世界空间中的初始位置(TargetPos)</li></ul><h4 id="_3-初始化物理状态" tabindex="-1"><a class="header-anchor" href="#_3-初始化物理状态"><span>3. 初始化物理状态</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>RemainingTime <span class="token operator">==</span> <span class="token number">0.0f</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    BoneLocation <span class="token operator">=</span> TargetPos<span class="token punctuation">;</span></span>
<span class="line">    BoneVelocity <span class="token operator">=</span> FVector<span class="token double-colon punctuation">::</span>ZeroVector<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果是第一次运行，初始化骨骼位置和速度</li></ul><h4 id="_4-固定时间步长物理模拟" tabindex="-1"><a class="header-anchor" href="#_4-固定时间步长物理模拟"><span>4. 固定时间步长物理模拟</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">IsNearlyZero</span><span class="token punctuation">(</span>FixedTimeStep<span class="token punctuation">,</span> KINDA_SMALL_NUMBER<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>RemainingTime <span class="token operator">&gt;</span> FixedTimeStep<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 物理模拟循环</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用固定时间步长进行稳定物理模拟</li></ul><h5 id="_4-1-基础移动和重置检查" tabindex="-1"><a class="header-anchor" href="#_4-1-基础移动和重置检查"><span>4.1 基础移动和重置检查</span></a></h5><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line">FVector <span class="token keyword">const</span> BaseTranslation <span class="token operator">=</span> <span class="token punctuation">(</span>OwnerVelocity <span class="token operator">*</span> FixedTimeStep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">BoneLocation <span class="token operator">+=</span> BaseTranslation<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TargetPos <span class="token operator">-</span> BoneLocation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SizeSquared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>ErrorResetThresh<span class="token operator">*</span>ErrorResetThresh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    BoneLocation <span class="token operator">=</span> TargetPos<span class="token punctuation">;</span></span>
<span class="line">    BoneVelocity <span class="token operator">=</span> FVector<span class="token double-colon punctuation">::</span>ZeroVector<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>根据所有者速度更新骨骼位置</li><li>如果偏离目标位置超过阈值，则重置状态</li></ul><h5 id="_4-2-弹簧力计算" tabindex="-1"><a class="header-anchor" href="#_4-2-弹簧力计算"><span>4.2 弹簧力计算</span></a></h5><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line">FVector <span class="token keyword">const</span> Error <span class="token operator">=</span> <span class="token punctuation">(</span>TargetPos <span class="token operator">-</span> BoneLocation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">FVector <span class="token keyword">const</span> DampingForce <span class="token operator">=</span> SpringDamping <span class="token operator">*</span> BoneVelocity<span class="token punctuation">;</span></span>
<span class="line">FVector <span class="token keyword">const</span> SpringForce <span class="token operator">=</span> SpringStiffness <span class="token operator">*</span> Error<span class="token punctuation">;</span></span>
<span class="line">FVector <span class="token keyword">const</span> Acceleration <span class="token operator">=</span> SpringForce <span class="token operator">-</span> DampingForce<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>计算弹簧力(胡克定律)和阻尼力</li><li>得到净加速度</li></ul><h5 id="_4-3-速度积分" tabindex="-1"><a class="header-anchor" href="#_4-3-速度积分"><span>4.3 速度积分</span></a></h5><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// 防止阻尼过大导致不稳定</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>SpringDamping <span class="token operator">&gt;</span> CutOffDampingValue<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">double</span> <span class="token keyword">const</span> SafetyScale <span class="token operator">=</span> CutOffDampingValue <span class="token operator">/</span> SpringDamping<span class="token punctuation">;</span></span>
<span class="line">    BoneVelocity <span class="token operator">+=</span> SafetyScale <span class="token operator">*</span> <span class="token punctuation">(</span>Acceleration <span class="token operator">*</span> FixedTimeStep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    BoneVelocity <span class="token operator">+=</span> <span class="token punctuation">(</span>Acceleration <span class="token operator">*</span> FixedTimeStep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>积分计算新速度，包含安全机制防止数值不稳定</li></ul><h5 id="_4-4-位置积分和限制" tabindex="-1"><a class="header-anchor" href="#_4-4-位置积分和限制"><span>4.4 位置积分和限制</span></a></h5><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line">FVector <span class="token keyword">const</span> DeltaMove <span class="token operator">=</span> <span class="token punctuation">(</span>BoneVelocity <span class="token operator">*</span> FixedTimeStep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">BoneLocation <span class="token operator">+=</span> DeltaMove<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 应用位移限制</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>bLimitDisplacement<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 限制最大位移</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>积分计算新位置</li><li>应用位移限制确保不会过度拉伸</li></ul><h4 id="_5-旋转计算" tabindex="-1"><a class="header-anchor" href="#_5-旋转计算"><span>5. 旋转计算</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>bUseRotation<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 计算基于位移的旋转</span></span>
<span class="line">    FQuat AdditionalRotation <span class="token operator">=</span> <span class="token class-name">FQuat</span><span class="token double-colon punctuation">::</span><span class="token function">FindBetweenNormals</span><span class="token punctuation">(</span>ParentToTarget<span class="token punctuation">,</span> ParentToCurrent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 应用旋转轴过滤</span></span>
<span class="line">    OutBoneTM<span class="token punctuation">.</span><span class="token function">SetRotation</span><span class="token punctuation">(</span><span class="token class-name">FQuat</span><span class="token double-colon punctuation">::</span><span class="token function">MakeFromEuler</span><span class="token punctuation">(</span>EularRot<span class="token punctuation">)</span> <span class="token operator">*</span> OutBoneTM<span class="token punctuation">.</span><span class="token function">GetRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果启用了旋转，计算骨骼因位移产生的旋转</li><li>应用旋转轴过滤</li></ul><h4 id="_6-输出结果" tabindex="-1"><a class="header-anchor" href="#_6-输出结果"><span>6. 输出结果</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line">OutBoneTransforms<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">FBoneTransform</span><span class="token punctuation">(</span>SpringBoneIndex<span class="token punctuation">,</span> OutBoneTM<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>将最终变换添加到输出数组</li></ul><h2 id="物理模拟" tabindex="-1"><a class="header-anchor" href="#物理模拟"><span>物理模拟</span></a></h2><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><p>骨骼中需要有胸部骨骼：</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>步骤如下：</p><ol><li>打开角色<code>Physics Asset</code><br><br><img src="'+r+'" alt="" loading="lazy"></li><li>旋转胸部骨骼创建<code>Sphere Body</code><br><br><img src="'+u+'" alt="" loading="lazy"></li><li>设置球形大小<br><br><img src="'+d+'" alt="" loading="lazy"></li><li>设置物理类型为模拟<br><br><img src="'+k+'" alt="" loading="lazy"></li><li>打开约束<br><br><img src="'+m+'" alt="" loading="lazy"></li><li>设置约束-&gt;锁住角度<br><br><img src="'+g+'" alt="" loading="lazy"></li><li>设置约束-&gt;线性限制<br><br><img src="'+v+'" alt="" loading="lazy"></li><li>设置约束-&gt;线性力度<br><img src="'+h+'" alt="" loading="lazy"></li><li></li></ol><p>两边胸都做上面操做即可</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ul><li><a href="https://www.youtube.com/watch?v=aUgEMLQ5rh8" target="_blank" rel="noopener noreferrer">Jiggle physics tutorial for Unreal Engine 5</a></li><li><a href="https://www.youtube.com/watch?v=KJOuE1KPM2g&amp;t=497s" target="_blank" rel="noopener noreferrer">How to Setup Jiggle Physics in Unreal Engine 5</a></li></ul>',61)]))}const S=a(b,[["render",f],["__file","BreastAnim.html.vue"]]),x=JSON.parse('{"path":"/GameEngine/Unreal/animation/BreastAnim.html","title":"乳摇动画","lang":"en-US","frontmatter":{"date":"2025-04-07T18:57:03.000Z","tag":["Unreal Engine","Animation"]},"git":{"createdTime":1744215117000,"updatedTime":1744259295000,"contributors":[{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":2,"url":"https://github.com/BanMing"}]},"readingTime":{"minutes":3.55,"words":1066},"filePathRelative":"GameEngine/Unreal/animation/BreastAnim.md","localizedDate":"April 7, 2025","excerpt":"\\n<p>有两种做法：</p>\\n<ul>\\n<li>弹簧控制器</li>\\n<li>物理模拟</li>\\n</ul>\\n<p>通常来说使用物理模拟的情况会多一些</p>\\n<h2>弹簧控制器</h2>\\n<figure><figcaption></figcaption></figure>\\n<h3>使用</h3>\\n<p>骨骼中需要有胸部骨骼：</p>\\n<figure><figcaption></figcaption></figure>\\n<p>在动画蓝图中分别对胸部骨骼添加添加<code>Spring Controller</code>控制节点即可</p>\\n<figure><figcaption></figcaption></figure>"}');export{S as comp,x as data};
