import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as t,e as o}from"./app-rHfn_iPT.js";fetch("https://raw.githubusercontent.com/BanMing/CplusplusLab/master/template/class_test.h").then(e=>e.text()).then(e=>{const a=document.getElementById("class_test_file_content");a.textContent=e,Prism.highlightAll()}).catch(e=>console.error("Error fetching file:",e));fetch("https://raw.githubusercontent.com/BanMing/CplusplusLab/master/template/function_test.h").then(e=>e.text()).then(e=>{const a=document.getElementById("function_test_file_content");a.textContent=e,Prism.highlightAll()}).catch(e=>console.error("Error fetching file:",e));const p={},l=o(`<h1 id="模板与泛型编程" tabindex="-1"><a class="header-anchor" href="#模板与泛型编程" aria-hidden="true">#</a> 模板与泛型编程</h1><h2 id="定义模板" tabindex="-1"><a class="header-anchor" href="#定义模板" aria-hidden="true">#</a> 定义模板</h2><h3 id="函数模板" tabindex="-1"><a class="header-anchor" href="#函数模板" aria-hidden="true">#</a> 函数模板</h3><ul><li>在模板定义中，模板参数列表不能为空 <code>template&lt;typename T&gt;</code></li><li>模板程序应该尽量减少对实参类型的要求，减少特定使用，如调用泛型类中某个函数。</li><li>函数模板和类模板成员函数的定义通常放在头文件中。</li><li>保证传递给模板的实参支持模板所要求的操作，以及这些操作在模板中能正确工作，是调用者的责任。</li></ul><details><summary> 示例代码 </summary><pre id="function_test_file_content"></pre></details><h3 id="类模板" tabindex="-1"><a class="header-anchor" href="#类模板" aria-hidden="true">#</a> 类模板</h3><p>一个类模板的每个实例都形成一个独立的类。类型<code>Blob&lt;string&gt;</code>与任何其他<code>Blob</code>类型都没有关联，也不会对任何其他<code>Blob</code>类型的成员有特殊访问权限</p><p>我们既可以在类模板内部，也可以在类模板外部为其定义成员函数，且定义在类模板内的成员函数被隐式声明为内联函数 声明：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ret<span class="token operator">-</span>type StrBlob<span class="token double-colon punctuation">::</span>member<span class="token operator">-</span><span class="token function">name</span><span class="token punctuation">(</span>parm<span class="token operator">-</span>list<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>定义：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
ret<span class="token operator">-</span>type Blob<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>member<span class="token operator">-</span><span class="token function">name</span><span class="token punctuation">(</span>parm<span class="token operator">-</span>list<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，对于一个实例化了的类模板，其成员只有在使用时才被实例化。</p><p>C++11中可以直接设置别名</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">using</span> BlobT <span class="token operator">=</span> Blob<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">;</span>
BlobT<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与任何其他static数据成员相同，模板类的每个static数据成员必须有且仅有一个定义。</p><p>类似任何其他成员函数，一个static成员函数只有在使用时才会实例化</p><details><summary> 示例代码 </summary><pre>  
    <code id="class_test_file_content" class="language-cpp"></code>  
</pre></details>`,17),c=[l];function r(e,a,i,d,u,m){return s(),t("div",null,c)}const g=n(p,[["render",r],["__file","Template.html.vue"]]);export{g as default};
