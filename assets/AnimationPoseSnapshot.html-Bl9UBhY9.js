import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e,f as s,o}from"./app-Bki4oVoX.js";const i="/assets/2025-06-22-19-48-43-6HRmmkJ2.gif",t="/assets/2025-06-22-19-50-17-lCpvNuz8.png",l="/assets/2025-06-22-19-52-51-C-uxSp_f.png",p="/assets/2025-06-22-19-58-13-Bj1iRrmc.png",r="/assets/2025-06-22-20-00-52-C2RhneXQ.png",c="/assets/2025-06-22-20-11-36-BgtVWJcj.png",m="/assets/2025-06-22-20-13-43-D0rlcnw8.png",d="/assets/2025-06-22-17-29-12-BG3SQzna.gif",h="/assets/2025-06-22-17-41-14-v7PAT7RX.png",g="/assets/2025-06-22-17-44-33-3DEVJaWm.png",u="/assets/2025-06-22-17-49-51-9sw03Guv.png",f="/assets/2025-06-22-17-52-01-BYm0qB4K.png",b="/assets/2025-06-22-20-23-18-CHSnpEHY.png",S={};function _(v,n){return o(),e("div",null,n[0]||(n[0]=[s('<h1 id="animation-pose-snapshot" tabindex="-1"><a class="header-anchor" href="#animation-pose-snapshot"><span>Animation Pose Snapshot</span></a></h1><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>将角色的当前的姿态保存一份，后续对保存的姿态进行处理。</p><ul><li><p>保存姿势函数：</p><ul><li>UAnimInstance::SavePoseSnapshot(FName SnapshotName)</li><li>UAnimInstance::SnapshotPose(FPoseSnapshot&amp; Snapshot)</li></ul></li><li><p>使用保存姿势在动画蓝图中用<code>Pose Snapshot</code>节点。</p></li></ul><h3 id="过场动画过渡" tabindex="-1"><a class="header-anchor" href="#过场动画过渡"><span>过场动画过渡</span></a></h3><p>在播放过场动画结束时，想要角色与过场动画中的动画无缝的过渡，效果如下：</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>过场动画为简单播放一个跳舞的动画：</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>示例的具体做法如下：</p><ol><li>设置<code>Level Sequence</code>的<code>Finsh Completion State Override</code>为<code>Force Restore State</code>，该设置让过场动画在播放完时，保持角色的姿势。<br> <img src="'+l+'" alt="" loading="lazy"></li><li>监听过场动画结束，并把角色姿势保存下来，设置混合保存的姿势的开关 <br><img src="'+p+'" alt="" loading="lazy"></li><li>过场动画通常有跳过功能，手动调用Stop函数停止过场动画，并不能保持角色的姿势，所以这里需要手动再调一下保存姿势的逻辑 <br> <img src="'+r+'" alt="" loading="lazy"></li><li>动画蓝图如下：<br> <img src="'+c+'" alt="" loading="lazy"></li></ol><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>值得注意，经常过场动画中的角色和游戏中的角色并不是公用的一个actor，这里可以是使用<code>UAnimInstance::SnapshotPose(FPoseSnapshot&amp; Snapshot)</code>方法，存储姿势快照，在同动画蓝图中将<code>Pose Snapshot</code>节点的<code>Mode</code>设置为<code>Snapshot Pin</code>即可<br><img src="'+m+'" alt="" loading="lazy"></p></div><h3 id="击倒起身" tabindex="-1"><a class="header-anchor" href="#击倒起身"><span>击倒起身</span></a></h3><p>角色在被击倒后开启了物理模拟，进入布娃娃系统后，角色需要从布娃娃姿态播放一个起身动画然后回到待机姿势。由于布娃娃产生的姿态是随机的，所以并不能在起身动画中预设好躺在地面的动画。这里有保存一下播放起身动画前，角色的姿态。将该姿态与起身动画做混合即可，效果如下：</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>示例的具体做法如下：</p><ol><li>设置角色物理资源，添加角色的根节点武器配置，并将类型改为运动，关闭碰撞。该设置能让关闭物理模拟时，播放动画角色的位置固定。<br><img src="'+h+'" alt="" loading="lazy"></li><li>设置角色物理根节点到骨盆关节的约束，将约束限制都改为自由。<br><img src="'+g+'" alt="" loading="lazy"></li><li>按下G键，将角色的骨骼蒙皮开启物理模拟，并将碰撞描述设置为<code>RagDoll</code></li><li>按下F键，将角色当前的姿势存起来，需要<strong>Delay</strong>一下，然后将角色的骨骼蒙皮关闭物理模拟，播放起身动画。<br><img src="'+u+'" alt="" loading="lazy"></li><li>动画蓝图中的设置<br><img src="'+f+'" alt="" loading="lazy"></li></ol><p>同时可以制作：</p><ul><li>在开启物理模拟时，角色胶囊体跟随骨骼蒙皮的移动</li><li>根据角色躺在地面上盆骨骨骼的朝向，选择播放正面起身或者背面起身的动画</li></ul><h3 id="卡肉" tabindex="-1"><a class="header-anchor" href="#卡肉"><span>卡肉</span></a></h3><p>这个没有做示例，简单讲一下实现逻辑，当角色打到敌人时，手臂会有一个被卡在敌人身上的感受，来增加打击感。可以在角色打到敌人时对角色姿势快照，然后将该快照与角色攻击的动画进行按骨骼混合，角色手臂使用快照姿势，其他骨骼使用攻击动画姿势，这样表现出的效果即是手臂会停住一下，大致的动画蓝图设置如下：</p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><h3 id="数据" tabindex="-1"><a class="header-anchor" href="#数据"><span>数据</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">FPoseSnapshot</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    TArray<span class="token operator">&lt;</span>FTransform<span class="token operator">&gt;</span> LocalTransforms<span class="token punctuation">;</span> <span class="token comment">// 骨骼本地空间变换</span></span>
<span class="line">    TArray<span class="token operator">&lt;</span>FName<span class="token operator">&gt;</span> BoneNames<span class="token punctuation">;</span>           <span class="token comment">// 骨骼名称(可选)</span></span>
<span class="line">    FName SkeletalMeshName<span class="token punctuation">;</span>            <span class="token comment">// 骨骼网格体名称</span></span>
<span class="line">    FName SnapshotName<span class="token punctuation">;</span>                <span class="token comment">// 快照名称</span></span>
<span class="line">    <span class="token keyword">bool</span> bIsValid<span class="token punctuation">;</span>                     <span class="token comment">// 是否有效标志</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>骨骼变换存储：</p><ul><li>使用FTransform数组存储骨骼变换，保持高效的内存布局</li><li>可以选择存储局部空间或组件空间的变换</li></ul></li><li><p>性能优化：</p><ul><li>预分配数组空间避免动态扩容</li><li>使用内存拷贝批量处理变换数据</li></ul></li><li><p>线程安全：</p><ul><li>通常在游戏线程执行</li><li>快照数据是只读的，可以安全地在多线程环境中传递</li></ul></li></ul><p>保存姿势<code>UAnimInstance::SavePoseSnapshot(FName SnapshotName)</code>的数据存储在<code>FAnimInstanceProxy::PoseSnapshots</code>数组中。</p><h3 id="应用数据" tabindex="-1"><a class="header-anchor" href="#应用数据"><span>应用数据</span></a></h3><p>应用主要使用动画节点<code>PoseSnapshot</code>实现的文件是<code>FAnimNode_PoseSnapshot</code>，核心函数是<code>FAnimNode_PoseSnapshot::ApplyPose(const FPoseSnapshot&amp; PoseSnapshot, FCompactPose&amp; OutPose)</code>，其逻辑就是把快照的每根骨骼的本地坐标数据放到<code>FCompactPose</code>中。</p><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h3><ul><li>骨骼层次一致性：快照和目标骨骼必须一样</li><li>性能开销：频繁的快照操作可能影响性能</li><li>内存使用：大量快照会占用内存</li><li>曲线数据：默认不包含动画曲线数据，需要额外处理</li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ul><li><a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/animation-pose-snapshot-in-unreal-engine" target="_blank" rel="noopener noreferrer">Animation Pose Snapshot</a></li><li><a href="https://www.youtube.com/watch?v=0H6w3YtLr2Y" target="_blank" rel="noopener noreferrer">Save Pose Snapshot | Adv. Anim Application </a></li><li><a href="https://www.youtube.com/watch?v=0-qvUWAYJCc" target="_blank" rel="noopener noreferrer">Unreal Engine 5: Pose Snapshot</a></li><li><a href="https://epicgames.ent.box.com/v/TwitchProjectDownload" target="_blank" rel="noopener noreferrer">TwitchProjectDownload</a></li><li><a href="https://forums.unrealengine.com/t/guide-how-to-create-a-smooth-blend-between-two-different-animation-blueprints-4-24/153057" target="_blank" rel="noopener noreferrer">Guide: How to create a smooth blend between two different animation blueprints</a></li><li><a href="https://github.com/BanMing/PoseSnapshot" target="_blank" rel="noopener noreferrer">示例工程</a></li></ul>`,33)]))}const w=a(S,[["render",_],["__file","AnimationPoseSnapshot.html.vue"]]),A=JSON.parse('{"path":"/GameEngine/Unreal/animation/AnimationPoseSnapshot.html","title":"Animation Pose Snapshot","lang":"en-US","frontmatter":{"date":"2025-06-17T18:03:06.000Z","tag":["Unreal Engine","Animation"]},"git":{"createdTime":1750351175000,"updatedTime":1750596662000,"contributors":[{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":4,"url":"https://github.com/BanMing"}]},"readingTime":{"minutes":4.32,"words":1296},"filePathRelative":"GameEngine/Unreal/animation/AnimationPoseSnapshot.md","localizedDate":"June 17, 2025","excerpt":"\\n<h2>使用</h2>\\n<p>将角色的当前的姿态保存一份，后续对保存的姿态进行处理。</p>\\n<ul>\\n<li>\\n<p>保存姿势函数：</p>\\n<ul>\\n<li>UAnimInstance::SavePoseSnapshot(FName SnapshotName)</li>\\n<li>UAnimInstance::SnapshotPose(FPoseSnapshot&amp; Snapshot)</li>\\n</ul>\\n</li>\\n<li>\\n<p>使用保存姿势在动画蓝图中用<code>Pose Snapshot</code>节点。</p>\\n</li>\\n</ul>\\n<h3>过场动画过渡</h3>\\n"}');export{w as comp,A as data};
