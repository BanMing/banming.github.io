import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as a,b as o}from"./app-qNCuMsgW.js";const t="/assets/2023-03-07_07-58-THbDtYX3.png",c="/assets/2023-03-07_08-07-j2eb3z8B.png",n="/assets/2023-03-07_08-08-NAcp4zYw.png",d="/assets/2023-03-07_08-10-Zna-5uf3.png",r="/assets/2023-03-07_08-17-2gEicwvg.png",s={},p=o('<h1 id="编译" tabindex="-1"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h1><h2 id="编译步骤" tabindex="-1"><a class="header-anchor" href="#编译步骤" aria-hidden="true">#</a> 编译步骤</h2><h3 id="预编译" tabindex="-1"><a class="header-anchor" href="#预编译" aria-hidden="true">#</a> 预编译</h3><p>使用 <code>#define</code>，<code>#include</code>，<code>#if</code>等以<code>#</code>开始的语句，来设置预编译。读取指定文件，把该文件读取到当前文件。</p><p>设置该选项可以查看预处理后的代码文件，打开该选项就不会生成<code>obj</code>文件了。</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>文件在对应的输出文件夹中，以<code>.i</code>为后缀的文件。</p><h3 id="实际编译" tabindex="-1"><a class="header-anchor" href="#实际编译" aria-hidden="true">#</a> 实际编译</h3><p>该过程就是把文本文件转化为机器码。生成的<code>obj</code>文件是二进制文件，如图：</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以设置编译后的文件为可读性更高的汇编文件，将输出设置为汇编，如图：</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这样就可以在输出文件夹中看到<code>.arm</code>文件，其中存储是汇编代码：</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>设置编译优化：</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',16),g=[p];function f(l,_){return i(),a("div",null,g)}const u=e(s,[["render",f],["__file","Complie.html.vue"]]);export{u as default};
