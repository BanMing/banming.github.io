import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as e,b as r}from"./app-5CF5CBXP.js";const n="/assets/20211210144409-p_rXNG-U.png",t="/assets/20211215155406-FYE2l0U8.png",h="/assets/20211215155939-vbL2vifI.png",d="/assets/20211215155845-PLqyaXDs.png",s="/assets/20211214211537-strxdGa7.png",p="/assets/20211215182111-MZMeXDIg.png",o={},c=r('<h1 id="rts-game-ai" tabindex="-1"><a class="header-anchor" href="#rts-game-ai" aria-hidden="true">#</a> RTS Game AI</h1><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>是一个自底向上的设计方式做的。</p><h2 id="移动" tabindex="-1"><a class="header-anchor" href="#移动" aria-hidden="true">#</a> 移动</h2><h3 id="导航" tabindex="-1"><a class="header-anchor" href="#导航" aria-hidden="true">#</a> 导航</h3><p>两层导航：空中、地面</p><p>主要策略为走最少的点</p><h3 id="世界转换" tabindex="-1"><a class="header-anchor" href="#世界转换" aria-hidden="true">#</a> 世界转换</h3><p>可视化点，预先配置建筑的转角点与地形的转角点。</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>量化是在有建筑创建或是销毁是就会执行 这里执行的重建 GridChangesVisibilityGraphHelper.ModifyVisibilityGraph</p><p>转角会根据寻路单位的体型改变，防止单位被卡住和不能通过。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="流程" tabindex="-1"><a class="header-anchor" href="#流程" aria-hidden="true">#</a> 流程</h3><p>先使用射线探测是否可以直接到达目的，不能就是启动寻路，能就直接走到目标点 PathfindingProcessor.EvaluatePathWork</p><p>添加寻路计算到Job线程中执行 PathfindingProcessor.DoPathingWork PathfindingProcessor.PathfindingJobDelegate</p><p>主要使用了 A*算法，先把之前射线检测到的障碍物的转角点先加入Open列表。 VisibilityGraph.FindPath</p><p>然后选出最小预计总花销的节点作为当前节点。 VisibilityGraph.DoPathFind</p><p>判断当前节点是否可以到达起始节点,如果可以则实际使用射线检测判断当前节点是否可以直接到达起始节点。 如果可以直接到达起始节点则把当前节点的上一个节点修改为起点。 VisibilityGraph.CheckOriginConnection</p><p>判断当前节点是否可以直接到达目的地，使用射线检测判断，如果不能直接到达，也就是当前节点与目标点有障碍物，如果有碰撞就更新碰撞的障碍物的转角节点的信息并加入Open列表。 VisibilityGraph.HandleRaycastObstacleHit</p><p>如果当前节点可以直接到达目的地，就直接返回当前节点。不能直接到达则将当前节点移除Open列表，并加入Closed列表。</p><p>根据当前点是在起点的左边还是右边更新当前节点对应的所有连接的节点信息， VisibilityGraph.AccumulateNeighbours 且找出与当前节点所有相连的节点最小总预计花销的点。 VisibilityGraph.ExpandNeighbours</p><p>判断该节点与Open列表中最小的节点，如果新的节点小于Open中的，那么就不需要把所有新发现的节点加入到Open列表中。</p><p>否则在新节点加入Open列表后，找到最小花销点，再次循环更新当前节点。</p><h3 id="细节实现" tabindex="-1"><a class="header-anchor" href="#细节实现" aria-hidden="true">#</a> 细节实现</h3><h4 id="节点计算信息" tabindex="-1"><a class="header-anchor" href="#节点计算信息" aria-hidden="true">#</a> 节点计算信息：</h4><ul><li>Cost-so-far: 两个节点距离</li><li>Heuristic: 当前节点到目的节点距离</li><li>Open,Closed: 寻路节点状态</li><li>StatusToPathOrigin：位于起点左方右方</li><li>StatusToPathDestination：：位于终点点左方右方</li><li>NeighboursInRightRegion: 右边的连接点</li><li>NeighboursInLeftRegion: 左边的连接点</li></ul><h4 id="左右判断" tabindex="-1"><a class="header-anchor" href="#左右判断" aria-hidden="true">#</a> 左右判断</h4><p>这里的左右是使用的转角两边做判断。</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个转角是90度圆锥，方向是由中心点到转角点的方向决定。只需要使用起点与圆锥两边分别做点乘即可得到当前转角位于起始点的左边还是右边。</p><h4 id="碰撞检测" tabindex="-1"><a class="header-anchor" href="#碰撞检测" aria-hidden="true">#</a> 碰撞检测</h4><p>先把地图网格化，如果格子上有建筑，那么这个格子就会被定义为障碍物，再判断由起点到终点连线上是否有已经被定义为障碍物的格子。</p><p>但是有这种情况，障碍物只有半在格子中</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们只需要计算三角形与射线是否相交，即只需要判断射线与三角形任意两个边是否相交就可以了。在即就是判断线段的两个端点是否在边的两侧。</p><h3 id="特殊处理" tabindex="-1"><a class="header-anchor" href="#特殊处理" aria-hidden="true">#</a> 特殊处理</h3><h2 id="行为制定" tabindex="-1"><a class="header-anchor" href="#行为制定" aria-hidden="true">#</a> 行为制定</h2><h3 id="建筑-生产单位" tabindex="-1"><a class="header-anchor" href="#建筑-生产单位" aria-hidden="true">#</a> 建筑 &amp; 生产单位</h3><h3 id="单位行为树" tabindex="-1"><a class="header-anchor" href="#单位行为树" aria-hidden="true">#</a> 单位行为树</h3><h3 id="单位技能" tabindex="-1"><a class="header-anchor" href="#单位技能" aria-hidden="true">#</a> 单位技能</h3><p>在AIGroupAbilityActivationAttributes配置当前阵营的所有单位的技能，</p><p>同样是规则系统，满足执行条件就分配行为树中去执行</p><h3 id="任务系统" tabindex="-1"><a class="header-anchor" href="#任务系统" aria-hidden="true">#</a> 任务系统</h3><h2 id="策略" tabindex="-1"><a class="header-anchor" href="#策略" aria-hidden="true">#</a> 策略</h2><h3 id="团队行为" tabindex="-1"><a class="header-anchor" href="#团队行为" aria-hidden="true">#</a> 团队行为</h3><h3 id="influence-map" tabindex="-1"><a class="header-anchor" href="#influence-map" aria-hidden="true">#</a> Influence Map</h3>',48),l=[c];function f(g,u){return i(),e("div",null,l)}const _=a(o,[["render",f],["__file","RTSAI.html.vue"]]);export{_ as default};
