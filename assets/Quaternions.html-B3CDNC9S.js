import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as s,f as e,o as t}from"./app-DOydRZ7s.js";const i={};function o(p,n){return t(),s("div",null,n[0]||(n[0]=[e(`<h1 id="quaternions" tabindex="-1"><a class="header-anchor" href="#quaternions"><span>Quaternions</span></a></h1><p>绕轴旋转 θ 可以在球体上表示为任何有向弧，在垂直于旋转轴的平面上长度为 <code>θ/2</code>。正角产生绕轴逆时针旋转。</p><p>为什么是1/2呢？因为一个四元数可以记录2个圆周，也就是720度，但是sin/cos的循环时360度，所以为了适配就除以2。</p><h2 id="different-methods-for-creating-quaternions" tabindex="-1"><a class="header-anchor" href="#different-methods-for-creating-quaternions"><span>Different methods for creating quaternions</span></a></h2><h2 id="retrieving-the-angle-and-axis-of-aquaternion" tabindex="-1"><a class="header-anchor" href="#retrieving-the-angle-and-axis-of-aquaternion"><span>Retrieving the angle and axis of aquaternion</span></a></h2><h2 id="basic-component-wise-operations" tabindex="-1"><a class="header-anchor" href="#basic-component-wise-operations"><span>Basic component-wise operations</span></a></h2><h2 id="the-length-and-dot-product-of-two-quaternions" tabindex="-1"><a class="header-anchor" href="#the-length-and-dot-product-of-two-quaternions"><span>The length and dot product of two quaternions</span></a></h2><h2 id="inverting-quaternions" tabindex="-1"><a class="header-anchor" href="#inverting-quaternions"><span>Inverting quaternions</span></a></h2><p>当一个四元数被归一化后，他的共轨和逆向时一样。</p><h2 id="combining-quaternions" tabindex="-1"><a class="header-anchor" href="#combining-quaternions"><span>Combining quaternions</span></a></h2><h2 id="transforming-vectors-by-quaternions" tabindex="-1"><a class="header-anchor" href="#transforming-vectors-by-quaternions"><span>Transforming vectors by quaternions</span></a></h2><p>纯四元数就是，旋转轴时单位向量，w是0时。</p><h2 id="interpolating-between-quaternions" tabindex="-1"><a class="header-anchor" href="#interpolating-between-quaternions"><span>Interpolating between quaternions</span></a></h2><p>四元数是一个旋转角度，而不是方向。做插值，就是从一个角度变道另一个角度。在旋转中，我们可以获得最长的路径或者最短的路径。插值最好使用最短的路径。在两个四元数点乘时，大于零时就是取得最短路径，小于零时就是取得最长路径。如果我们需要使用最短路径，就可以做如下操作：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line">quat <span class="token function">SampleFunction</span><span class="token punctuation">(</span><span class="token keyword">const</span> quat<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> quat<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> </span>
<span class="line"><span class="token punctuation">{</span>    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> </span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        b <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span>    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">slerp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="converting-quaternions-and-matrices" tabindex="-1"><a class="header-anchor" href="#converting-quaternions-and-matrices"><span>Converting quaternions and matrices</span></a></h2>`,16)]))}const u=a(i,[["render",o],["__file","Quaternions.html.vue"]]),l=JSON.parse('{"path":"/Animation/gameOpenGL/Quaternions.html","title":"Quaternions","lang":"en-US","frontmatter":{"date":"2022-03-09T21:53:58.000Z","tag":["Math"],"order":4},"git":{"createdTime":1646834038000,"updatedTime":1707215246000,"contributors":[{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":4,"url":"https://github.com/BanMing"},{"name":"wupeng","username":"wupeng","email":"ban-ming@foxmail.com","commits":2,"url":"https://github.com/wupeng"},{"name":"wupeng","username":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":3,"url":"https://github.com/wupeng"}]},"readingTime":{"minutes":1.06,"words":318},"filePathRelative":"Animation/gameOpenGL/Quaternions.md","localizedDate":"March 9, 2022","excerpt":"\\n<p>绕轴旋转 θ 可以在球体上表示为任何有向弧，在垂直于旋转轴的平面上长度为 <code>θ/2</code>。正角产生绕轴逆时针旋转。</p>\\n<p>为什么是1/2呢？因为一个四元数可以记录2个圆周，也就是720度，但是sin/cos的循环时360度，所以为了适配就除以2。</p>\\n<h2>Different methods for creating quaternions</h2>\\n<h2>Retrieving the angle and axis of aquaternion</h2>\\n<h2>Basic component-wise operations</h2>\\n<h2>The length and dot product of two quaternions</h2>"}');export{u as comp,l as data};
