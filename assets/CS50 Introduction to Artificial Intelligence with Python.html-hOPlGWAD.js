import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as r,c as s,a as e,b as t,d as n,e as c}from"./app--g42H8mg.js";const l={},h=e("h1",{id:"cs50-s-introduction-to-artificial-intelligence-with-python",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cs50-s-introduction-to-artificial-intelligence-with-python","aria-hidden":"true"},"#"),t(" CS50’s Introduction to Artificial Intelligence with Python")],-1),d={href:"https://cs50.harvard.edu/ai/2024/",target:"_blank",rel:"noopener noreferrer"},u=e("h2",{id:"search",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#search","aria-hidden":"true"},"#"),t(" Search")],-1),p={href:"https://cdn.cs50.net/ai/2020/spring/lectures/0/lecture0.pdf",target:"_blank",rel:"noopener noreferrer"},f=c('<p>Search problems involve an agent that is given an initial state and a goal state, and it returns a solution of how to get from the former to the latter. A navigator app uses a typical search process, where the agent (the thinking part of the program) receives as input your current location and your desired destination, and, based on a search algorithm, returns a suggested path. However, there are many other forms of search problems, like puzzles or mazes.</p><figure><img src="https://cs50.harvard.edu/ai/2024/notes/0/15puzzle.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Finding a solution to a 15 puzzle would require the use of a search algorithm.</p><ul><li>Agent: An entity that perceives its environment and acts upon that environment. In a navigator app, for example, the agent would be a representation of a car that needs to decide on which actions to take to arrive at the destination.</li><li>State: A configuration of an agent in its environment. For example, in a 15 puzzle, a state is any one way that all the numbers are arranged on the board. <ul><li>Initial State: The state from which the search algorithm starts. In a navigator app, that would be the current location.</li></ul></li><li>Actions: Choices that can be made in a state. More precisely, actions can be defined as a function. Upon receiving state <code>s</code> as input, <code>Actions(s)</code> returns as output the set of actions that can be executed in state <code>s</code>. For example, in a 15 puzzle, the actions of a given state are the ways you can slide squares in the current configuration (4 if the empty square is in the middle, 3 if next to a side, 2 if in the corner</li><li>Transition Model: A description of what state results from performing any applicable action in any state. More precisely, the transition model can be defined as a function. Upon receiving state <code>s</code> and action <code>a</code> as input, <code>Results(s, a)</code> returns the state resulting from performing action <code>a</code> in state <code>s</code>. For example, given a certain configuration of a 15 puzzle (state <code>s</code>), moving a square in any direction (action <code>a</code>) will bring to a new configuration of the puzzle (the new state).</li><li>State Space: The set of all states reachable from the initial state by any sequence of actions.</li><li>Goal Test: Way to determine whether a given state is a goal state.</li><li>Path Cost: Numerical cost associated with a given path.</li></ul>',4);function g(m,_){const a=o("ExternalLinkIcon");return r(),s("div",null,[h,e("p",null,[e("a",d,[t("课程地址"),n(a)])]),u,e("ul",null,[e("li",null,[e("a",p,[t("Slides"),n(a)])])]),f])}const b=i(l,[["render",g],["__file","CS50 Introduction to Artificial Intelligence with Python.html.vue"]]);export{b as default};
