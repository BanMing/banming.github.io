import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e,f as s,o as t}from"./app-wDPl_nA_.js";const o="/assets/2025-02-10-20-42-27-C2zBUBDe.png",i="/assets/2025-02-10-20-44-10-nml2fiT5.png",r="/assets/2025-02-10-20-46-08-SIxGSASW.png",c="/assets/2025-02-10-20-47-07-DmzU2w2C.png",p="/assets/2025-02-10-20-47-21-D-GYl9NO.png",l="/assets/2025-02-10-20-49-16-Cr8LYaLg.gif",d="/assets/2025-02-10-21-05-37-_gIAzqei.png",g="/assets/2025-02-10-21-08-40-O3wmDigQ.png",m="/assets/2025-02-10-21-09-37-BTqalQaV.png",u="/assets/2025-02-10-21-10-07-DJjN_ewx.gif",f="/assets/2025-02-10-21-58-19-DqBy_h8W.png",h="/assets/2025-06-21-15-21-03-Cor5R4Ru.png",b="/assets/2025-06-21-15-22-35-DYpaAc2x.png",k="/assets/2025-02-10-22-15-40-CwzSqJ3G.png",v="/assets/2025-02-10-22-18-54-CdpFkc2Q.png",_="/assets/2025-02-10-22-19-16-DW2DuSJf.png",y="/assets/2025-02-11-00-16-05-BseSnnlh.png",S="/assets/2025-02-11-00-18-12-C407uKKt.png",A="/assets/2025-02-10-22-20-50-DC29LY3K.png",M="/assets/2025-02-10-22-19-40-BUjb8W3d.png",x="/assets/2025-02-11-00-20-53-Xhc7nIS0.png",C="/assets/2025-02-10-23-05-38-BpyLDmZV.png",w="/assets/2025-02-10-23-04-43-CzNChoNE.png",j="/assets/2025-02-10-23-06-15-BwToCEsv.png",z="/assets/2025-02-11-00-22-13-D8VUALN0.png",T="/assets/2025-02-11-00-23-25-OU8D_JDd.png",O="/assets/2025-02-11-00-27-44-oowYkZ2j.png",E="/assets/2025-02-11-22-59-25-cYwTmT8G.gif",D="/assets/2025-02-11-23-09-04-BM11F3pl.png",F="/assets/2025-02-11-23-12-48-CNdoOJvh.png",B="/assets/2025-02-11-23-20-01-C9nIj6ZW.png",P="/assets/2025-02-11-23-22-51-D-6Y4SGm.png",U="/assets/2025-02-11-23-24-45-CPLfvTPR.png",V={};function I(N,a){return t(),e("div",null,a[0]||(a[0]=[s('<h1 id="ue-crowds" tabindex="-1"><a class="header-anchor" href="#ue-crowds"><span>UE Crowds</span></a></h1><p>最近在项目中做了人群相关的功能，这篇文章记录一下相关的实现。人群主要分为两类：</p><ul><li>交互：Mass System</li><li>表演：Niagara + Billboard</li></ul><p>这两个方案都会使用到VAT技术，可以看这篇文章，对VAT技术有详细的讲解。同时也制作了一个小小的示例工程：<a href="https://github.com/BanMing/CrowdsLab" target="_blank" rel="noopener noreferrer">CrowdsLab</a></p><h2 id="technical-choice" tabindex="-1"><a class="header-anchor" href="#technical-choice"><span>Technical Choice</span></a></h2><p>为什么最终选择这几个方案，这是几个方案的简单分析。最开始想直接使用Actor来实现一个人，其中只包含了一个骨骼网格组件和动画蓝图。但是发现需要对每个人都做行为树的处理，还需要编写一些额外的功能，如避让功能，LOD功能等。</p><p>后面发现UE官方示例CitySample中有人群实现的解决方案：<code>Mass System</code>。各个功都有实现，同时也做了一定一下性能上的对比：</p><figure><img src="'+o+'" alt="使用Actor实现人群，每个Actor只是简单播放行走动画，并且让Actor随机移动。" tabindex="0" loading="lazy"><figcaption>使用Actor实现人群，每个Actor只是简单播放行走动画，并且让Actor随机移动。</figcaption></figure><figure><img src="'+i+'" alt="使用Mass System，同时开启VAT的Lod规则。同时人群中的人含有避让，路径行走等功能。" tabindex="0" loading="lazy"><figcaption>使用Mass System，同时开启VAT的Lod规则。同时人群中的人含有避让，路径行走等功能。</figcaption></figure><p>这一对比就决定使用<code>Mass System</code>来做人群。</p><p>同时还有一个需求：大数量的人群，不可交互，只做表演。我们也预先设想了三个方案，同时也对三个方案做了性能测试：</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>粒子系统的帧率基本没有变化，所以最终选择用<strong>粒子系统</strong>。</p><h2 id="interactive-npcs" tabindex="-1"><a class="header-anchor" href="#interactive-npcs"><span>Interactive NPCs</span></a></h2><p>具体怎么使用 <code>Mass System</code> 这里就不做介绍，可以看这篇教程 <a href="https://dev.epicgames.com/community/learning/tutorials/JXMl/unreal-engine-your-first-60-minutes-with-mass" target="_blank" rel="noopener noreferrer">Your First 60 Minutes with Mass</a>，跟着做一遍就大概知道怎么用。做出来效果如下：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>该效果可以在示例工程：<code>/All/Game/Maps/MassSample</code>中看到。</p><p>再配合看这两篇文章<a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/overview-of-mass-gameplay-in-unreal-engine" target="_blank" rel="noopener noreferrer">MassGameplay Overview</a>，<a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/overview-of-mass-entity-in-unreal-engine" target="_blank" rel="noopener noreferrer">MassEntity Overview</a>，可以了解到这个系统的框架。它其实就是一个ECS系统。之前有写过这个系统的简单介绍。</p><p>下面主要记录一下在实现过程中遇到的问题和重点。</p><h3 id="movement-styles" tabindex="-1"><a class="header-anchor" href="#movement-styles"><span>Movement Styles</span></a></h3><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>简单描述一下这个配置的逻辑，在行人每次发起寻路请求时，会根据状态树上配置的移动方式来计算最后移动的速度，这里面有一个随机的速度配置，在<code>Desired Speeds</code>数组中随机出一个速度配置。</p><p>但是这个功能是有问题的，因为这里配置的参数是<code>FMassMovementParameters</code>，这个参数在系统初始化时，并没有成功的注册到实例化出来的<code>FMassMovementParameters</code>中。所以需要在初始化时，复制一下参数即可。重写：<code>UMassMovementTrait::BuildTemplate</code>方法即可：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token class-name">UMassNPCMovementTrait</span><span class="token double-colon punctuation">::</span><span class="token function">BuildTemplate</span><span class="token punctuation">(</span>FMassEntityTemplateBuildContext<span class="token operator">&amp;</span> BuildContext<span class="token punctuation">,</span> <span class="token keyword">const</span> UWorld<span class="token operator">&amp;</span> World<span class="token punctuation">)</span> <span class="token keyword">const</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">        FMassEntityManager<span class="token operator">&amp;</span> EntityManager <span class="token operator">=</span> UE<span class="token double-colon punctuation">::</span>Mass<span class="token double-colon punctuation">::</span><span class="token class-name">Utils</span><span class="token double-colon punctuation">::</span><span class="token function">GetEntityManagerChecked</span><span class="token punctuation">(</span>World<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        BuildContext<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">RequireFragment</span><span class="token generic class-name"><span class="token operator">&lt;</span>FAgentRadiusFragment<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        BuildContext<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">RequireFragment</span><span class="token generic class-name"><span class="token operator">&lt;</span>FTransformFragment<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        BuildContext<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddFragment</span><span class="token generic class-name"><span class="token operator">&lt;</span>FMassVelocityFragment<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        BuildContext<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">AddFragment</span><span class="token generic class-name"><span class="token operator">&lt;</span>FMassForceFragment<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> FMassMovementParameters MovementValidated <span class="token operator">=</span> Movement<span class="token punctuation">.</span><span class="token function">GetValidated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> FConstSharedStruct MovementFragment <span class="token operator">=</span> EntityManager<span class="token punctuation">.</span><span class="token function">GetOrCreateConstSharedFragment</span><span class="token punctuation">(</span>MovementValidated<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        BuildContext<span class="token punctuation">.</span><span class="token function">AddConstSharedFragment</span><span class="token punctuation">(</span>MovementFragment<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然也可以直接修改引擎中的<code>UMassMovementTrait</code>文件，我也向官方提交了PR：<a href="https://github.com/EpicGames/UnrealEngine/pull/12457" target="_blank" rel="noopener noreferrer">https://github.com/EpicGames/UnrealEngine/pull/12457</a>。</p><h3 id="npc-actor" tabindex="-1"><a class="header-anchor" href="#npc-actor"><span>NPC Actor</span></a></h3><p>在NPC的实例上需要添加转向同步特质，在上面那篇文章中没有提到：</p><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以查看示例工程：<code>/All/Game/Data/DA_MassPuppetEntityConfig。</code><br> 在<code>CitySample</code>中路人使用了<code>MetaHuman</code>并且全身是可以通过不同的部件拼接而成。通过设置领导者姿势，来播放动画。</p><p>实现过程中遇到了，在切换显示静态模型时，Actor并不会被隐藏。因为在<code>UMassRepresentationActorManagement::SetActorEnabled</code>这方法中，它只是单纯的关闭了Tick和碰撞。如果需要隐藏Actor需要重写一下该方法。</p><h3 id="instance-mesh" tabindex="-1"><a class="header-anchor" href="#instance-mesh"><span>Instance Mesh</span></a></h3><p>当NPC离主角远时，NPC会被渲染成示例网格，设置在<code>MassEntityConfigAsset-&gt;Mass Movable Visualization Trait</code>中，如下图：</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>值得注意的是：如果使用模块化角色，这里配置的mesh就需要多个静态网格。同时在导出VAT的静态模型时，需要把所有骨骼模型的骨骼统一，这样导出来的静态模型才会有相对位置。比如说：人物的衣服，身体，头和头发都需要是统一成身体的骨骼。</p></div><p>如下图：</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在CitySample中并没有动画贴图导出工具，所以我们猜测人物模块化静态模型有可能是DDC软件导出的。如果是需要在引擎中导动画贴图，那么就需要统一骨骼。</p><p>CitySample中在Mass中随机静态模型的逻辑在<code>CrowdVisualizationFragment</code>文件中，这是一个监听处理器，在添加了指定组件到实体上后，就会触发该处理器。</p><h3 id="instance-animation" tabindex="-1"><a class="header-anchor" href="#instance-animation"><span>Instance Animation</span></a></h3><p>在Mass中更新静态模型的动画信息，最终就是触发的<code>InstancedMeshComponent-&gt;BatchUpdateInstancesData</code>方法去更新实例的自定义数据，然后更新VAT相关的数据。VAT执行播放动画及播放原理可以看<a href="https://banming.github.io/GameEngine/Unreal/manual/UEVAT.html#%E6%92%AD%E6%94%BE%E5%8A%A8%E7%94%BB" target="_blank" rel="noopener noreferrer">这个</a>。</p><p>Mass中一个实体对着IMC中的一个实例，Mass中对实体的IMC进行了封装，更新动画自定义数据用：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line">FMassInstancedStaticMeshInfo<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">AddBatchedCustomData</span><span class="token generic class-name"><span class="token operator">&lt;</span>FAnimToTextureAutoPlayData<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>PlayData<span class="token punctuation">,</span> LODSignificance<span class="token punctuation">,</span> PrevLODSignificance<span class="token punctuation">,</span> NumFloatsToPad<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用一个处理器<code>UVertexAnimProcessor</code>来控制每个实体播放的动画，动画的切换可以在该处理器自定义规则进行更改，比如待机和移动动画的切换，可以使用实体的速度进行控制：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">float</span> Speed <span class="token operator">=</span> VelocityFragment<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">VertexAnimInfoFragment<span class="token punctuation">.</span>AnimationStateIndex <span class="token operator">=</span> Speed <span class="token operator">&gt;=</span> VertexAnimInfoFragment<span class="token punctuation">.</span>SpeedThreshhold <span class="token operator">?</span> VertexAnimInfoFragment<span class="token punctuation">.</span>RunAnimIndex <span class="token operator">:</span> VertexAnimInfoFragment<span class="token punctuation">.</span>IdleAnimIndex<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在示例工程中有对应的实现：<code>/All/Game/Maps/MassSample_VAT_NPC</code></p><p>值得注意的是该处理器同样可以更新Actor中的动画蓝图，使用<code>FActorFragment</code>获取即可操作。</p><h3 id="smart-object" tabindex="-1"><a class="header-anchor" href="#smart-object"><span>Smart Object</span></a></h3><p>人群中某些人可以与场景中的一些静态物体进行交互，可以使用<code>Smart Object</code>来做静态物体。</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p><code>ZoneGraph</code>和<code>SmartObject</code>的结合使用现在还有bug。在打包的版本中会crash。详细可以看这个帖子：<a href="https://udn.unrealengine.com/s/question/0D54z00008E7bo2CAB/crash-occureed-after-packaging-with-using-smartobject-and-massair" target="_blank" rel="noopener noreferrer">https://udn.unrealengine.com/s/question/0D54z00008E7bo2CAB/crash-occureed-after-packaging-with-using-smartobject-and-massair</a>。问题是在版本中路径信息没有了，猜测是在序列化时出现了丢失的问题。报错点如下：<br><img src="`+f+'" alt="" loading="lazy"><br> 解决方案<br> - 可以是在使用SmartObject的NPC上直接使用UE传统的导航模式。<br> - 使用场景Actor的方式，不用蓝图的方式使用<code>Smart Object Zone Annotations</code>组件，操作步骤如下：<br> - 添加Actor到场景中<br><img src="'+h+'" alt="" loading="lazy"><br> - 为场景中的Actor添加<code>Smart Object Zone Annotations</code>组件<img src="'+b+'" alt="" loading="lazy"><br> - 再配置<code>Smart Object Zone Annotations</code>即可。</p></div><p>使用<code>Smart Object</code>可以查看这篇文章：<a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/smart-objects-in-unreal-engine---quick-start" target="_blank" rel="noopener noreferrer">Smart Objects Quick Start</a>。</p><p>使用<code>Smart Object</code>与<code>ZoneGraph</code>结合需要配置的地方：<a href="https://dev.epicgames.com/community/learning/knowledge-base/VprR/unreal-engine-configuring-zonegraph-to-work-with-mass-smart-objects" target="_blank" rel="noopener noreferrer">Configuring ZoneGraph to Work with Mass Smart Objects</a></p><h3 id="state-tree" tabindex="-1"><a class="header-anchor" href="#state-tree"><span>State Tree</span></a></h3><p><code>Mass System</code>中每个实体的行为是由<code>State Tree</code>来控制的，这是一个轻量版的行为树。可以查看这篇文章了解如何使用：<a href="https://dev.epicgames.com/community/learning/tutorials/lwnR/unreal-engine-your-first-60-minutes-with-statetree" target="_blank" rel="noopener noreferrer">Your First 60 Minutes with StateTree</a></p><p><a href="https://dev.epicgames.com/community/learning/tutorials/mox7/unreal-engine-state-trees-and-smart-objects-data-driven-state-machine-workflows-for-open-world-ai-designs-unreal-fest-2023" target="_blank" rel="noopener noreferrer">State Trees and Smart Objects: Data-Driven State Machine Workflows for Open World AI Designs | Unreal Fest 2023</a>这个讲座讲解了如何使用<code>State Tree</code>和<code>Smart Object</code>如何交互，推荐看看。</p><p>简单讲解一下如何使用<code>Smart Object</code>:</p><h4 id="step-1-smartobjectdefinition" tabindex="-1"><a class="header-anchor" href="#step-1-smartobjectdefinition"><span>Step 1：SmartObjectDefinition</span></a></h4><p>首先创建一个<code>SmartObjectDefinition</code>：<code>SO_Definition_Cube</code></p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="step-2-smartobject-actor" tabindex="-1"><a class="header-anchor" href="#step-2-smartobject-actor"><span>Step 2：SmartObject Actor</span></a></h4><p>再创建一个Actor：<code>BP_SO_Cude</code>，并添加<code>SmartObjectComponent</code></p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>并在组件上配置如下：</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="step-3-设置-smart-object-tags" tabindex="-1"><a class="header-anchor" href="#step-3-设置-smart-object-tags"><span>Step 3: 设置 Smart Object Tags</span></a></h4><p>在 <code>Project Setting -&gt; Zone Graph -&gt; Tags</code> 设置 Smart Object 的 Tag：</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在 <code>Project Setting -&gt; Mass -&gt; Mass SmartObject</code> 设置 Smart Object 的 Tag：</p><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="step-4-zoneannotations-actor" tabindex="-1"><a class="header-anchor" href="#step-4-zoneannotations-actor"><span>Step 4：ZoneAnnotations Actor</span></a></h4><p>在创建Actor：<code>BP_ZGAnnotations</code>并添加<code>SmartObjectZoneAnnotations</code>组件</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>配置如下：</p><figure><img src="'+M+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>并把该Actor放在场景中，并把<code>Behavior Tag</code> 设为<code>SmartObject</code>:</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>设置这个Tag只能在场景中设置</p><h4 id="step-5-摆放smart-object" tabindex="-1"><a class="header-anchor" href="#step-5-摆放smart-object"><span>Step 5： 摆放Smart Object</span></a></h4><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="step-6-smartobjectpersistentcollection" tabindex="-1"><a class="header-anchor" href="#step-6-smartobjectpersistentcollection"><span>Step 6: SmartObjectPersistentCollection</span></a></h4><p>场景中添加<code>SmartObjectPersistentCollection</code>，并重新构建集合，点击如下按钮：</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>见到如下试图表示构建成功</p><figure><img src="'+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="step-7-调整状态树" tabindex="-1"><a class="header-anchor" href="#step-7-调整状态树"><span>Step 7： 调整状态树</span></a></h4><p>在AI走到Smart Object进行特殊行为时，这里使用的是让AI看向Smart Object来表现。</p><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在<code>Smart Objects</code>节点出需要设置一下进入条件：</p><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最终效果如下：</p><figure><img src="'+O+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Mass System显示调试信息按单引号那个键，也就是回车键左边那个键。</p></div><h2 id="large-crowds" tabindex="-1"><a class="header-anchor" href="#large-crowds"><span>Large Crowds</span></a></h2><p>这个功能是参考一下两个教程：</p><ul><li><a href="https://www.youtube.com/watch?v=CqXKSyAPWZY" target="_blank" rel="noopener noreferrer">Simulating Large Crowds In Niagara | Unreal Engine</a></li><li><a href="https://www.youtube.com/watch?v=NilyMiB1fos" target="_blank" rel="noopener noreferrer">Unreal Engine 5 Swarm of Rats with Niagara</a></li></ul><p>这是是在示例工程中有实现的效果：<br><img src="'+E+'" alt="" loading="lazy"></p><p>粒子发射器设置：</p><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里记录一下一些特殊的处理</p><h3 id="random-animation" tabindex="-1"><a class="header-anchor" href="#random-animation"><span>Random Animation</span></a></h3><p>因为是使用VAT播放的动画，所以我们只需要修改VAT材质动态参数即可：</p><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里我们使用<code>AutoPlay</code>的方式播放动画。</p><p>首先需要把材质中的静态变量<code>UseDynamicParameters</code>设置为真，这里并没有手动去修改材质实例中的数值，因为材质实例是有顶点动画工具自动设置的，同时该材质实例可能会在其他地方也在使用。</p><p>在发射器中的<code>Mesh Render-&gt;Bindings-&gt;Material Parameters-&gt;Static Bool Parameters</code>绑定<code>UseDynamicParameters</code>：</p><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同在在粒子系统中需要设置一个静态布尔值，在粒子初始化时设置该布尔值即可。</p><p>然后在<code>Particle Spawn</code>中添加<code>Dynamic Material Parameters</code>，设置如下：</p><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里的<code>StartFrame</code>和<code>EndFrame</code>可以中对应的<code>AnimToTextureDataAssets</code>中读取到：</p><figure><img src="'+U+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ul><li><a href="https://dev.epicgames.com/community/learning/tutorials/JXMl/unreal-engine-your-first-60-minutes-with-mass" target="_blank" rel="noopener noreferrer">https://dev.epicgames.com/community/learning/tutorials/JXMl/unreal-engine-your-first-60-minutes-with-mass</a></li><li><a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/overview-of-mass-gameplay-in-unreal-engine" target="_blank" rel="noopener noreferrer">https://dev.epicgames.com/documentation/zh-cn/unreal-engine/overview-of-mass-gameplay-in-unreal-engine</a></li><li><a href="https://dev.epicgames.com/community/learning/tutorials/qz6r/unreal-engine-zonegraph-quick-start-guide" target="_blank" rel="noopener noreferrer">https://dev.epicgames.com/community/learning/tutorials/qz6r/unreal-engine-zonegraph-quick-start-guide</a></li><li><a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/working-with-modular-characters-in-unreal-engine" target="_blank" rel="noopener noreferrer">https://dev.epicgames.com/documentation/zh-cn/unreal-engine/working-with-modular-characters-in-unreal-engine</a></li><li><a href="https://vrealmatic.com/unreal-engine/mass" target="_blank" rel="noopener noreferrer">https://vrealmatic.com/unreal-engine/mass</a></li><li><a href="https://github.com/jcoder58/UE5MassResources?tab=readme-ov-file" target="_blank" rel="noopener noreferrer">https://github.com/jcoder58/UE5MassResources?tab=readme-ov-file</a></li><li><a href="https://youtu.be/CqXKSyAPWZY" target="_blank" rel="noopener noreferrer">https://youtu.be/CqXKSyAPWZY</a></li></ul>',114)]))}const R=n(V,[["render",I],["__file","UECrowds.html.vue"]]),Z=JSON.parse('{"path":"/GameEngine/Unreal/manual/UECrowds.html","title":"UE Crowds","lang":"en-US","frontmatter":{"date":"2024-11-04T18:03:06.000Z","tag":["Unreal Engine","Animation"]},"git":{"createdTime":1739204903000,"updatedTime":1750490708000,"contributors":[{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":4,"url":"https://github.com/BanMing"}]},"readingTime":{"minutes":8.58,"words":2574},"filePathRelative":"GameEngine/Unreal/manual/UECrowds.md","localizedDate":"November 4, 2024","excerpt":"\\n<p>最近在项目中做了人群相关的功能，这篇文章记录一下相关的实现。人群主要分为两类：</p>\\n<ul>\\n<li>交互：Mass System</li>\\n<li>表演：Niagara + Billboard</li>\\n</ul>\\n<p>这两个方案都会使用到VAT技术，可以看这篇文章，对VAT技术有详细的讲解。同时也制作了一个小小的示例工程：<a href=\\"https://github.com/BanMing/CrowdsLab\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">CrowdsLab</a></p>\\n<h2>Technical Choice</h2>"}');export{R as comp,Z as data};
