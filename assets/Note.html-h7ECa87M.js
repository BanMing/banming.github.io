import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-CHmvA_IE.js";const e="/assets/2024-04-28-21-53-46-CFEc88Yy.png",o="/assets/2024-04-28-21-54-47-CHBLwon8.png",p="/assets/2024-05-16-00-20-25-CjHLtxdd.png",c={},i=t(`<h1 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>Note</span></a></h1><hr><p>如果在build时出现<code>cannot open file ... dll</code> 需要把引擎的文件夹的<code>read only</code>去掉</p><hr><p>Hitting D8049 errors when building editor https://forums.unrealengine.com/t/hitting-d8049-errors-when-building-editor-from-ue4-sln/449409/4</p><hr><p>关于UCLASS和UPROPERTY中的设置可以在<code>UnrealEngine\\Engine\\Source\\Runtime\\CoreUObject\\Public\\UObject\\ObjectMacros.h</code>文件中查看。或者直接引用<code>#include &quot;UObject/ObjectMacros.h&quot;</code>，直接使用<code>UC::</code>或者<code>UP::</code>会有提示。</p><hr><p>在使用Lambda表达式时，如果会使用到类中的内容时，需要把对象传入，例子：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>	<span class="token generic-function"><span class="token function">Cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>UAuraAbilitySystemComponent<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>AbilitySystemComponent<span class="token punctuation">)</span>
		<span class="token operator">-&gt;</span>EffectAssetTags<span class="token punctuation">.</span><span class="token function">AddLambda</span><span class="token punctuation">(</span>
			<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> FGameplayTagContainer<span class="token operator">&amp;</span> AssetTags<span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FGameplayTag Tag <span class="token operator">:</span> AssetTags<span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
					<span class="token keyword">const</span> FString Msg <span class="token operator">=</span> <span class="token class-name">FString</span><span class="token double-colon punctuation">::</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;GE Tag %s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>Tag<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					GEngine<span class="token operator">-&gt;</span><span class="token function">AddOnScreenDebugMessage</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> FColor<span class="token double-colon punctuation">::</span>Blue<span class="token punctuation">,</span> Msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token generic-function"><span class="token function">GetDataTableRowByTag</span><span class="token generic class-name"><span class="token operator">&lt;</span>FUIWidgetRow<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>MessageWidgetDataTable<span class="token punctuation">,</span> Tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>在一个类中声明<code>Actor</code>，一定要声明为指针。因为<code>Actor</code>的构造一定要使用<code>NewObject</code>。这个类在构造时，也会构造去这个<code>Actor</code>变量，这里会出现断言。</p><hr><p>函数中传入结构体引用时，如下所示：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">SetIsBlockedHit</span><span class="token punctuation">(</span> FGameplayEffectContextHandle<span class="token operator">&amp;</span> EffectContextHandle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bIsBlockedHit<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在蓝图中调用，该引用会在输出节点，如下图：</p><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果想实现以下效果：</p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要在引用前加入<code>UPARAM(ref)</code>，函数改为如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">SetIsBlockedHit</span><span class="token punctuation">(</span><span class="token function">UPARAM</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> FGameplayEffectContextHandle<span class="token operator">&amp;</span> EffectContextHandle<span class="token punctuation">,</span> <span class="token keyword">bool</span> bIsBlockedHit<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>这段代码，为什么要从数组中取出来的数值，存成本地变量？</p><figure><img src="`+p+`" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>因为这里随机数是使用<code>BlueprintPure</code>，他会在每一次取值时候，都被调用一次，也就是重新随机一次。所以在最右边的红色框中，又取了一次值，所以这里会产生两次随机。</p><hr><p>设置自定义<code>Tick</code>方法，使用<code>FTickFunction</code>，并可以设置<code>bRunOnAnyThread </code>让其运行在其他线程。注册该方方法类似：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">UActorComponent</span><span class="token double-colon punctuation">::</span><span class="token function">SetupActorComponentTickFunction</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">FTickFunction</span><span class="token operator">*</span> TickFunction<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>TickFunction<span class="token operator">-&gt;</span>bCanEverTick <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IsTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		AActor<span class="token operator">*</span> MyOwner <span class="token operator">=</span> <span class="token function">GetOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>MyOwner <span class="token operator">||</span> <span class="token operator">!</span>MyOwner<span class="token operator">-&gt;</span><span class="token function">IsTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			ULevel<span class="token operator">*</span> ComponentLevel <span class="token operator">=</span> <span class="token punctuation">(</span>MyOwner <span class="token operator">?</span> MyOwner<span class="token operator">-&gt;</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ToRawPtr</span><span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>PersistentLevel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			TickFunction<span class="token operator">-&gt;</span><span class="token function">SetTickFunctionEnable</span><span class="token punctuation">(</span>TickFunction<span class="token operator">-&gt;</span>bStartWithTickEnabled <span class="token operator">||</span> TickFunction<span class="token operator">-&gt;</span><span class="token function">IsTickFunctionEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			TickFunction<span class="token operator">-&gt;</span><span class="token function">RegisterTickFunction</span><span class="token punctuation">(</span>ComponentLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>有时直接复制一个蓝图类会出现不可控的一些问题，所以建议如果需要复制一个蓝图可以直接创建这个蓝图的子类。</p><p>https://www.bilibili.com/video/BV1RV4y1t77u/?spm_id_from=pageDriver&amp;vd_source=631c1232c45e3ad448a6cc1d8713c7c2</p><hr><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>FRotator Rotation <span class="token operator">=</span> <span class="token punctuation">(</span>ActorA<span class="token operator">-&gt;</span><span class="token function">GetActorLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> ActorB<span class="token operator">-&gt;</span><span class="token function">GetActorLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Rotation<span class="token punctuation">.</span>Pitch <span class="token operator">=</span> <span class="token number">45.f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> FVector ToTarget <span class="token operator">=</span> Rotation<span class="token punctuation">.</span><span class="token function">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码的意义是，从<code>B</code>到<code>A</code>的向量在Pitch方向旋转45度得到<code>ToTarget</code>方向向量，且该值是进行了标准化操作。这个也太方便了吧。</p><p>这里<code>Rotation</code>方法其实就是<code>ToOrientationRotator</code>。</p><hr><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>FVector Direction <span class="token operator">=</span> ActorA<span class="token operator">-&gt;</span><span class="token function">GetActorRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
FVector ForwardVector <span class="token operator">=</span> <span class="token function">GetActorForwardVector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的<code>Direction</code>与<code>ForwardVector</code>这两个值是相同的。</p>`,38),l=[i];function u(r,d){return s(),a("div",null,l)}const g=n(c,[["render",u],["__file","Note.html.vue"]]),v=JSON.parse('{"path":"/GameEngine/Unreal/manual/Note.html","title":"Note","lang":"en-US","frontmatter":{"date":"2022-02-22T20:48:20.000Z","tag":["Unreal Engine"]},"headers":[],"git":{"createdTime":1645534100000,"updatedTime":1720623690000,"contributors":[{"name":"BanMing","email":"ban-ming@foxmail.com","commits":9},{"name":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":4}]},"readingTime":{"minutes":2.09,"words":626},"filePathRelative":"GameEngine/Unreal/manual/Note.md","localizedDate":"February 22, 2022","excerpt":"\\n<hr>\\n<p>如果在build时出现<code>cannot open file ... dll</code> 需要把引擎的文件夹的<code>read only</code>去掉</p>\\n<hr>\\n<p>Hitting D8049 errors when building editor\\nhttps://forums.unrealengine.com/t/hitting-d8049-errors-when-building-editor-from-ue4-sln/449409/4</p>\\n<hr>\\n<p>关于UCLASS和UPROPERTY中的设置可以在<code>UnrealEngine\\\\Engine\\\\Source\\\\Runtime\\\\CoreUObject\\\\Public\\\\UObject\\\\ObjectMacros.h</code>文件中查看。或者直接引用<code>#include \\"UObject/ObjectMacros.h\\"</code>，直接使用<code>UC::</code>或者<code>UP::</code>会有提示。</p>"}');export{g as comp,v as data};
