import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as n,f as i,o as a}from"./app-C2rZTwed.js";const t={};function o(l,e){return a(),n("div",null,e[0]||(e[0]=[i('<h1 id="uniform-render-flow" tabindex="-1"><a class="header-anchor" href="#uniform-render-flow"><span>Uniform Render Flow</span></a></h1><h2 id="bgfx-setuniform" tabindex="-1"><a class="header-anchor" href="#bgfx-setuniform"><span>bgfx::setUniform</span></a></h2><ul><li>Params:(UniformHandle _handle, const void* _value, uint16_t _num = 1)</li></ul><h2 id="encoder-setuniform" tabindex="-1"><a class="header-anchor" href="#encoder-setuniform"><span>Encoder::setUniform</span></a></h2><ul><li>Params:(UniformHandle _handle, const void* _value, uint16_t _num = 1)</li></ul><h2 id="encoderimpl-setuniform" tabindex="-1"><a class="header-anchor" href="#encoderimpl-setuniform"><span>EncoderImpl::setUniform</span></a></h2><ul><li>Write value to UniformBuffer</li><li>Params:(UniformType::Enum _type, UniformHandle _handle, const void* _value, uint16_t _num)</li><li>File: bgfx_p.h</li></ul><h2 id="encoderimpl-submit" tabindex="-1"><a class="header-anchor" href="#encoderimpl-submit"><span>EncoderImpl::submit</span></a></h2><ul><li>Set RenderDraw uniformIDx, uniformBegain, UniformEnd</li><li>Params: (ViewId _id, ProgramHandle _program, OcclusionQueryHandle _occlusionQuery, uint32_t _depth, uint8_t _flags);</li><li>File: bgfx.cpp</li></ul><h2 id="renderercontext-submit" tabindex="-1"><a class="header-anchor" href="#renderercontext-submit"><span>RendererContext::submit</span></a></h2><ul><li>Params: (Frame* _render, ClearQuad&amp; /<em>_clearQuad</em>/, TextVideoMemBlitter&amp; _textVideoMemBlitter)</li><li>File: Platform Renderer(renderer_d3d12.cpp)</li></ul><h2 id="bgfx-rendererupdateuniforms" tabindex="-1"><a class="header-anchor" href="#bgfx-rendererupdateuniforms"><span>bgfx::rendererUpdateUniforms</span></a></h2><ul><li>Copy/Move uniform buffer to renderer native uniform buffer</li><li>Params: (RendererContextI* _renderCtx, UniformBuffer* _uniformBuffer, uint32_t _begin, uint32_t _end)</li><li>File: bgfx.cpp</li></ul><h2 id="renderercontext-updateuniform" tabindex="-1"><a class="header-anchor" href="#renderercontext-updateuniform"><span>RendererContext::updateUniform</span></a></h2><ul><li>Cache uniform buffer in local <code>m_uniforms</code>. Make up constant buffer.</li><li>Params: (uint16_t _loc, const void* _data, uint32_t _size)</li><li>File: Platform Renderer(renderer_d3d12.cpp)</li></ul><h2 id="renderercontext-commit" tabindex="-1"><a class="header-anchor" href="#renderercontext-commit"><span>RendererContext::commit</span></a></h2><ul><li>Set <code>m_uniforms</code> data to <code>m_fsCcratch</code>/<code>m_vsScratch</code> array by uniform type</li><li>File: Platform Renderer(renderer_d3d12.cpp)</li></ul><h2 id="renderercontext-commit-1" tabindex="-1"><a class="header-anchor" href="#renderercontext-commit-1"><span>RendererContext::commit</span></a></h2><ul><li>Write <code>m_vsScratch</code>/<code>m_fsScratch</code> to m_scratchBUffer</li><li>File: Platform Renderer(renderer_d3d12.cpp)</li></ul>',19)]))}const u=r(t,[["render",o],["__file","uniform_render_flow.html.vue"]]),c=JSON.parse('{"path":"/Graphic/bgfx/uniform_render_flow.html","title":"Uniform Render Flow","lang":"en-US","frontmatter":{"date":"2023-11-03T14:31:30.000Z","tag":["Graphic"]},"git":{"createdTime":1698993090000,"updatedTime":1707214279000,"contributors":[{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":3,"url":"https://github.com/BanMing"},{"name":"wupeng","username":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":2,"url":"https://github.com/wupeng"}]},"readingTime":{"minutes":0.54,"words":163},"filePathRelative":"Graphic/bgfx/uniform_render_flow.md","localizedDate":"November 3, 2023","excerpt":"\\n<h2>bgfx::setUniform</h2>\\n<ul>\\n<li>Params:(UniformHandle _handle, const void* _value, uint16_t _num = 1)</li>\\n</ul>\\n<h2>Encoder::setUniform</h2>\\n<ul>\\n<li>Params:(UniformHandle _handle, const void* _value, uint16_t _num = 1)</li>\\n</ul>\\n<h2>EncoderImpl::setUniform</h2>\\n<ul>\\n<li>Write value to UniformBuffer</li>\\n<li>Params:(UniformType::Enum _type, UniformHandle _handle, const void* _value, uint16_t _num)</li>\\n<li>File: bgfx_p.h</li>\\n</ul>"}');export{u as comp,c as data};
