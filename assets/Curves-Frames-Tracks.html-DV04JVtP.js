import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as t,o as i}from"./app-C7htUUIB.js";const s="/assets/36698085_81-VmbXd4Ac.jpg",r="/assets/36698085_82-DE0d8QYv.jpg",c="/assets/36698085_83-cWvd_U47.jpg",o="/assets/36698085_84-uhEVyw2C.jpg",l="/assets/36698085_86-CLsfQ_iL.jpg",d="/assets/36698085_87-CygSKY2r.jpg",m="/assets/36698085_88-dbL9eYlP.jpg",p="/assets/36698085_89-DgRH-TcQ.jpg",u={};function h(b,e){return i(),n("div",null,e[0]||(e[0]=[t('<h1 id="curves-frames-tracks" tabindex="-1"><a class="header-anchor" href="#curves-frames-tracks"><span>Curves Frames Tracks</span></a></h1><h2 id="understand-cubic-bezier-splines-and-how-to-evaluate-them" tabindex="-1"><a class="header-anchor" href="#understand-cubic-bezier-splines-and-how-to-evaluate-them"><span>Understand cubic Bézier splines and how to evaluate them</span></a></h2><p>贝塞尔曲线就是有两个点且这个两个点分别有一个控制器，在这两个点之间生成的插值曲线。 <img src="'+s+'" alt="" loading="lazy"></p><p>生成这个曲线的方式就是不断的做插值。我们先把这四个点连接起来，然后对每个线段求插值得到新的三个点。 <img src="'+r+'" alt="" loading="lazy"></p><p>然后把新的三个点连接起来，再对新的线段做插值得到新的两个点</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后把新的两个点连接起来，求新的线段的插值。</p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后得到的点就是在贝塞尔曲线上。我们把[0,1]之间都求到最后一个点的插值，就会描绘出现贝塞尔曲线。</p><p>在实现上我们可以把三次插值计算公式合并起来，再合并同类项得到：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">P1((1-t)^3) +C1(3(1-t)2t) +C2(3(1-t)t^2) +P2(t^3)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="understand-cubic-hermite-splines-and-how-to-evaluate-them" tabindex="-1"><a class="header-anchor" href="#understand-cubic-hermite-splines-and-how-to-evaluate-them"><span>Understand cubic Hermite splines and how to evaluate them</span></a></h2><p>Hermite曲线跟贝塞尔曲线相似且不一样，它有两个点和两个斜率构成。斜率也被称为切线。Hermite的例子： <img src="`+l+'" alt="" loading="lazy"></p><p>https://en.wikipedia.org/wiki/Cubic_Hermite_spline</p><h2 id="understand-common-interpolation-methods" tabindex="-1"><a class="header-anchor" href="#understand-common-interpolation-methods"><span>Understand common interpolation methods</span></a></h2><ul><li>constant curve：保持一个值直到下一个关键帧。 <img src="'+d+'" alt="" loading="lazy"></li><li>linear curve：就是两个关键帧连线 <img src="'+m+'" alt="" loading="lazy"></li><li>cubic curve：用点和切线来定义的 <img src="'+p+'" alt="" loading="lazy"></li></ul><h2 id="be-able-to-create-cubic-linear-and-constant-keyframes" tabindex="-1"><a class="header-anchor" href="#be-able-to-create-cubic-linear-and-constant-keyframes"><span>Be able to create cubic, linear, and constant keyframes</span></a></h2><h2 id="understand-how-keyframes-make-up-a-cubic-linear-or-constant-track" tabindex="-1"><a class="header-anchor" href="#understand-how-keyframes-make-up-a-cubic-linear-or-constant-track"><span>Understand how keyframes make up a cubic, linear, or constant track</span></a></h2><p>关键帧就是时间和值的结合。Track是一系列的Frames组成</p><h2 id="be-able-to-evaluate-cubic-linear-and-constant-tracks" tabindex="-1"><a class="header-anchor" href="#be-able-to-evaluate-cubic-linear-and-constant-tracks"><span>Be able to evaluate cubic, linear, and constant tracks</span></a></h2><h2 id="be-able-to-combine-three-independent-tracks-into-one-transform-track" tabindex="-1"><a class="header-anchor" href="#be-able-to-combine-three-independent-tracks-into-one-transform-track"><span>Be able to combine three independent tracks into one transform track</span></a></h2>',21)]))}const f=a(u,[["render",h],["__file","Curves-Frames-Tracks.html.vue"]]),v=JSON.parse('{"path":"/Animation/gameOpenGL/Curves-Frames-Tracks.html","title":"Curves Frames Tracks","lang":"en-US","frontmatter":{"date":"2022-03-24T00:43:36.000Z","tag":["Animation"],"order":7},"headers":[{"level":2,"title":"Understand cubic Bézier splines and how to evaluate them","slug":"understand-cubic-bezier-splines-and-how-to-evaluate-them","link":"#understand-cubic-bezier-splines-and-how-to-evaluate-them","children":[]},{"level":2,"title":"Understand cubic Hermite splines and how to evaluate them","slug":"understand-cubic-hermite-splines-and-how-to-evaluate-them","link":"#understand-cubic-hermite-splines-and-how-to-evaluate-them","children":[]},{"level":2,"title":"Understand common interpolation methods","slug":"understand-common-interpolation-methods","link":"#understand-common-interpolation-methods","children":[]},{"level":2,"title":"Be able to create cubic, linear, and constant keyframes","slug":"be-able-to-create-cubic-linear-and-constant-keyframes","link":"#be-able-to-create-cubic-linear-and-constant-keyframes","children":[]},{"level":2,"title":"Understand how keyframes make up a cubic, linear, or constant track","slug":"understand-how-keyframes-make-up-a-cubic-linear-or-constant-track","link":"#understand-how-keyframes-make-up-a-cubic-linear-or-constant-track","children":[]},{"level":2,"title":"Be able to evaluate cubic, linear, and constant tracks","slug":"be-able-to-evaluate-cubic-linear-and-constant-tracks","link":"#be-able-to-evaluate-cubic-linear-and-constant-tracks","children":[]},{"level":2,"title":"Be able to combine three independent tracks into one transform track","slug":"be-able-to-combine-three-independent-tracks-into-one-transform-track","link":"#be-able-to-combine-three-independent-tracks-into-one-transform-track","children":[]}],"git":{"createdTime":1648053816000,"updatedTime":1707215246000,"contributors":[{"name":"BanMing","email":"ban-ming@foxmail.com","commits":3},{"name":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":3}]},"readingTime":{"minutes":1.41,"words":423},"filePathRelative":"Animation/gameOpenGL/Curves-Frames-Tracks.md","localizedDate":"March 24, 2022","excerpt":"\\n<h2>Understand cubic Bézier splines and how to evaluate them</h2>\\n<p>贝塞尔曲线就是有两个点且这个两个点分别有一个控制器，在这两个点之间生成的插值曲线。\\n</p>\\n<p>生成这个曲线的方式就是不断的做插值。我们先把这四个点连接起来，然后对每个线段求插值得到新的三个点。\\n</p>\\n<p>然后把新的三个点连接起来，再对新的线段做插值得到新的两个点</p>\\n<figure><figcaption></figcaption></figure>\\n<p>最后把新的两个点连接起来，求新的线段的插值。</p>\\n<figure><figcaption></figcaption></figure>"}');export{f as comp,v as data};
