import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,b as n}from"./app-O2DLmw0u.js";const r="/assets/36698085_81-FZm13eAH.jpg",i="/assets/36698085_82-xNHfEGL9.jpg",s="/assets/36698085_83-HFr3f1OO.jpg",c="/assets/36698085_84-LoRFcsNg.jpg",o="/assets/36698085_86-i7H0P4ix.jpg",d="/assets/36698085_87-soEimNq-.jpg",l="/assets/36698085_88-HWy_XmJT.jpg",h="/assets/36698085_89-4ER_k3EG.jpg",m={},u=n('<h1 id="curves-frames-tracks" tabindex="-1"><a class="header-anchor" href="#curves-frames-tracks" aria-hidden="true">#</a> Curves Frames Tracks</h1><h2 id="understand-cubic-bezier-splines-and-how-to-evaluate-them" tabindex="-1"><a class="header-anchor" href="#understand-cubic-bezier-splines-and-how-to-evaluate-them" aria-hidden="true">#</a> Understand cubic Bézier splines and how to evaluate them</h2><p>贝塞尔曲线就是有两个点且这个两个点分别有一个控制器，在这两个点之间生成的插值曲线。 <img src="'+r+'" alt="" loading="lazy"></p><p>生成这个曲线的方式就是不断的做插值。我们先把这四个点连接起来，然后对每个线段求插值得到新的三个点。 <img src="'+i+'" alt="" loading="lazy"></p><p>然后把新的三个点连接起来，再对新的线段做插值得到新的两个点</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后把新的两个点连接起来，求新的线段的插值。</p><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后得到的点就是在贝塞尔曲线上。我们把[0,1]之间都求到最后一个点的插值，就会描绘出现贝塞尔曲线。</p><p>在实现上我们可以把三次插值计算公式合并起来，再合并同类项得到：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>P1((1-t)^3) +C1(3(1-t)2t) +C2(3(1-t)t^2) +P2(t^3)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="understand-cubic-hermite-splines-and-how-to-evaluate-them" tabindex="-1"><a class="header-anchor" href="#understand-cubic-hermite-splines-and-how-to-evaluate-them" aria-hidden="true">#</a> Understand cubic Hermite splines and how to evaluate them</h2><p>Hermite曲线跟贝塞尔曲线相似且不一样，它有两个点和两个斜率构成。斜率也被称为切线。Hermite的例子： <img src="`+o+'" alt="" loading="lazy"></p><p>https://en.wikipedia.org/wiki/Cubic_Hermite_spline</p><h2 id="understand-common-interpolation-methods" tabindex="-1"><a class="header-anchor" href="#understand-common-interpolation-methods" aria-hidden="true">#</a> Understand common interpolation methods</h2><ul><li>constant curve：保持一个值直到下一个关键帧。 <img src="'+d+'" alt="" loading="lazy"></li><li>linear curve：就是两个关键帧连线 <img src="'+l+'" alt="" loading="lazy"></li><li>cubic curve：用点和切线来定义的 <img src="'+h+'" alt="" loading="lazy"></li></ul><h2 id="be-able-to-create-cubic-linear-and-constant-keyframes" tabindex="-1"><a class="header-anchor" href="#be-able-to-create-cubic-linear-and-constant-keyframes" aria-hidden="true">#</a> Be able to create cubic, linear, and constant keyframes</h2><h2 id="understand-how-keyframes-make-up-a-cubic-linear-or-constant-track" tabindex="-1"><a class="header-anchor" href="#understand-how-keyframes-make-up-a-cubic-linear-or-constant-track" aria-hidden="true">#</a> Understand how keyframes make up a cubic, linear, or constant track</h2><p>关键帧就是时间和值的结合。Track是一系列的Frames组成</p><h2 id="be-able-to-evaluate-cubic-linear-and-constant-tracks" tabindex="-1"><a class="header-anchor" href="#be-able-to-evaluate-cubic-linear-and-constant-tracks" aria-hidden="true">#</a> Be able to evaluate cubic, linear, and constant tracks</h2><h2 id="be-able-to-combine-three-independent-tracks-into-one-transform-track" tabindex="-1"><a class="header-anchor" href="#be-able-to-combine-three-independent-tracks-into-one-transform-track" aria-hidden="true">#</a> Be able to combine three independent tracks into one transform track</h2>',21),p=[u];function b(_,g){return a(),t("div",null,p)}const v=e(m,[["render",b],["__file","Curves-Frames-Tracks.html.vue"]]);export{v as default};
