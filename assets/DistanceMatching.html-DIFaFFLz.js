import{_ as a}from"./2025-02-04-14-33-07-BRxZbThx.js";import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as t,o as i}from"./app-4S62aGhV.js";const o={};function c(p,n){return i(),s("div",null,n[0]||(n[0]=[t('<h1 id="distance-matching" tabindex="-1"><a class="header-anchor" href="#distance-matching"><span>Distance Matching</span></a></h1><figure><img src="'+a+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过角色与目标点的距离和动画根节点移动的距离进行匹配，可以使角色脚步准确落到目标点上，已解决滑步的问题。这个技术一般应用在角色的起步、停步、急停、下落反馈中。</p><p>具体的使用可以查看:</p><ul><li><a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/distance-matching-in-unreal-engine" target="_blank" rel="noopener noreferrer">官方文档</a></li><li><a href="https://banming.github.io/GameEngine/Unreal/animation/LyraALS.html#stop-location" target="_blank" rel="noopener noreferrer">Lyra ALS</a></li></ul><p>这个功能在<code>Animation Locomotion Library</code>插件中，插件中主要代码文件只有三个：</p><ul><li>AnimCharacterMovementLibrary：预测角色移动库</li><li>AnimDistanceMatchingLibrary：距离匹配库</li><li>DistanceCurveModifier：生成距离曲线变形器</li></ul><p>下面简单讲解一下其中的主要函数的逻辑</p><h2 id="animcharactermovementlibrary" tabindex="-1"><a class="header-anchor" href="#animcharactermovementlibrary"><span>AnimCharacterMovementLibrary</span></a></h2><h3 id="predictgroundmovementstoplocation" tabindex="-1"><a class="header-anchor" href="#predictgroundmovementstoplocation"><span>PredictGroundMovementStopLocation</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">static</span> FVector <span class="token function">PredictGroundMovementStopLocation</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVector<span class="token operator">&amp;</span> Velocity<span class="token punctuation">,</span></span>
<span class="line">	<span class="token keyword">bool</span> bUseSeparateBrakingFriction<span class="token punctuation">,</span> <span class="token keyword">float</span> BrakingFriction<span class="token punctuation">,</span> <span class="token keyword">float</span> GroundFriction<span class="token punctuation">,</span> <span class="token keyword">float</span> BrakingFrictionFactor<span class="token punctuation">,</span> <span class="token keyword">float</span> BrakingDecelerationWalking<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>函数用于预测一个物体在地面运动时的停止位置，基于其当前速度、摩擦力、减速等参数，参数都可以在<code>UCharacterMovementComponent</code>中找到。以下是公式的推导和解释：</p><p>$$ \\text{停止位置} = \\text{初始位置} + \\text{初始速度} \\times \\text{时间} + \\frac{1}{2} \\times \\text{加速度} \\times \\text{时间}^2 $$</p><p>在代码中，初始位置被忽略（假设为 <code>FVector::ZeroVector</code>），因此公式简化为：</p><p>$$ \\text{PredictedStopLocation} = \\text{Velocity2D} \\times \\text{TimeToStop} + \\frac{1}{2} \\times \\text{Acceleration} \\times \\text{TimeToStop}^2 $$</p><p>其中：</p><ul><li><strong>Velocity2D</strong> 是物体在水平面（XY平面）上的速度。</li><li><strong>TimeToStop</strong> 是物体停止所需的时间。</li><li><strong>Acceleration</strong> 是物体的减速度（负加速度）。</li></ul><hr><h4 id="计算物体在水平面-xy平面-上的速度-velocity2d" tabindex="-1"><a class="header-anchor" href="#计算物体在水平面-xy平面-上的速度-velocity2d"><span><strong>计算物体在水平面（XY平面）上的速度（Velocity2D）</strong></span></a></h4><ul><li>Velocity2D = Velocity * FVector(1.f, 1.f, 0.f)</li><li>Speed2D = Speed2D.Size()</li></ul><hr><h4 id="计算停止时间-timetostop" tabindex="-1"><a class="header-anchor" href="#计算停止时间-timetostop"><span><strong>计算停止时间（TimeToStop）</strong></span></a></h4><p>停止时间由当前速度和减速度决定：</p><p>$$ \\text{TimeToStop} = \\frac{\\text{Speed2D}}{\\text{Divisor}} $$</p><p>其中：</p><ul><li><strong>Speed2D</strong> 是物体在水平面上的速度大小。</li><li><strong>Divisor</strong> 是摩擦力和减速的综合效果：</li></ul><p>$$ \\text{Divisor} = \\text{ActualBrakingFriction} \\times \\text{Speed2D} + \\text{BrakingDeceleration} $$</p><ul><li><strong>ActualBrakingFriction</strong> 是实际摩擦力，由 <code>BrakingFriction</code> 或 <code>GroundFriction</code> 决定，并乘以 <code>BrakingFrictionFactor</code>。</li><li><strong>BrakingDeceleration</strong> 是额外的减速度（<code>BrakingDecelerationWalking</code>）。</li></ul><hr><h4 id="计算物体的减速度-acceleration" tabindex="-1"><a class="header-anchor" href="#计算物体的减速度-acceleration"><span><strong>计算物体的减速度（Acceleration）</strong></span></a></h4><h2 id="由摩擦力和额外减速度组成-text-acceleration-text-actualbrakingfriction-text-velocity2d-text-brakingdeceleration-text-velocitydir2d" tabindex="-1"><a class="header-anchor" href="#由摩擦力和额外减速度组成-text-acceleration-text-actualbrakingfriction-text-velocity2d-text-brakingdeceleration-text-velocitydir2d"><span>由摩擦力和额外减速度组成: $$ \\text{Acceleration} = (-\\text{ActualBrakingFriction}) * \\text{Velocity2D} - \\text{BrakingDeceleration} * \\text{VelocityDir2D} $$</span></a></h2><p>最终公式可以总结为：</p><p>$$ \\text{PredictedStopLocation} = \\text{Velocity2D} \\times \\frac{\\text{Speed2D}}{\\text{ActualBrakingFriction} \\times \\text{Speed2D} + \\text{BrakingDeceleration}} + \\frac{1}{2} \\times \\left( -\\text{ActualBrakingFriction} \\times \\text{Velocity2D} - \\text{BrakingDeceleration} \\times \\text{VelocityDir2D} \\right) \\times \\left( \\frac{\\text{Speed2D}}{\\text{ActualBrakingFriction} \\times \\text{Speed2D} + \\text{BrakingDeceleration}} \\right)^2 $$</p><hr><h3 id="predictgroundmovementpivotlocation" tabindex="-1"><a class="header-anchor" href="#predictgroundmovementpivotlocation"><span>PredictGroundMovementPivotLocation</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">static</span> FVector <span class="token function">PredictGroundMovementPivotLocation</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVector<span class="token operator">&amp;</span> Acceleration<span class="token punctuation">,</span> <span class="token keyword">const</span> FVector<span class="token operator">&amp;</span> Velocity<span class="token punctuation">,</span> <span class="token keyword">float</span> GroundFriction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过加速度方向预测角色急停改变的方向，首先计算速度在加速度上的分量（也就是点乘），如果小于零，说明速度和加速度反方向那就需要急停。计算公式同样也是物理中的匀加速运动公式：</p><p>$$ \\text{停止位置} = \\text{初始位置} + \\text{初始速度} \\times \\text{时间} + \\frac{1}{2} \\times \\text{加速度} \\times \\text{时间}^2 $$</p><p>在代码中，初始位置被忽略（假设为 <code>FVector::ZeroVector</code>），因此公式简化为：</p><p>$$ \\text{PredictedPivotLocation} = \\text{Velocity} \\times \\text{TimeToDirectionChange} + \\frac{1}{2} \\times \\text{AccelerationForce} \\times \\text{TimeToDirectionChange}^2 $$</p><p>其中：</p><ul><li><strong>Velocity</strong> 是物体的初始速度。</li><li><strong>TimeToDirectionChange</strong> 是物体运动方向发生变化所需的时间。</li><li><strong>AccelerationForce</strong> 是物体的净加速度（包括外部加速度和摩擦力）。</li></ul><hr><h4 id="_1-提取水平加速度-acceleration2d" tabindex="-1"><a class="header-anchor" href="#_1-提取水平加速度-acceleration2d"><span>(1) <strong>提取水平加速度（Acceleration2D）</strong></span></a></h4><ul><li>忽略垂直分量（Z轴），只保留水平加速度（XY平面）。</li></ul><h4 id="_2-计算速度在加速度方向上的分量-velocityalongacceleration" tabindex="-1"><a class="header-anchor" href="#_2-计算速度在加速度方向上的分量-velocityalongacceleration"><span>(2) <strong>计算速度在加速度方向上的分量（VelocityAlongAcceleration）</strong></span></a></h4><ul><li>使用点积计算速度在加速度方向上的投影：</li></ul><p>$$ \\text{VelocityAlongAcceleration} = \\text{Velocity} \\cdot \\text{AccelerationDir2D} $$</p><ul><li>如果 <code>VelocityAlongAcceleration &lt; 0</code>，表示速度方向与加速度方向相反，物体会减速并最终改变方向。</li></ul><h4 id="_3-计算方向变化时间-timetodirectionchange" tabindex="-1"><a class="header-anchor" href="#_3-计算方向变化时间-timetodirectionchange"><span>(3) <strong>计算方向变化时间（TimeToDirectionChange）</strong></span></a></h4><ul><li>方向变化时间由以下公式计算：</li></ul><p>$$ \\text{TimeToDirectionChange} = \\frac{\\text{SpeedAlongAcceleration}}{\\text{Divisor}} $$</p><p>其中：</p><ul><li><strong>SpeedAlongAcceleration</strong> 是速度在加速度方向上的大小（取反，因为 <code>VelocityAlongAcceleration &lt; 0</code>）：</li></ul><p>$$ \\text{SpeedAlongAcceleration} = -\\text{VelocityAlongAcceleration} $$</p><ul><li><strong>Divisor</strong> 是加速度和摩擦力的综合效果：</li></ul><p>$$ \\text{Divisor} = \\text{AccelerationSize2D} + 2 \\times \\text{SpeedAlongAcceleration} \\times \\text{GroundFriction} $$</p><h4 id="_4-计算净加速度-accelerationforce" tabindex="-1"><a class="header-anchor" href="#_4-计算净加速度-accelerationforce"><span>(4) <strong>计算净加速度（AccelerationForce）</strong></span></a></h4><ul><li>净加速度由外部加速度和摩擦力共同决定：</li></ul><p>$$ \\text{AccelerationForce} = \\text{Acceleration} - (\\text{Velocity} - \\text{AccelerationDir2D} \\times \\text{Velocity.Size2D()}) \\times \\text{GroundFriction} $$</p><h4 id="_5-计算转向点位置-predictedpivotlocation" tabindex="-1"><a class="header-anchor" href="#_5-计算转向点位置-predictedpivotlocation"><span>(5) <strong>计算转向点位置（PredictedPivotLocation）</strong></span></a></h4><ul><li>使用匀加速运动公式计算转向点位置：</li></ul><p>$$ \\text{PredictedPivotLocation} = \\text{Velocity} \\times \\text{TimeToDirectionChange} + \\frac{1}{2} \\times \\text{AccelerationForce} \\times \\text{TimeToDirectionChange}^2 $$</p><hr><p>最终公式可以总结为：</p><p>$$ \\text{PredictedPivotLocation} = \\text{Velocity} \\times \\frac{\\text{SpeedAlongAcceleration}}{\\text{AccelerationSize2D} + 2 \\times \\text{SpeedAlongAcceleration} \\times \\text{GroundFriction}} + \\frac{1}{2} \\times \\left( \\text{Acceleration} - (\\text{Velocity} - \\text{AccelerationDir2D} \\times \\text{Velocity.Size2D()}) \\times \\text{GroundFriction} \\right) \\times \\left( \\frac{\\text{SpeedAlongAcceleration}}{\\text{AccelerationSize2D} + 2 \\times \\text{SpeedAlongAcceleration} \\times \\text{GroundFriction}} \\right)^2 $$</p><h2 id="animdistancematchinglibrary" tabindex="-1"><a class="header-anchor" href="#animdistancematchinglibrary"><span>AnimDistanceMatchingLibrary</span></a></h2><h3 id="distancematchtotarget" tabindex="-1"><a class="header-anchor" href="#distancematchtotarget"><span>DistanceMatchToTarget</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">static</span> FSequenceEvaluatorReference <span class="token function">DistanceMatchToTarget</span><span class="token punctuation">(</span><span class="token keyword">const</span> FSequenceEvaluatorReference<span class="token operator">&amp;</span> SequenceEvaluator<span class="token punctuation">,</span></span>
<span class="line">		<span class="token keyword">float</span> DistanceToTarget<span class="token punctuation">,</span> FName DistanceCurveName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用动画曲线和距离变量来选择动画姿势。其核心算法在<code>UE::Anim::DistanceMatchingUtility::GetAnimPositionFromDistance</code>。通过二分法查找曲线中最接近<code>DistanceToTarget</code>的关键帧：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">int32 First <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">int32 Last <span class="token operator">=</span> NumKeys <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">int32 Count <span class="token operator">=</span> Last <span class="token operator">-</span> First<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>Count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">	int32 Step <span class="token operator">=</span> Count <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">	int32 Middle <span class="token operator">=</span> First <span class="token operator">+</span> Step<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>InDistance <span class="token operator">&gt;</span> BufferCurveAccess<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>Middle<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">{</span></span>
<span class="line">		First <span class="token operator">=</span> Middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">		Count <span class="token operator">-=</span> Step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">else</span></span>
<span class="line">	<span class="token punctuation">{</span></span>
<span class="line">		Count <span class="token operator">=</span> Step<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后找到关键帧对应的动画时间返回即可：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token keyword">float</span> KeyAValue <span class="token operator">=</span> BufferCurveAccess<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>First <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">float</span> KeyBValue <span class="token operator">=</span> BufferCurveAccess<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>First<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">float</span> Diff <span class="token operator">=</span> KeyBValue <span class="token operator">-</span> KeyAValue<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">float</span> Alpha <span class="token operator">=</span> <span class="token operator">!</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">IsNearlyZero</span><span class="token punctuation">(</span>Diff<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>InDistance <span class="token operator">-</span> KeyAValue<span class="token punctuation">)</span> <span class="token operator">/</span> Diff<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0.f</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">float</span> KeyATime <span class="token operator">=</span> BufferCurveAccess<span class="token punctuation">.</span><span class="token function">GetTime</span><span class="token punctuation">(</span>First <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">float</span> KeyBTime <span class="token operator">=</span> BufferCurveAccess<span class="token punctuation">.</span><span class="token function">GetTime</span><span class="token punctuation">(</span>First<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">return</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Lerp</span><span class="token punctuation">(</span>KeyATime<span class="token punctuation">,</span> KeyBTime<span class="token punctuation">,</span> Alpha<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="advancetimebydistancematching" tabindex="-1"><a class="header-anchor" href="#advancetimebydistancematching"><span>AdvanceTimeByDistanceMatching</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">static</span> FSequenceEvaluatorReference <span class="token function">AdvanceTimeByDistanceMatching</span><span class="token punctuation">(</span><span class="token keyword">const</span> FAnimUpdateContext<span class="token operator">&amp;</span> UpdateContext<span class="token punctuation">,</span> <span class="token keyword">const</span> FSequenceEvaluatorReference<span class="token operator">&amp;</span> SequenceEvaluator<span class="token punctuation">,</span></span>
<span class="line">	<span class="token keyword">float</span> DistanceTraveled<span class="token punctuation">,</span> FName DistanceCurveName<span class="token punctuation">,</span> FVector2D PlayRateClamp <span class="token operator">=</span> <span class="token function">FVector2D</span><span class="token punctuation">(</span><span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token number">1.25f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>按角色每帧行进的距离将连接的 <code>Sequence Evaluator</code> 节点向前推进而不是时间。</p><p>核心逻辑在<code>UE::Anim::DistanceMatchingUtility::GetTimeAfterDistanceTraveled</code>，其主要思想是从动画当前时间点开始，以<code>30pfs</code>的采样率推进动画，并累加推进动画产生的距离，该距离由曲线获得。当距离大于等于<code>DistanceTraveled</code>时，返回采样点，该点的时间就是需要前进动画的时间点。</p><h3 id="setplayratetomatchspeed" tabindex="-1"><a class="header-anchor" href="#setplayratetomatchspeed"><span>SetPlayrateToMatchSpeed</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">static</span> FSequencePlayerReference <span class="token function">SetPlayrateToMatchSpeed</span><span class="token punctuation">(</span><span class="token keyword">const</span> FSequencePlayerReference<span class="token operator">&amp;</span> SequencePlayer<span class="token punctuation">,</span> </span>
<span class="line">	<span class="token keyword">float</span> SpeedToMatch<span class="token punctuation">,</span> FVector2D PlayRateClamp <span class="token operator">=</span> <span class="token function">FVector2D</span><span class="token punctuation">(</span><span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token number">1.25f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数通过调整动画序列播放器（<code>FAnimNode_SequencePlayer</code>）的播放速率（<code>Play Rate</code>），使动画的根运动速度与给定的目标速度（<code>SpeedToMatch</code>）匹配。计算方式如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// Calculate the speed as: (distance traveled by the animation) / (length of the animation)</span></span>
<span class="line"><span class="token keyword">const</span> FVector RootMotionTranslation <span class="token operator">=</span> AnimSequence<span class="token operator">-&gt;</span><span class="token function">ExtractRootMotionFromRange</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span> AnimLength<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTranslation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">float</span> RootMotionDistance <span class="token operator">=</span> RootMotionTranslation<span class="token punctuation">.</span><span class="token function">Size2D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">IsNearlyZero</span><span class="token punctuation">(</span>RootMotionDistance<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">const</span> <span class="token keyword">float</span> AnimationSpeed <span class="token operator">=</span> RootMotionDistance <span class="token operator">/</span> AnimLength<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">float</span> DesiredPlayRate <span class="token operator">=</span> SpeedToMatch <span class="token operator">/</span> AnimationSpeed<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>PlayRateClamp<span class="token punctuation">.</span>X <span class="token operator">&gt;=</span> <span class="token number">0.0f</span> <span class="token operator">&amp;&amp;</span> PlayRateClamp<span class="token punctuation">.</span>X <span class="token operator">&lt;</span> PlayRateClamp<span class="token punctuation">.</span>Y<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">{</span></span>
<span class="line">		DesiredPlayRate <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Clamp</span><span class="token punctuation">(</span>DesiredPlayRate<span class="token punctuation">,</span> PlayRateClamp<span class="token punctuation">.</span>X<span class="token punctuation">,</span> PlayRateClamp<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	InSequencePlayer<span class="token punctuation">.</span><span class="token function">SetPlayRate</span><span class="token punctuation">(</span>DesiredPlayRate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="distancecurvemodifier" tabindex="-1"><a class="header-anchor" href="#distancecurvemodifier"><span>DistanceCurveModifier</span></a></h2><p>使用<code>UAnimSequence::ExtractRootMotion</code>方法提取根节点的位移，并记录到曲线中。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ul><li><a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/distance-matching-in-unreal-engine" target="_blank" rel="noopener noreferrer">https://dev.epicgames.com/documentation/zh-cn/unreal-engine/distance-matching-in-unreal-engine</a></li><li><a href="https://zhuanlan.zhihu.com/p/545559834" target="_blank" rel="noopener noreferrer">UE5 Distance Matching插件应用与源码解析</a></li><li><a href="https://zhuanlan.zhihu.com/p/572811605" target="_blank" rel="noopener noreferrer">UE5 骨骼动画 Lyra 距离匹配 速度匹配</a></li><li><a href="https://www.juncewang.com/zh/post/%E5%A6%82%E4%BD%95%E7%94%A8%E8%B7%9D%E7%A6%BB%E5%8C%B9%E9%85%8D%EF%BC%88distance-matching%EF%BC%89%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%A7%BB%E5%8A%A8%E5%81%9C%E6%AD%A5%E6%9B%B4%E7%9C%9F%E5%AE%9E" target="_blank" rel="noopener noreferrer">如何用距离匹配（Distance Matching）让你的移动停步更真实</a></li></ul>`,85)]))}const d=e(o,[["render",c],["__file","DistanceMatching.html.vue"]]),k=JSON.parse('{"path":"/GameEngine/Unreal/animation/DistanceMatching.html","title":"Distance Matching","lang":"en-US","frontmatter":{"date":"2025-03-04T18:03:06.000Z","tag":["Unreal Engine","Animation"]},"headers":[{"level":2,"title":"AnimCharacterMovementLibrary","slug":"animcharactermovementlibrary","link":"#animcharactermovementlibrary","children":[{"level":3,"title":"PredictGroundMovementStopLocation","slug":"predictgroundmovementstoplocation","link":"#predictgroundmovementstoplocation","children":[]}]},{"level":2,"title":"由摩擦力和额外减速度组成:$$\\\\text{Acceleration} = (-\\\\text{ActualBrakingFriction}) * \\\\text{Velocity2D} - \\\\text{BrakingDeceleration} * \\\\text{VelocityDir2D}$$","slug":"由摩擦力和额外减速度组成-text-acceleration-text-actualbrakingfriction-text-velocity2d-text-brakingdeceleration-text-velocitydir2d","link":"#由摩擦力和额外减速度组成-text-acceleration-text-actualbrakingfriction-text-velocity2d-text-brakingdeceleration-text-velocitydir2d","children":[{"level":3,"title":"PredictGroundMovementPivotLocation","slug":"predictgroundmovementpivotlocation","link":"#predictgroundmovementpivotlocation","children":[]}]},{"level":2,"title":"AnimDistanceMatchingLibrary","slug":"animdistancematchinglibrary","link":"#animdistancematchinglibrary","children":[{"level":3,"title":"DistanceMatchToTarget","slug":"distancematchtotarget","link":"#distancematchtotarget","children":[]},{"level":3,"title":"AdvanceTimeByDistanceMatching","slug":"advancetimebydistancematching","link":"#advancetimebydistancematching","children":[]},{"level":3,"title":"SetPlayrateToMatchSpeed","slug":"setplayratetomatchspeed","link":"#setplayratetomatchspeed","children":[]}]},{"level":2,"title":"DistanceCurveModifier","slug":"distancecurvemodifier","link":"#distancecurvemodifier","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"createdTime":1741708316000,"updatedTime":1741708316000,"contributors":[{"name":"BanMing","email":"ban-ming@foxmail.com","commits":1}]},"readingTime":{"minutes":5.55,"words":1666},"filePathRelative":"GameEngine/Unreal/animation/DistanceMatching.md","localizedDate":"March 4, 2025","excerpt":"\\n<figure><figcaption></figcaption></figure>\\n<p>通过角色与目标点的距离和动画根节点移动的距离进行匹配，可以使角色脚步准确落到目标点上，已解决滑步的问题。这个技术一般应用在角色的起步、停步、急停、下落反馈中。</p>\\n<p>具体的使用可以查看:</p>\\n<ul>\\n<li><a href=\\"https://dev.epicgames.com/documentation/zh-cn/unreal-engine/distance-matching-in-unreal-engine\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官方文档</a></li>\\n<li><a href=\\"https://banming.github.io/GameEngine/Unreal/animation/LyraALS.html#stop-location\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Lyra ALS</a></li>\\n</ul>"}');export{d as comp,k as data};
