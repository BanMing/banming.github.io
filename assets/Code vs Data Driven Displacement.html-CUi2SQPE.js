import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as e}from"./app-KLOi3RqW.js";const t="/assets/2024-9-9-15-10-22-o9hzCN_Y.png",i="/assets/2024-9-9-15-17-53-wYKhmzrN.png",o="/assets/2024-9-9-15-29-19-CY9d-gOB.png",c="/assets/2024-9-9-15-29-45-DANcaW2R.png",p={},l=e(`<h1 id="code-vs-data-driven-displacement" tabindex="-1"><a class="header-anchor" href="#code-vs-data-driven-displacement"><span>Code vs Data Driven Displacement</span></a></h1><p>原文地址：https://theorangeduck.com/page/code-vs-data-driven-displacement</p><h2 id="definitions" tabindex="-1"><a class="header-anchor" href="#definitions"><span>Definitions</span></a></h2><h3 id="the-simulation-object" tabindex="-1"><a class="header-anchor" href="#the-simulation-object"><span>The Simulation Object</span></a></h3><p>把手柄输入转化为预测要移动的物体。</p><video controls="" muted="" width="640" height="360"><source src="https://theorangeduck.com/media/uploads/CodeVsDataDriven/SimulationObject.m4v" type="video/mp4"></video><p>将输入转化为速度的代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>vec3 <span class="token function">desired_velocity_update</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> vec3 gamepadstick_left<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">float</span> camera_azimuth<span class="token punctuation">,</span>
    <span class="token keyword">const</span> quat simulation_rotation<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">float</span> fwrd_speed<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">float</span> side_speed<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">float</span> back_speed<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Find stick position in world space by rotating using camera azimuth</span>
    vec3 global_stick_direction <span class="token operator">=</span> <span class="token function">quat_mul_vec3</span><span class="token punctuation">(</span>
        <span class="token function">quat_from_angle_axis</span><span class="token punctuation">(</span>camera_azimuth<span class="token punctuation">,</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gamepadstick_left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Find stick position local to current facing direction</span>
    vec3 local_stick_direction <span class="token operator">=</span> <span class="token function">quat_inv_mul_vec3</span><span class="token punctuation">(</span>
        simulation_rotation<span class="token punctuation">,</span> global_stick_direction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Scale stick by forward, sideways and backwards speeds</span>
    vec3 local_desired_velocity <span class="token operator">=</span> local_stick_direction<span class="token punctuation">.</span>z <span class="token operator">&gt;</span> <span class="token number">0.0</span> <span class="token operator">?</span>
        <span class="token function">vec3</span><span class="token punctuation">(</span>side_speed<span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> fwrd_speed<span class="token punctuation">)</span> <span class="token operator">*</span> local_stick_direction <span class="token operator">:</span>
        <span class="token function">vec3</span><span class="token punctuation">(</span>side_speed<span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> back_speed<span class="token punctuation">)</span> <span class="token operator">*</span> local_stick_direction<span class="token punctuation">;</span>
    
    <span class="token comment">// Re-orientate into the world space</span>
    <span class="token keyword">return</span> <span class="token function">quat_mul_vec3</span><span class="token punctuation">(</span>simulation_rotation<span class="token punctuation">,</span> local_desired_velocity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="the-character-entity" tabindex="-1"><a class="header-anchor" href="#the-character-entity"><span>The Character Entity</span></a></h3><p>这就是玩家可以看到角色。角色的移动数据是来自动画切片，这种方式叫作数据驱动。</p><video controls="" muted="" width="640" height="360"><source src="https://theorangeduck.com/media/uploads/CodeVsDataDriven/MotionCaptureData.m4v" type="video/mp4"></video><p>动画切片：https://github.com/ubisoft/ubisoft-laforge-animation-dataset</p><h2 id="simulation-bone" tabindex="-1"><a class="header-anchor" href="#simulation-bone"><span>Simulation Bone</span></a></h2><p>模拟骨骼是给模拟对象使用的，用来代表移动旋转。通常是<strong>骨骼的根节点</strong>。</p><p>为了最大程度的减少视觉物体和模拟物体之间的脱节，是将脊椎骨骼之一投影到地面上，然后使用<strong>Savitzky-Golay</strong>过滤器平滑其位置-使它作为模拟骨骼的位置。然后将髋骨向前的方向，投影到地面上，用同样的方法抹平。将其旋转为绕垂直轴的旋转，并将其用作模拟骨骼的旋转。</p><video controls="" muted="" width="640" height="360"><source src="https://theorangeduck.com/media/uploads/CodeVsDataDriven/MotionCaptureDataWalking.m4v" type="video/mp4"></video><p>这个原理是，平滑消除了因臀部前后摆动而引起的任何晓得振荡和方向变化；更接近地匹配临界阻尼弹簧产出的运动风格。这种方式并不适用于循环动画和小块动画。</p><p>画出行走和奔跑两个动画，模拟骨骼的轨迹，如下图：</p><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同样可以画出两个动画的速度，加速度，角度速度的变化图：</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里记录模拟物体移动的数据；</p><video controls="" muted="" width="640" height="360"><source src="https://theorangeduck.com/media/uploads/CodeVsDataDriven/SimulationDanceCardFast.m4v" type="video/mp4"></video><p>然后再把模拟物体移动的数据做图像化，把轨迹和速度画出来，并与原动画的数据画在一起如下：</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到上图中有很多重叠的部分，这就说明模拟对象和角色实体的模拟骨骼之间有相当不错的匹配。这就意味着，给我们拥有的动画数据和模拟对象设置，很有可能再模拟对象的运动和角色的运动之间实现良好的视觉匹配。</p><h2 id="character-controller" tabindex="-1"><a class="header-anchor" href="#character-controller"><span>Character Controller</span></a></h2><h2 id="synchronization" tabindex="-1"><a class="header-anchor" href="#synchronization"><span>Synchronization</span></a></h2><p>有两种方式：</p><ul><li>直接使用模拟物体同步到角色：会出现滑步</li><li>由数据驱动模拟物体：这会造成延迟感</li></ul><p>那么想到的方式就是直接混合这两者。</p><h2 id="adjustment" tabindex="-1"><a class="header-anchor" href="#adjustment"><span>Adjustment</span></a></h2><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ul><li>https://static-wordpress.ubisoft.com/montreal.ubisoft.com/wp-content/uploads/2020/07/09154101/Learned_Motion_Matching.pdf</li><li>https://www.gdcvault.com/play/1027378/Motion-Matching-in-The-Last</li><li></li></ul>',35),r=[l];function d(u,m){return s(),a("div",null,r)}const k=n(p,[["render",d],["__file","Code vs Data Driven Displacement.html.vue"]]),g=JSON.parse('{"path":"/Animation/MotionMatching/Code%20vs%20Data%20Driven%20Displacement.html","title":"Code vs Data Driven Displacement","lang":"en-US","frontmatter":{"date":"2023-02-28T08:40:18.000Z","tag":"Animation"},"headers":[{"level":2,"title":"Definitions","slug":"definitions","link":"#definitions","children":[{"level":3,"title":"The Simulation Object","slug":"the-simulation-object","link":"#the-simulation-object","children":[]},{"level":3,"title":"The Character Entity","slug":"the-character-entity","link":"#the-character-entity","children":[]}]},{"level":2,"title":"Simulation Bone","slug":"simulation-bone","link":"#simulation-bone","children":[]},{"level":2,"title":"Character Controller","slug":"character-controller","link":"#character-controller","children":[]},{"level":2,"title":"Synchronization","slug":"synchronization","link":"#synchronization","children":[]},{"level":2,"title":"Adjustment","slug":"adjustment","link":"#adjustment","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"createdTime":1725877412000,"updatedTime":1725964579000,"contributors":[{"name":"ban-ming@foxmail.com","email":"ban-ming@foxmail.com","commits":2}]},"readingTime":{"minutes":2.49,"words":746},"filePathRelative":"Animation/MotionMatching/Code vs Data Driven Displacement.md","localizedDate":"February 28, 2023","excerpt":"\\n<p>原文地址：https://theorangeduck.com/page/code-vs-data-driven-displacement</p>\\n<h2>Definitions</h2>\\n<h3>The Simulation Object</h3>\\n<p>把手柄输入转化为预测要移动的物体。</p>\\n<video controls=\\"\\" muted=\\"\\" width=\\"640\\" height=\\"360\\">\\n  <source src=\\"https://theorangeduck.com/media/uploads/CodeVsDataDriven/SimulationObject.m4v\\" type=\\"video/mp4\\">\\n</video>"}');export{k as comp,g as data};
