import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as n,o as r,c as l,e as t,d as e,f as o,w as d}from"./app-UtFFBMma.js";const c={},_=t("h1",{id:"framework-test",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#framework-test","aria-hidden":"true"},"#"),e(" Framework Test")],-1),u=t("h2",{id:"代码放哪里",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#代码放哪里","aria-hidden":"true"},"#"),e(" 代码放哪里？")],-1),h=t("p",null,"在项目中代码是直接新建一个C#的solution，直接生成dll导入unity工程中，这样可以把代码和资源彻底分开，这样也非常适合分远程库。但是有一个致命的问题就是IL2CPP，这样就需要自己接入IL2CPP到C#工程里去。暂时还没有找到相应的教程指导我们生成IL2CPP文件。这里有个最差的想法就是在打包的时候，把代码复制到unity工程中去，这样就可以使用IL2CPP。",-1),m={href:"https://docs.unity3d.com/Manual/ScriptCompilationAssemblyDefinitionFiles.html",target:"_blank",rel:"noopener noreferrer"},p=t("p",null,"经过实验室，使用.net standard 2.1创建的C#解决方案，生成的dll。在unity选择il2cpp时，会自动打包到cpp文件中去。",-1),f=t("p",null,"所以前面的问题就解决了。",-1),F=t("p",null,"经过测试，并不需要mdb文件了，如果在unity端设置.net standard 2.1。直接复制pdb文件到unity工程下即可。",-1),b=t("p",null,"最后再设置一下define，添加defines文件即可。",-1),C=t("h2",{id:"单例测试",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#单例测试","aria-hidden":"true"},"#"),e(" 单例测试")],-1),k=t("p",null,"https://learn.microsoft.com/en-us/visualstudio/test/getting-started-with-unit-testing?toc=%2Fvisualstudio%2Fget-started%2Fcsharp%2Ftoc.json&bc=%2Fvisualstudio%2Fget-started%2Fcsharp%2Fbreadcrumb%2Ftoc.json&view=vs-2022&tabs=dotnet%2Cmstest",-1),v=t("p",null,"直接在VS中创建Nunit的工程，",-1);function x(y,w){const s=n("ExternalLinkIcon"),i=n("RouterLink");return r(),l("div",null,[_,u,h,t("p",null,[e("第二个方案可以使用: "),t("a",m,[e("ScriptCompilationAssemblyDefinitionFiles"),o(s)]),e("，官方的程序集分包。")]),p,f,t("p",null,[e("接下来就可以添加vs的配置了。可以看这一篇文章： "),o(i,{to:"/GameEngine/Unity/manual/normal/dll_lib_dev.html"},{default:d(()=>[e("使用C#动态库开发unity游戏")]),_:1})]),F,b,C,k,v])}const g=a(c,[["render",x],["__file","Framework Test.html.vue"]]);export{g as default};
