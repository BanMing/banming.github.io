import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as i,b as r}from"./app-uSoypkDR.js";const t={},h=r('<h1 id="some-questions" tabindex="-1"><a class="header-anchor" href="#some-questions" aria-hidden="true">#</a> Some Questions</h1><h2 id="c-的编译过程" tabindex="-1"><a class="header-anchor" href="#c-的编译过程" aria-hidden="true">#</a> C#的编译过程</h2><p>C#-&gt;IL-&gt;机器码</p><h2 id="什么是il代码" tabindex="-1"><a class="header-anchor" href="#什么是il代码" aria-hidden="true">#</a> 什么是IL代码</h2><p>IL-&gt; Intermediate Language，它是一个部分编译的代码</p><h2 id="什么是jit" tabindex="-1"><a class="header-anchor" href="#什么是jit" aria-hidden="true">#</a> 什么是JIT</h2><p>JIT-&gt; Just in time compiler，使用JIT来编译IL代码到机器码</p><h2 id="为啥么要用il" tabindex="-1"><a class="header-anchor" href="#为啥么要用il" aria-hidden="true">#</a> 为啥么要用IL</h2><p>因为开发环境和运行环境会有不同，根据运行环境JIT会来编译不同平带的机器码。同样在开发时，速度会更加的快了。</p><h2 id="什么是clr" tabindex="-1"><a class="header-anchor" href="#什么是clr" aria-hidden="true">#</a> 什么是CLR</h2><p>CLR-&gt; Common Language Runtime</p><ul><li>CLR 触发JIT来编译IL代码</li><li>清理任何没有使用的对象通过GC</li></ul><h2 id="什么是托管代码和非托管代码" tabindex="-1"><a class="header-anchor" href="#什么是托管代码和非托管代码" aria-hidden="true">#</a> 什么是托管代码和非托管代码</h2><ul><li>托管代码激活在CLR激活环境</li><li>非托管代码激活在CLR边界意外，简单的说就是一些引用的dll。</li></ul><h2 id="gc可以清理非托管代码" tabindex="-1"><a class="header-anchor" href="#gc可以清理非托管代码" aria-hidden="true">#</a> GC可以清理非托管代码</h2><p>不行</p>',16),d=[h];function n(c,s){return a(),i("div",null,d)}const u=e(t,[["render",n],["__file","Interview.html.vue"]]);export{u as default};
