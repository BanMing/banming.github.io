import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as i,f as s,g as e,h as n,j as o,k as l,r as m,o as p}from"./app-CY3QGuZ1.js";const u={};function d(c,t){const r=m("RouteLink");return p(),i("div",null,[t[2]||(t[2]=s('<h1 id="framework-test" tabindex="-1"><a class="header-anchor" href="#framework-test"><span>Framework Test</span></a></h1><h2 id="代码放哪里" tabindex="-1"><a class="header-anchor" href="#代码放哪里"><span>代码放哪里？</span></a></h2><p>在项目中代码是直接新建一个C#的solution，直接生成dll导入unity工程中，这样可以把代码和资源彻底分开，这样也非常适合分远程库。但是有一个致命的问题就是IL2CPP，这样就需要自己接入IL2CPP到C#工程里去。暂时还没有找到相应的教程指导我们生成IL2CPP文件。这里有个最差的想法就是在打包的时候，把代码复制到unity工程中去，这样就可以使用IL2CPP。</p><p>第二个方案可以使用: <a href="https://docs.unity3d.com/Manual/ScriptCompilationAssemblyDefinitionFiles.html" target="_blank" rel="noopener noreferrer">ScriptCompilationAssemblyDefinitionFiles</a>，官方的程序集分包。</p><p>经过实验室，<a href="http://xn--2rqz13g.net" target="_blank" rel="noopener noreferrer">使用.net</a> standard 2.1创建的C#解决方案，生成的dll。在unity选择il2cpp时，会自动打包到cpp文件中去。</p><p>所以前面的问题就解决了。</p>',6)),e("p",null,[t[1]||(t[1]=n("接下来就可以添加vs的配置了。可以看这一篇文章： ")),o(r,{to:"/GameEngine/Unity/manual/normal/dll_lib_dev.html"},{default:l(()=>t[0]||(t[0]=[n("使用C#动态库开发unity游戏")])),_:1})]),t[3]||(t[3]=e("p",null,[n("经过测试，并不需要mdb文件了，"),e("a",{href:"http://xn--unity-8w2in4lfu9ajm0b4njv77a.net",target:"_blank",rel:"noopener noreferrer"},"如果在unity端设置.net"),n(" standard 2.1。直接复制pdb文件到unity工程下即可。")],-1)),t[4]||(t[4]=e("p",null,"最后再设置一下define，添加defines文件即可。",-1)),t[5]||(t[5]=e("h2",{id:"单例测试",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#单例测试"},[e("span",null,"单例测试")])],-1)),t[6]||(t[6]=e("p",null,[e("a",{href:"https://learn.microsoft.com/en-us/visualstudio/test/getting-started-with-unit-testing?toc=%2Fvisualstudio%2Fget-started%2Fcsharp%2Ftoc.json&bc=%2Fvisualstudio%2Fget-started%2Fcsharp%2Fbreadcrumb%2Ftoc.json&view=vs-2022&tabs=dotnet%2Cmstest",target:"_blank",rel:"noopener noreferrer"},"https://learn.microsoft.com/en-us/visualstudio/test/getting-started-with-unit-testing?toc=%2Fvisualstudio%2Fget-started%2Fcsharp%2Ftoc.json&bc=%2Fvisualstudio%2Fget-started%2Fcsharp%2Fbreadcrumb%2Ftoc.json&view=vs-2022&tabs=dotnet%2Cmstest")],-1)),t[7]||(t[7]=e("p",null,"直接在VS中创建Nunit的工程，",-1))])}const h=a(u,[["render",d],["__file","Framework Test.html.vue"]]),b=JSON.parse('{"path":"/GameEngine/Unity/somecode/Framework%20Test.html","title":"Framework Test","lang":"en-US","frontmatter":{"date":"2024-01-27T14:41:00.000Z","tag":["Unity"]},"git":{"createdTime":1706337660000,"updatedTime":1707213711000,"contributors":[{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":2,"url":"https://github.com/BanMing"},{"name":"wupeng","username":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":2,"url":"https://github.com/wupeng"}]},"readingTime":{"minutes":1.16,"words":349},"filePathRelative":"GameEngine/Unity/somecode/Framework Test.md","localizedDate":"January 27, 2024","excerpt":"\\n<h2>代码放哪里？</h2>\\n<p>在项目中代码是直接新建一个C#的solution，直接生成dll导入unity工程中，这样可以把代码和资源彻底分开，这样也非常适合分远程库。但是有一个致命的问题就是IL2CPP，这样就需要自己接入IL2CPP到C#工程里去。暂时还没有找到相应的教程指导我们生成IL2CPP文件。这里有个最差的想法就是在打包的时候，把代码复制到unity工程中去，这样就可以使用IL2CPP。</p>\\n<p>第二个方案可以使用: <a href=\\"https://docs.unity3d.com/Manual/ScriptCompilationAssemblyDefinitionFiles.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ScriptCompilationAssemblyDefinitionFiles</a>，官方的程序集分包。</p>"}');export{h as comp,b as data};
