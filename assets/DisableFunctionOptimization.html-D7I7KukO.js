import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as t}from"./app-CAAXU5O1.js";const i={};function p(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="disable-function-optimization-with-attribute" tabindex="-1"><a class="header-anchor" href="#disable-function-optimization-with-attribute"><span>Disable Function Optimization with Attribute</span></a></h1><h2 id="single-function-definition" tabindex="-1"><a class="header-anchor" href="#single-function-definition"><span>Single function definition</span></a></h2><h3 id="clang" tabindex="-1"><a class="header-anchor" href="#clang"><span>Clang</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// Clang</span></span>
<span class="line"><span class="token comment">// GNU-style attribute</span></span>
<span class="line"><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>optnone<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// C++11 attribute</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span>clang<span class="token double-colon punctuation">::</span>optnone<span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gcc" tabindex="-1"><a class="header-anchor" href="#gcc"><span>GCC</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">optimize</span><span class="token punctuation">(</span><span class="token string">&quot;O0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="multiply-function-definition" tabindex="-1"><a class="header-anchor" href="#multiply-function-definition"><span>Multiply function definition</span></a></h2><h3 id="clang-1" tabindex="-1"><a class="header-anchor" href="#clang-1"><span>Clang</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">clang optimize off</span></span></span>
<span class="line"><span class="token comment">// This function will be decorated with optnone.</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// optnone conflicts with always_inline, so bar() will not be decorated.</span></span>
<span class="line"><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>always_inline<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">clang optimize on</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="visual-studio" tabindex="-1"><a class="header-anchor" href="#visual-studio"><span>Visual Studio</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">optimize</span><span class="token punctuation">(</span> </span><span class="token string">&quot;&quot;</span><span class="token expression"><span class="token punctuation">,</span> off <span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token comment">/* unoptimized code section */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">optimize</span><span class="token punctuation">(</span> </span><span class="token string">&quot;&quot;</span><span class="token expression"><span class="token punctuation">,</span> on <span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gcc-1" tabindex="-1"><a class="header-anchor" href="#gcc-1"><span>GCC</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC push_options</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span><span class="token punctuation">(</span></span><span class="token string">&quot;O0&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token comment">/* unoptimized code section */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC pop_options</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><p><a href="https://bcain-llvm.readthedocs.io/projects/clang/en/latest/LanguageExtensions/" target="_blank" rel="noopener noreferrer">Clang Language Extensions â€” Clang 8 documentation (bcain-llvm.readthedocs.io)</a><a href="https://learn.microsoft.com/en-us/cpp/preprocessor/optimize?view=msvc-170" target="_blank" rel="noopener noreferrer">optimize pragma | Microsoft Learn</a><a href="https://codeforces.com/blog/entry/96344" target="_blank" rel="noopener noreferrer">[Tutorial] GCC Optimization Pragmas - Codeforces</a></p>`,15)]))}const u=s(i,[["render",p],["__file","DisableFunctionOptimization.html.vue"]]),r=JSON.parse('{"path":"/Basic/language/Cplusplus/DisableFunctionOptimization.html","title":"Disable Function Optimization with Attribute","lang":"en-US","frontmatter":{"date":"2020-09-10T22:45:25.000Z","tag":["C++"]},"headers":[{"level":2,"title":"Single function definition","slug":"single-function-definition","link":"#single-function-definition","children":[{"level":3,"title":"Clang","slug":"clang","link":"#clang","children":[]},{"level":3,"title":"GCC","slug":"gcc","link":"#gcc","children":[]}]},{"level":2,"title":"Multiply function definition","slug":"multiply-function-definition","link":"#multiply-function-definition","children":[{"level":3,"title":"Clang","slug":"clang-1","link":"#clang-1","children":[]},{"level":3,"title":"Visual Studio","slug":"visual-studio","link":"#visual-studio","children":[]},{"level":3,"title":"GCC","slug":"gcc-1","link":"#gcc-1","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"createdTime":1599749125000,"updatedTime":1707212881000,"contributors":[{"name":"BanMing","email":"ban-ming@foxmail.com","commits":3},{"name":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":2}]},"readingTime":{"minutes":0.47,"words":142},"filePathRelative":"Basic/language/Cplusplus/DisableFunctionOptimization.md","localizedDate":"September 10, 2020","excerpt":"\\n<h2>Single function definition</h2>\\n<h3>Clang</h3>\\n<div class=\\"language-cpp line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre><code><span class=\\"line\\"><span class=\\"token comment\\">// Clang</span></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// GNU-style attribute</span></span>\\n<span class=\\"line\\"><span class=\\"token function\\">__attribute__</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>optnone<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// C++11 attribute</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">[</span>clang<span class=\\"token double-colon punctuation\\">::</span>optnone<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{u as comp,r as data};
