import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-DFjSqcWO.js";const l={};function s(i,p){return t(),a("div",null,p[0]||(p[0]=[n('<h1 id="游戏人工智能" tabindex="-1"><a class="header-anchor" href="#游戏人工智能"><span>游戏人工智能</span></a></h1><h2 id="游戏人工智能引论" tabindex="-1"><a class="header-anchor" href="#游戏人工智能引论"><span>游戏人工智能引论</span></a></h2><p>大家好，我叫吴鹏。</p><p>一个工作多年且依旧发量浓密的程序员。</p><p>我在公司的项目是做一款纯真的RTS的游戏，我负责其中AI的一些工作做。</p><p>我们这个课程的标题是游戏性人工智能基础，</p><p>ppt</p><p>所以会着重讲一些在对于实现游戏玩法</p><p>所使用到的一些人工智能相关的基础知识。</p><p>ppt</p><p>首先我们来了解下人工智能和游戏 ppt</p><h3 id="为什么玩游戏" tabindex="-1"><a class="header-anchor" href="#为什么玩游戏"><span>为什么玩游戏</span></a></h3><p>你们觉得人们为什么玩游戏？大家自己也要玩游戏的话，可以讲讲自己从游戏中的能得到什么？为什么玩游戏？</p><p>游戏范围其实很广，像我们成都最受欢迎的麻将，一些运动足球，篮球都是游戏。你们有玩的吗？</p><p>你们觉得在参与这些游戏的时候，你获得了什么？</p><p>我们来讨论为什么玩游戏，其实就像了解一下什么是游戏？</p><p>我觉得游戏，有人用它消磨时间，有人用他来社交，有人用他来挑战自我来获得一些成就感。</p><p>那么游戏可以满足我们很多需求，它是什么？</p><h3 id="游戏是什么" tabindex="-1"><a class="header-anchor" href="#游戏是什么"><span>游戏是什么</span></a></h3><p>ppt 我们一般认为他有三方面的属性：</p><p>科学 ：有数学、有计算机科学、有图像视觉、有物理模拟仿真学。</p><p>同时呢它也具有艺术的成分在里面，我们说游戏是所谓的第九大艺术。</p><p>他有图画、他有剧情、他有音乐。游戏作为一个作品也是设计者传递给玩家的一种想法，一种理念</p><p>那么第三呢？商业。</p><p>并不是所有游戏都有商业的成分在里面，但是游戏这个行业，一定有商业这个成分在里面。</p><p>一个游戏一般是有这三个部分组成的。</p><h3 id="什么是人工智能" tabindex="-1"><a class="header-anchor" href="#什么是人工智能"><span>什么是人工智能</span></a></h3><p>ppt</p><p>那我们再看看什么是人工智能的？</p><p>这两年人工智能这个词很火热哈</p><p>什么深度学习 什么机器学习</p><p>不知道同学们 有没有听过</p><p>比如说AlphaGo 战胜了人类的顶尖棋手，</p><p>AlphaStar在星际中战胜人类的顶尖选手。</p><p>人工智能是关于让计算机能够执行人类和动物能够完成的思维任务。</p><p>其实人工智能的定义是很广泛 比如我们做算法时 穷举法 也是人工智能</p><p>有人 不是说世界上最强的人工 智能 就是if else么</p><p>现在人工智能都这么 火热了</p><p>它能为游戏带来了什么呢？</p><h3 id="人工智能为游戏带来了什么" tabindex="-1"><a class="header-anchor" href="#人工智能为游戏带来了什么"><span>人工智能为游戏带来了什么</span></a></h3><p>ppt</p><p>我认为给游戏带来的主要就是两个方面：</p><p>赋能，把以前不能做的事，现在能做了。</p><p>比如说我们使用 人工智能可以让更真实的游戏、可以有更平衡的游戏。</p><p>另外一方面呢，它可以提高我们的开发效率。作为商业这个是比较重要的。</p><p>我们需要更块的开发速度，更低的开发成本。</p><p>那你可能要说了现在人工智能都这么厉害了</p><p>又可以 给我们的游戏带来那么多的好处</p><p>是不是这些技术早已经在游戏中运用起来了</p><p>其实在现在绝大部分做游戏特别是Gameplay方面，并没有使用现在最火的深度学习、机器学习。</p><p>那么是为什么？</p><h2 id="人工智能应用在游戏中的难点" tabindex="-1"><a class="header-anchor" href="#人工智能应用在游戏中的难点"><span>人工智能应用在游戏中的难点</span></a></h2><p>ppt</p><p>主要难点就是成本和效果。</p><p>我们需要花时间去训练AI且还要维护它</p><p>并且需要大量的数据支撑,或者是纠错</p><p>在训练完后他会不会是人工智障</p><p>这个AI有多么像人 他的可控性大不</p><p>其实这里就是科研和工业的最大区别，我们刚刚看到那几个例子都是科研项目对吧。</p><p>科研是以获得最好的结果为基准。</p><p>而工业是需要以最小的成本来获取最大的成果。</p><p>举一个这几年比较火的一个概念在游戏行业,</p><p>光线追踪,这个技术其实很多年前就有了</p><p>但是我们这几年才开始听说 游戏里面有这个</p><p>主要还是会有一些实际应用上的 一些技术没有完善 包括硬件上的不支持</p><p>我们以例子来讲解人工智能在游戏中的难点。</p><p>ppt</p><p>成本问题，比如说麻将</p><p>第一个是麻将的玩法众多，我们知道当我们训练好了一个AI。</p><p>它在这个场景可以很好的工作，但是换一个场景可能就会有些问题。</p><p>还有就是我们需要训练一个AI，需要使用大量的数据做支撑。</p><p>这个数据的质量的好坏直接影响到AI的强弱。</p><p>pptControllable</p><p>下一个问题，我们说一下拟人。</p><p>其实在游戏中我们并不需要AI很智能，我们需要的是像人。</p><p>这其实是一个悖论，我们举个例子。</p><p>比如你在打王者荣耀，你的队友本来很发挥好好的，后来浪了</p><p>老是失误，犯了错误，导致最后这局游戏输了，你可能很会理解他</p><p>这就是人性，人随时都会改变主意，人都会犯错嘛。</p><p>但是我告诉你那个队友其实是AI控制的。</p><p>你就会说这AI有bug。</p><p>这就是人们的期望不同，得到的效果不同</p><p>ppt</p><p>那么我们第三个我们再看一下 可控程度</p><p>我们再以王者荣耀为例子 ，你的队友和对手都有可能是AI控制的</p><p>我们希望每个人都有自己的风格 整个队伍都有整个队伍的风格</p><p>就是猥琐发育或者就是喜欢一个人gank五个人</p><p>你怎么控制它 如果你做了一个不可控的AI</p><p>你这些都不太好实现</p><p>那么我们的人工智能主要在游戏里有哪些 应用呢？</p><h3 id="人工智能的应用" tabindex="-1"><a class="header-anchor" href="#人工智能的应用"><span>人工智能的应用</span></a></h3><p>ppt</p><p>人工智能在游戏领域主要有三个应用场景：游戏性、游戏内容制作、玩家服务</p><p>第一个能就是玩游戏，这个大家应该都很好理解，不管是作为你的对手还是队友。</p><p>比如说我们打游戏遇到的每一个敌人其实都由人工智能控制的。</p><p>在一款游戏刚发布的时候，可能玩有的人不是很多。</p><p>为了让玩家能体验到游戏，我们可能会往游戏中添加机器人玩家。</p><p>第二个呢，就是游戏内容生成。这个方面其实比上一个方面还要应用的多一些在行业里。</p><p>现在一个比较大型的游戏，它可能就会有很多关卡，地图，剧情什么。</p><p>如果过这些都是人为手动去制作，这会很耗时耗力。</p><p>如果有人工智能来制作或是辅助制作，就会很好</p><p>比如说，现在有些厂商他的场景，城市都是自动生成的。</p><p>像很常见的Rogue Like类型游戏他里面的关卡，道具属性都是自动生成</p><p>不用让策划去设置那么多的关卡</p><p>第三个就是玩家服务，这是衡量玩家的体验。</p><p>比如说玩家会有一些反馈，我们就可以把这些反馈统计起来。</p><p>或者说是一些智能客户助手啥的。</p><p>讲了那么多人工智能相关的东西。</p><p>接下来我们来看看今天的一个主题人工智能在游戏玩法中主要用到了那些方法。</p><h2 id="游戏性ai-模型" tabindex="-1"><a class="header-anchor" href="#游戏性ai-模型"><span>游戏性AI 模型</span></a></h2><p>ppt</p><p>我们今天主要介绍一下传统Gameplay中制作AI的一些方法。</p><p>这个图也是AI在我们整个游戏中的架构或者说是模块，</p><p>这其中主要有三个块：移动、行为决策、策略</p><p>我们可以看到到AI层在整个游戏的架构中其实是比较上层。</p><p>我们AI层是从我们游戏环境 中获取到一些 消息，</p><p>然后 再调用 动画层 和 物理层这些基础服务来实现功能</p><h2 id="移动-导航" tabindex="-1"><a class="header-anchor" href="#移动-导航"><span>移动 &amp; 导航</span></a></h2><p>ppt</p><p>那么我们进入今天的 第一个主题。</p><p>上面的AI模型图中上写移动，可以分为两部分</p><p>角色移动与导航</p><p>这个板块主要是讲这几个东西</p><h3 id="移动" tabindex="-1"><a class="header-anchor" href="#移动"><span>移动</span></a></h3><p>ppt</p><p>这里的移动并不是说怎么控制 角色 移动</p><p>或者说怎么实现角色移动</p><p>而是在角色移动时的处理，这些处理可以 使得AI更加 的合理性</p><p>或者是说看起来没有那么的僵硬</p><p>这里一般分为：</p><p>转向行为，集体移动，预计算物理</p><p>转向行为就是保证角色以正确的速度和正确的方向移动</p><p>集体移动就是当需要控制多个角色移动时</p><p>需要考虑他们的队形 移动方式</p><p>有可能有的角色移动速度快 有的慢</p><p>我们是否需要处理一下这个问题</p><p>预计算物理，最简单的例子是玩家发射导弹打AI</p><p>AI需要躲避这个导弹 就需要计算一下他的轨迹</p><p>然后合理的移动开</p><p>当然还有其他的特殊处理的移动比如说跳跃，汽车移动</p><p>咱们今天就不一一介绍他们</p><p>我们简单的说说角色移动的两个小问题</p><p>ppt</p><p>比如说我们需要把这个车 从A点 移动到B点 。</p><p>那我们 如何判定车到达 了B点？</p><p><strong>停顿</strong></p><p>如果说我们就判断角色的位置与 B点位置是否相等是不是就可以了呢？</p><p>那我有多个角色都同时需要到达B点，会出现什么 情况呢？</p><p>ppt</p><p>蠕动 对吧</p><p>我们大概率会看到几个角色都是疯狂靠近B点，但是就是不能触发到达的方法。</p><p>其实解决方案也很简单，我们把检测到达B点的条件改为</p><p>ppt</p><p>到达B附近即可，以 B点为圆心 设置一个半径为到达范围。</p><p>你们觉得这样处理是否已经是一个完美的方法了？</p><p><strong>停顿</strong></p><p>并不然 ，这里 如果说还需要严谨一些， 我们一般会把 角色的体型算入其中</p><p>这是为防止大体型的角色的中心位置点依旧无法到达那个范围。</p><p>于此同时 我可以再加一个比检测到达的半径更大的半径 ，</p><p>当进入第一个半径时，我们的 角色 可以适当减少速度。</p><p>这样到达我们的目标范围时，就可以平滑的停下来。</p><p>当然对 AI 移动时的 小处理还有很多，一般都是不同情况有着不同的处理。</p><p>ppt</p><p>比如AI需要追逐时，AI角色的转向问题，我们是先转向再移动还是边转向变移动。</p><p>转到那个方向，AI到追逐对象的方向还是追逐对象的方向？</p><p>今天我们就不一一的来讲解这些情况</p><p>大家可以下来思考一下</p><p>接下来我们来聊聊寻路。</p><h3 id="导航" tabindex="-1"><a class="header-anchor" href="#导航"><span>导航</span></a></h3><p>ppt</p><p>寻路其实都可以使用图这个数据结构来抽象出来。</p><p>图中的每个节点可以代表着一个位置或者一个区域</p><p>图中的连线上面的数值代表着从一点到另一点的花费的多少</p><p>当然这个线中如果有箭头 就说明只能从这个点到另一个 点</p><p>那么我们怎么个寻路呢</p><p>其实就是求怎么从一个点走到另一个点且这个路径是最短的</p><p>该这么求呢？</p><p>我们第一个的想法就是一个点一个点的挨着走</p><p>算出所有从A点到B点路径，然后赛选出花销最短的一条路</p><p>这样是不是看起来很暴力</p><p>有点像小时候玩的那个迷宫图</p><p>这里我们可以使用最短路径算法来求解。</p><p>ppt</p><p>我们来简单的介绍一下这个算法</p><p>在这之前我们介绍一下</p><p>这个算法会用到的一些东西</p><p>首先是连接信息 ：也就是图中我们 看到的每一个根线</p><p>它包含了头结点和 尾结点</p><p>当然还有走这个连接的花销</p><p>每个节点的都记录 着与这个节点的所有连接</p><p>比如说A就记录了连接1,2,3</p><p>这里第二个是记录着这个节点到寻路起点的所有花销</p><p>它的计算方式也很简单就是上一个节点的 这个值加上上一个节点到该节点的花销值</p><p>也就是说 B 点的这个值1.8等于A点的这个值0.5加上连接一的1.3</p><p>是不是有点像斐波拉契数列 前面两个加起来等于后面一个</p><p>第三个则是走的那个连接到这个节点，也就是到这个的节点的上一个连接是什么</p><p>下面这个是两个 列表</p><p>这个open list存放的是 已经被发现的节点</p><p>这个closed list存放的是 已经被处理过的节点</p><p>这里说的处理是 更新当前节点所有连接的尾结点的信息</p><p>也就是总花销以及连接信息</p><p>这个说起来有点绕</p><p>我们看图来 解释哈</p><p>我们当前节点是A点</p><p>那我们就需要更新B,C,D这三个点的信息</p><p>比如说B点，先更新从B点到开始节点的花销就是连接1的花销值1.3</p><p>加上从A点到开始节点的花销0.5，得到最后的值1.8</p><p>并且记录连接1到B点。 C，D点是同样的操作</p><p>再完成了这个处理后 咱们就把新发现的B，C,D这三个点加入到open列表里</p><p>再把A加入到closed列表里面</p><p>下面就是我们记录的当前节点，也就是每次处理的节点。</p><p>这个节点是从已经发现的节点中找到起点最短花销的点作为当前节点 。</p><p>寻路起点会作为第一个当前节点</p><p>介绍了这些内容，大家可能 对这个算法有那么一些了解</p><p>但是还是不是特别的清晰对吧</p><p>ppt</p><p>我们来具体讲讲这个流程</p><p>这是一个以迭代器为基础的算法</p><p>开始我们把起点加入到Open list 里</p><p>然后检测Open list 是否为空</p><p>我们先看正常流程下来</p><p>如果不是空就找Open list最小总花销的节点作为当前节点</p><p>然后判断当前节点是不是终点</p><p>如果不是，我就更新当前节点连接上的所有尾结点的信息</p><p>再把新发现的尾结点加入到open list里面</p><p>然后把当前节点从移除open list 中移除</p><p>加入到closed列表里</p><p>然后 再回到前面 检测open list</p><p>这里有两个方式终止迭代器也就是循环</p><p>当我们发现open list 里面没有值时</p><p>就终止 这是为什么呢？</p><p>因为 我们已经处理完了图中所有的节点</p><p>都没有发现一个路径可以到达终点</p><p>第二个就是我们 找到的当前节点</p><p>如果是目标节点 那就说明我们找到了</p><p>最短路径 为什么呢？</p><p>这是因为我们每次在open list 筛选节点时</p><p>都是选择 的最短总花销的节点</p><p>所以这样选择出来的必然是最短路径</p><p>这个流程大致就是这样的,可能大家听的还是有点云里雾里. 没关系</p><p>这里我们来例子讲解一下：</p><p>Figure 4.11:我们要求 A-&gt;G 最短 路径</p><p>这个过程就是 最短路径算法。</p><p>大家对这算法应该是了解了吧</p><p>你们觉得说这个算法最大的缺点是什么呢？</p><p>ppt</p><p>我们看这个算法 最大 的劣势是不加选择的搜索整个图来找到最短的路径</p><p>这个 图显示了不同 阶段的 open 和closed列表中的节点的情况 。</p><p>每种情况 下，搜索的边界都 由开放列表上的节点组成。因为靠近开始点已经被处理过了。</p><p>可以看到最后一个图，找到最短路径，也就是那根 线。</p><p>同时也可以看到有很多 离那根线 很远的点，我们也处理了</p><p>这就增加了很多计算时间 。</p><p>为了减少处理那些不必要的点，我们可以对这个方法做了一定的改进</p><p>就形成了我们的A*算法，</p><h4 id="a" tabindex="-1"><a class="header-anchor" href="#a"><span>A*</span></a></h4><p>ppt</p><p>可以说现有游戏中的寻路算法基本都还是使用的这个算法</p><p>最短路径算法最早设计之初也不是为了游戏</p><p>而A*设计出来就是为解决游戏中的寻路问题</p><p>A*算法翻译过来叫启发式寻路 我更喜欢叫他预估值寻路</p><p>A*跟最短路径算法的工作原理差不多</p><p>所用到的信息都是差不多.</p><p>我们可以看到在节点信息中多了两个字段</p><p>多了一个预估值，直译就是启发值</p><p>这个值是当前 节点预计到终点所用的花销</p><p>这个值 咱们先放一边 就当它是已知数</p><p>咱们先看A*算法的流程</p><p>咱们后面会讲这个值是怎么个计算</p><p>最后一个 值就是从起点到当前点的花销加上</p><p>预估从当前点到终点的花销</p><p>也就是我们的第二个值加上第四个值</p><p>同样是需要两个列表，分别存发现的节点和已经处理的节点</p><p>ppt</p><p>我们来看看流程图</p><p>跟最短路径算法整个流程是差不多的</p><p>与最短路径算法最大的不同就是</p><p>我们在open列表中获取当前节点时</p><p>并不是取从起始点到节点的最小花销的点，而是取最小预计经过节点到终点的花销点。</p><p>A*在迭代时，可能会发现在closed列表中的节点更小花销。</p><p>也就是说,我们发现有一条新的路径可以走到closed中一个节点,并且走这条路他的花销更小</p><p>因为每次遍历并不是找的最小花销</p><p>所以在发现更好的路径在closed列表里时</p><p>可以把这个节点的总共预估花销更新了</p><p>再把他放到open列表中</p><p>我们A*的结束在大多数情况下跟最短路径一样</p><p>计算到当前节点为终点时就结束</p><p>但是这个是有一定的问题的</p><p>因为我们取的是预计总共花销最小</p><p>而不是取得总共花销最小</p><p>但是我们还是使用的这样一个结束的原因</p><p>如果我们为了找到最短路径，反复的查找</p><p>那么这样所带来的性能消耗，就会跟最短路径差不多。</p><p>但是在游戏中就会出现,角色等一会才移动.</p><p>我们是希望游戏中的角色即使的响应玩家,让玩家有一个好的体验.</p><p>同样我们以一个实际例子来讲解</p><p>ppt</p><p>我们来看一个示例</p><p>Figure 4.14 这里需要 流程</p><p>我们对A*算法的流程已经了解了吧</p><p>之前咱们说这个启发值是预制，那我们怎么去计算这个 值呢</p><p>可以说这个预估值计算是A*算法性能的关键</p><p>当我们的预估值越精确，A*算法就会越快。</p><p>所以说这个预估方法就很关键</p><p>那我们来看看怎么计算这个预估值</p><p>ppt</p><p>一般有两种方式：距离和分组</p><p>距离</p><p>这个很好理解就是两点之间的距离</p><p>使用这样方式最好是在室外，或者是阻挡物比较少的时候</p><p>我们看这个图就知道，在室内是算法明显多处理了很多点</p><p>这是为什么呢？</p><p>因为两个节点他的 直线距离很近，但是角色不能直接而到达。</p><p>需要绕路 这个跟我们去重庆使用导航是一个道理哈</p><p>那么我们怎么解决这个问题呢？</p><p>我们可以把室内分组来形成一个大的节点，</p><p>我们可以先计算怎么从起点组到终点组</p><p>再计算组内怎移动</p><p>比如说一个房间内分为一组</p><p>我们看这个图，有三个房间</p><p>我们想从j点走到k点</p><p>先看J和K分别在A和C组</p><p>就先计算怎么从A组 到C组</p><p>算出 A-B-C</p><p>然后在每一个组里分别计算</p><p>由那个节点进入和出组内</p><p>当然还有一些其他的预估方式，是根据我们游戏的特殊处理的。</p><p>比如说，我需要过河，当我具备游泳能力时，我可以直接游过去，不具备时 就需要绕路</p><p>当然还有很多其他 的寻路的算法</p><p>绝大多数新的寻路 的算法都是 基于我们A星算法改进</p><p>比如说我们可以把两个列表去掉</p><p>使用状态记录在节点 信息中</p><p>也可以说当你在open list里发现了终点</p><p>你就找到了一条路,此时也可以结束寻路</p><p>当然如果说你想要去优化你的寻路算法</p><p>最好的方式就是把寻路的过程 可视化出来</p><p>这样可以很清晰明了的分析</p><p>今天 咱们算法就讲到这里</p><p>我们现在已经了解如何解决图中求路径的问题</p><p>那么怎么把图转化成我们的游戏场景</p><p>又怎么把游戏场景转化成图呢？</p><p>ppt</p><p>一般会有这四种</p><p>瓦片图</p><p>狄利克雷分布 我一般叫他圆锥域</p><p>可视化点</p><p>导航网格 navmesh</p><p>ppt</p><p>我们先来看看 瓦片式地图</p><p>这个也是最简单的 它在2D游戏中使用很广泛 同样也会在3D游戏中使用到</p><p>想很多战棋类的游戏,或者是slg策略类的游戏会用到这种.</p><p>一般是用网络代表着游戏世界 也就是棋盘格</p><p>每个小格代表着一个地点</p><p>当然也会有蜂窝型的</p><p>我们一般把</p><p>游戏场景抽象为图的这一过程叫做量化</p><p>我们一般把图转化为游戏场景叫做定位</p><p>量化和定位都比较简单，</p><p>我们根据当前的位置除以格子大小就可以知道我们在哪一格了</p><p>反之定位也是如此计算</p><p>PTT</p><p>在定位时我们需要注意</p><p>角色是否能够在当前位置</p><p>因为有可能当前位置已经被挡住了部分</p><p>缺点</p><p>格子数多时 几千个几万个时 这会使寻路算法 花销很多</p><p>同样的它所产生的路径不会那么的丝滑</p><p>有人就提出了 一个针对这个方案的专门的寻路算法 叫做 jsp</p><p>有兴趣的大家可以去看看</p><p>ppt</p><p>这种方式叫做狄利克雷分布</p><p>我们在游戏地图的空中放一个圆盘</p><p>然后在这个圆盘正上方放一个向地面照射方向光</p><p>地面上阴影的区域就是 属于该圆盘,这个圆盘就是我们图中的节点</p><p>我们一般在关卡设计的时候就对地图配置该点也就量化好了</p><p>在定位 时，只需要判断角色与那个节点近就可以了</p><p>这个方式有个需要注意的点就是我们无法保证两个域之间</p><p>能否直接到达，是否会通过第三个域。第三个域角色是否可以走过去</p><p>这些我们 都需要提前做好配置设置</p><p>这个 方式在游戏里使用的很多 一般像是mmo会使用这种</p><p>他非常容易去实现编程 但是对于地图编辑就会比较麻烦 去设置点位</p><p>是不是发现这种方式减少了之前说到的网格法的格子数量</p><p>ppt</p><p>我们在2D环境中最短的路径一般都会经过转角</p><p>那么我们可以把转角连接起来就形成了一张图</p><p>那么我们怎么去定义两个转角点是可以通过的呢？</p><p>我们可以使用射线检测 来检查两个点之间是否有障碍物</p><p>于此同时在量化时需要对转角节点的位置向外偏移</p><p>偏移到角色可以移动的为位置 而不是转角</p><p>这是一种简单好实现的方案</p><p>ppt</p><p>缺点就是如果自动连接的话 会有很多无用的连接</p><p>我们需要手动忽略一些连接线</p><p>这个方式不局限说使用在室内</p><p>我们也可以对地图做配置</p><p>比如说 建筑四周 ，山体转角设置点位</p><p>这也是我所在项目中 寻路使用一个方式</p><p>下面一种</p><p>可能对游戏开发有一定了解的同学</p><p>说到寻路可能就会说 导航网格</p><p>ppt</p><p>这确实是现在最常用的一个寻路转化方案</p><p>它跟刚刚讲的可视化节点有点像</p><p>不过他是把我们的地图切割成多边形的方式</p><p>然后把节点放在每个多边形的重心上</p><p>我们怎么定位角色在那个 节点呢？</p><p>首先想到的 就是遍历 所有多边形</p><p>这显然不是一个好的办法</p><p>我们一般的做法是记录下角色上一帧在那个多边形</p><p>这一帧获得节点时,从那个多边形开始搜索</p><p>再搜索那个那个多边形周围的</p><p>ppt</p><p>同时我们也需要注意</p><p>在划分多边形时 多变形的大小问题以及周边的障碍物</p><p>我们看这个图</p><p>角色可能处于这个三角形的这个位置</p><p>如果他想这样直接走过去可能就走不过去</p><p>当然 如果说 这个三角形面积小于角色的横截面面积时</p><p>可能角色就永远都无法到达</p><p>同样的我们在生成网格时</p><p>需要考虑好垂直方向的一个节点问题</p><p>不知道大家有用像ue或者unity这样的引擎没</p><p>他们里面就自带导航网格这个功能,</p><p>他在生成网格前就需要设置一些参数：</p><p>角色 半径，斜坡角度，障碍物这些</p><p>当然现在引擎里的一些navmesh的实现方式</p><p>跟我们现在讲的都差不多</p><p>不过还是会有一些优化点的</p><p>比如说我们把节点放在多边形的边上</p><p>这样可以不去判断同一个多边形两节点的连通性</p><p>因为凸底多边形的每一条边都可以从其他的每一条边看到。</p><p>还有的优化是把节点放在多边形边上且可以在边上移动</p><p>始终让角色与一些 节点是在一条线上</p><p>保证了寻路的连续性</p><p>下面咱们来聊聊行为决策</p><h2 id="行为决策" tabindex="-1"><a class="header-anchor" href="#行为决策"><span>行为决策</span></a></h2><p>ppt</p><p>我们在游戏中一般会用这三种因为</p><p>前两种一般用的会多一些</p><p>第三种会少一些，它是一种结果导向的行为制定</p><p>会有一定的不可控 性</p><p>ptt</p><p>在讲之前我们先播放一个视频把</p><p>这里一个 打架的 一个视频</p><p>这个是一个 典型的AI</p><p>有很多方法去制作这个怪的AI 行为</p><p>一个状态机 一个行为树 都可以</p><p>待会我们来聊聊分别怎么实现的</p><p>大家可以看看 休息休息</p><p>也想想如果让你来做 你会怎么来做这个AI</p><p>这个游戏是巫师三 是比较早几年的游戏</p><p>也是一款非常优秀的游戏</p><p>是我很喜欢一个游戏 我是这两年才开始玩这种主机游戏</p><p>之前我是做手游的 基本还是刷的一些手机游戏</p><p>我记得当时家里pc带不动这个游戏</p><p>就买了个ps 然后 每天早上6点就起来打游戏</p><p>打到8点过就去上班</p><p>在玩了这个游戏后 我就想要做这种游戏</p><p>所以就来了咱们公司 所以 说啊</p><p>兴趣很是重要</p><p>咱么可以看到 这个怪在远距离 和在近距离时</p><p>它的行为模式是不一样的</p><p>所以是基于一些规则来AI的制作</p><p>他也是比较传统的</p><p>他在远处时就会跳到我们面前疯砍一波</p><p>在近处时，格挡我们的攻击并且撒药给我们</p><p>在受伤后会立即远离我们</p><h4 id="有限状态机" tabindex="-1"><a class="header-anchor" href="#有限状态机"><span>有限状态机</span></a></h4><p>ppt</p><p>我们需要使用状态机来简单的解释这个 怪的AI</p><p>那我们先看有限状态机的概念是什么</p><p>有限状态机顾名思义 就是 有限多个状态</p><p>之间可以转移的一个数学模型</p><p>那状态代表着对象的某种形态</p><p>也可以是一些属性，一些行为</p><p>每个角色同时且有一个状态</p><p>转移就是表明状态之间的变更</p><p>转移是通过一些条件来满足的</p><p>他有两个特性 ，离散性 和 有限性</p><p>离散性就是说</p><p>每个状态与每个状态之间是独立的</p><p>有限性是 他状态不会无线对</p><p>我们使用状态机来解释这个AI</p><p>ppt</p><p>就显而易见 就可以把怪物分为四个状态</p><p>近处攻击，远处冲刺，待机，虚弱状态</p><p>首先怪物在待机状态，玩家进入近距离攻击范围，就使用近处攻击</p><p>玩家进入远程攻击范围了，就使用 冲刺攻击</p><p>再被打中后 后进去虚弱状态 撤退</p><p>这么一个简单的模型就可以定义出怪物的AI行为</p><p>ppt</p><p>那么我们想状态机有什么缺点么？</p><p>状态机切实很好用 不仅可以使用在AI编程中</p><p>我们普通的实现也可以使用状态机</p><p>比如说我们的游戏框架，每个流程就是一个状态，</p><p>游戏开始，获取版本号，请求更新，对比资源，更新资源，加载资源</p><p>但是他的缺点也很明显</p><p>就是我们的状态过多的时候</p><p>并且连接很多 是不是 就会看起来非常的混乱</p><p>难以维护</p><p>怎解决这个问题呢</p><p>ppt</p><p>我们有一个分层的概念</p><p>假设我们现在有这几个状态</p><p>冲刺，搜索，攻击 ，待机，睡觉</p><p>在不分层的情况下 他们两两都会有联系</p><p>那么分层的情况下</p><p>我们可以分层 战斗，休息两层</p><p>每层内部实现转移</p><p>每一层中设置一个默认状态</p><p>这样 一个分类 就可以 把混乱的关系 稍微 减轻一些</p><p>我们上面讲A*的启发式方法时，是不是 也有一个归类的方法</p><p>其实在编程中你会发现最开始 的实现都是简单粗暴的</p><p>人们所说的优化 其中有一部分都是 把大问题 归类拆分</p><p>也是不是又听起来有点像类的封装</p><p>像Unity动画机系统也是使用的 状态机 实现的 他也有分层 的 一个概念对吧</p><p>所以说这个状态机这种方式 不一定 在AI编程中会用到</p><p>在游戏的编程里可以说是随处可见</p><p>很常用的设计模式</p><p>这时有限状态机来实现怪物的行为</p><p>ppt</p><p>我们来看看行为树是怎么做？</p><p>顾名思义它是一颗树的结构</p><p>他是有 条件节点，行为节点 和复合节点组成的</p><p>复合节点是整个行为树的执行逻辑吧</p><p>条件节点，行为节点有时候统一叫做行为节点</p><p>也就是具体执行的内容是什么</p><p>每个节点都有一个返回值：success，failed，running</p><p>表示他们现在的 一个状态是什么</p><p>其中复合节点中就包含了：</p><p>选择节点和顺序节点</p><p>选择节点的执行逻辑是从左到右依次执行它的子节点直到执行到子节点返回值为 成功</p><p>那么选择节点就就返回 成功 如果所有子节点为返回失败,那么他就返回失败</p><p>顺序节点跟选择节点恰恰相反</p><p>从左到右依次执行他的子节点直到执行到子节点返回 失败</p><p>那么顺序节点就返回 失败</p><p>有点像并与或的计算方式</p><p>我们 就以刚才视频为例子</p><p>首先我们从根节点开始</p><p>进入第一个选择器</p><p>然后进到顺序节点</p><p>如果发现周围有玩家</p><p>那就进入下一个选择节点</p><p>进入下面的顺序节点</p><p>依次执行下面几个顺序节点</p><p>直到有一个顺序节点执行成功</p><p>返回 成功</p><p>咱么就退出这个选择节点</p><p>最后推导根节点</p><p>这样我们的一颗树在这一帧就遍历完成</p><p>ppt</p><p>行为树的优势</p><p>就在在于他的逻辑很清晰</p><p>我们看到树的图 就可以知道整个逻辑</p><p>行为的数据和逻辑是分离的</p><p>我们的叶子节点 可以放在任意一个复合节点下</p><p>也就是说他的复用性也很高</p><p>可视化方便修改</p><p>他的劣势也很明显</p><p>我们在运行AI逻辑时</p><p>在每一帧我们都需要去遍历整个树</p><p>如果说树的深度过大 这里遍历开销就会很大</p><p>针对这样一个劣势我们怎么 去改变呢</p><p>ppt</p><p>如果说是成功的情况我们是不是可以固定知道下一个节点是什么</p><p>同样如果是失败的情况下我们是不是也是可以固定知道下一个节点是什么</p><p>那么我们整理出来这里两个数组</p><p>我们是不是就可以直接遍历数组即可</p><p>就不需要去遍历复合节点</p><p>当然我们也可以接合状态机来使用</p><p>当一个角色在一个状态时就可以设置一个小的树</p><p>这样我们就可以不去遍历整个大树</p><p>当然它的优化方式还有很多</p><p>咱们今天就不一一介绍了</p><p>那么我们介绍的额行为树 就先 这样了</p><p>ppt</p><p>其实GOAP 也可以是实现怪物的AI行为</p><p>不过一般都不这么用</p><p>我们先看看GOAP的概念是什么</p><p>就是我们有一个目标，并且有一堆行为</p><p>从中选出符合当前 环境并且可以达成目标的行为</p><p>再根据一些规则，如优先级啥的</p><p>最后选择执行的行为以达到目标</p><p>当然这个行为可能是一个也可能是一些列</p><p>这一般会运行到一些结果导向的AI行为中</p><p>虚拟人生也是使用这个方法来做的AI</p><p>我们是不是感觉有点似曾相识,有一个目标,有一堆行为.</p><p>这不就是A*算法吗?我们需要从一堆行中找到一个列为列表来达成这个目标.</p><p>就需要使这个列表最短最有效,这个算法叫IDA*,有兴趣的同学可以下来看看</p><p>他的流程跟A*差不多的.</p><p>ppt</p><p>他的优点就是 十分灵活</p><p>比如说我们有很多行为都可以去实现这个目标</p><p>每次可能选择出来的都是不一样的行为</p><p>这就让玩家眼前一亮</p><p>缺点也很明显 他并不可控</p><p>比如说 角色在野外战斗后需要回血</p><p>你可以吃药也可以打坐</p><p>如果说是吃药还好 但是打坐的话 并不确定说周围环境是否十分安全</p><p>那我们所有行为决策就讲完了</p><p>其实一款游戏里并不是说只有一种行为决策的方案</p><p>很多游戏都会涉及到多个的组合</p><p>当然行为角色还有一些方案 比如说模糊行为决策，规则系统。</p><p>这些都是基于我们讲的这几个所分化出来的</p><h2 id="策略" tabindex="-1"><a class="header-anchor" href="#策略"><span>策略</span></a></h2><p>下面我们讲讲游戏里AI的战略系统</p><p>这个在很多游戏里是没有的</p><p>咱们就简单介绍一下这些</p><p>ppt</p><p>第一个是战术点</p><p>比如说在射击游戏里有埋伏点，掩体点等等</p><p>我们都可以利用这些点来制作战术策略</p><p>在moba游戏里的草丛可以隐藏角色</p><p>这些都算是战术点位</p><p>一般是在关卡编辑时就配置好</p><p>ppt</p><p>第二个 就是战略分析</p><p>是指咱们通过一些工具获取到当前游戏环境的信息</p><p>然后根据这些信息去调用行为决策，寻路等</p><p>一般使用到工具有</p><p>Influence Map</p><p>它的功能跟名字差不多 就是影响力</p><p>我们对游戏地图格子化</p><p>然后对一些信息与地点映射</p><p>比如说对于AI单位危险程度，在地图中有个很厉害的角色它的战力就可以与地点映射起来</p><p>我们在感知周围环境时 就不需要去挨着计算每个角色的战力然后计算距离 来判断 当前 我是否安全</p><p>可以直接从这个图中获得信息</p><p>一个简单的例子,比如抢滩登陆,其中敌人的手中的武器就可以影响到玩家走那条路.那我们在制作闯关的AI时,就可以通过敌人的武器强度来映射到地图上,然后我们在设置寻路时,是不是就可以对这些节点增加巨量的花费或者预估值来绕过这些节点.</p><p>下一个是地图分析</p><p>这个就是字面意思</p><p>这个跟战术点有一点像</p><p>就是角色在移动时，检测周围的地形 获得信息</p><p>比如我们射击游戏，就需要占领高地或者是房子城堡</p><p>这样是易守难攻对吧</p><p>ppt</p><p>最后一个是合作行为</p><p>首先是多层AI，因为我们每个角色都有自己的AI控制，他有一个行为树或状态机去控制它,当有一堆角色时，我们如何去分配。</p><p>像RTS游戏里一样的，我们在通过分析得到一个行为后，对每一个角色使用一样的行为</p><p>这大概率会有一定为奇怪的表现,比如我们通常会让重型兵冲锋,输出兵放后面.那我们需要怎么去协调他们移动.</p><p>最后就是战术层面的，比如我们英雄联盟 如何打好一场团战，这个是需要咱们好好的设计的 。</p><p>那么我们这个策略 方面的东西就讲完了，这里我们讲的比较沈略</p><p>都是基本介绍了一下会有哪些问题，大概是怎么处理的</p><p>因为我们时间有限 并且 这方面 不是 所有游戏都会涉及</p><p>所以讲的比较少 如果大家感兴趣的话</p><p>我会 给大家一些 资料 大家可以阅读一下</p><p>那么今天我们的这个AI课程就完了</p><p>当然还有很多 很多关于 AI的 内容可以去挖掘</p><p>今天 所讲的 基本都是一些基础设施</p><p>现在很多的 应用都 会 基于它做扩展</p><p>我们这个课程的目的 就是让 大家对AI有一个 大概的了解</p><p>谢谢大家</p>',650)]))}const A=e(l,[["render",s],["__file","TraineeAI.html.vue"]]),d=JSON.parse('{"path":"/Gameplay/AI/%E6%B8%B8%E6%88%8FAI%E8%AF%BE%E7%A8%8B/TraineeAI.html","title":"游戏人工智能","lang":"en-US","frontmatter":{"date":"2021-11-13T09:20:19.000Z","feed":false,"seo":false},"headers":[{"level":2,"title":"游戏人工智能引论","slug":"游戏人工智能引论","link":"#游戏人工智能引论","children":[{"level":3,"title":"为什么玩游戏","slug":"为什么玩游戏","link":"#为什么玩游戏","children":[]},{"level":3,"title":"游戏是什么","slug":"游戏是什么","link":"#游戏是什么","children":[]},{"level":3,"title":"什么是人工智能","slug":"什么是人工智能","link":"#什么是人工智能","children":[]},{"level":3,"title":"人工智能为游戏带来了什么","slug":"人工智能为游戏带来了什么","link":"#人工智能为游戏带来了什么","children":[]}]},{"level":2,"title":"人工智能应用在游戏中的难点","slug":"人工智能应用在游戏中的难点","link":"#人工智能应用在游戏中的难点","children":[{"level":3,"title":"人工智能的应用","slug":"人工智能的应用","link":"#人工智能的应用","children":[]}]},{"level":2,"title":"游戏性AI 模型","slug":"游戏性ai-模型","link":"#游戏性ai-模型","children":[]},{"level":2,"title":"移动  &  导航","slug":"移动-导航","link":"#移动-导航","children":[{"level":3,"title":"移动","slug":"移动","link":"#移动","children":[]},{"level":3,"title":"导航","slug":"导航","link":"#导航","children":[]}]},{"level":2,"title":"行为决策","slug":"行为决策","link":"#行为决策","children":[]},{"level":2,"title":"策略","slug":"策略","link":"#策略","children":[]}],"git":{"createdTime":1636766419000,"updatedTime":1706518071000,"contributors":[{"name":"BanMing","email":"ban-ming@foxmail.com","commits":2},{"name":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":1}]},"readingTime":{"minutes":34.34,"words":10303},"filePathRelative":"Gameplay/AI/游戏AI课程/TraineeAI.md","localizedDate":"November 13, 2021"}');export{A as comp,d as data};
