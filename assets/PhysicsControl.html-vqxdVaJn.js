import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as s,f as t,o as e}from"./app-B9XMli38.js";const o="/assets/2025-05-07-13-31-03-B-6h9btx.png",i="/assets/2025-05-17-19-06-56-BM5mR6cQ.png",l="/assets/2025-05-17-19-51-24-umvCx0fZ.png",r="/assets/2025-05-28-23-02-29-BYvVQj1L.gif",p="/assets/2025-05-28-23-03-56-BFlxuwBv.png",d="/assets/2025-05-28-23-05-35-CJWt-7Hh.png",c="/assets/2025-05-28-23-07-55-CXDLKkhc.png",u="/assets/2025-05-28-23-09-51-DE9-of2v.png",h="/assets/2025-05-28-23-10-53-BLNJlmSO.png",m="/assets/2025-05-19-22-07-27-dEA_BgZj.gif",b="/assets/2025-05-27-23-07-39-BbcfmTd3.png",g={};function f(k,a){return e(),s("div",null,a[0]||(a[0]=[t('<h1 id="physics-control" tabindex="-1"><a class="header-anchor" href="#physics-control"><span>Physics Control</span></a></h1><p>物理控制组件允许您创建和管理多个控件，通常每个身体部位可以有多个控件。</p><p>分为两大类：</p><h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念"><span>基础概念</span></a></h2><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="control" tabindex="-1"><a class="header-anchor" href="#control"><span>Control</span></a></h3><p>用于控制一个物理体相对于另一个物理体或者世界空间下，这些控制通过物理弹簧或者阻尼器驱动。这些控件可以在世界空间或父空间（类似于肌肉）中工作。每个控件都可以控制任意一对骨骼网格或静态网格（甚至是演员以外的网格）</p><h4 id="创建" tabindex="-1"><a class="header-anchor" href="#创建"><span>创建</span></a></h4><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中是<code>Control Data</code>是<a href="https://github.com/EpicGames/UnrealEngine/blob/2d53fcab0066b1f16dd956b227720841cad0f6f7/Engine/Plugins/Experimental/PhysicsControl/Source/PhysicsControl/Public/PhysicsControlData.h#L535" target="_blank" rel="noopener noreferrer">FPhysicsControlData</a>结构体,用来控制阻尼弹簧模型，其基本原理公式如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">力 = 弹性系数 × (目标位置 - 当前位置) - 阻尼系数 × 当前速度</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该结构体变量解释如下：</p><h4 id="线性运动控制参数" tabindex="-1"><a class="header-anchor" href="#线性运动控制参数"><span>线性运动控制参数</span></a></h4><table><thead><tr><th>参数</th><th>物理意义</th><th>典型值范围</th><th>效果说明</th></tr></thead><tbody><tr><td><code>LinearStrength</code></td><td>弹簧弹性系数 (k)</td><td>≥0</td><td>值越大，物体越&quot;强硬&quot;地趋向目标位置</td></tr><tr><td><code>LinearDampingRatio</code></td><td>阻尼比 (ζ)</td><td>≥0</td><td>1=临界阻尼，&lt;1=欠阻尼(振荡)，&gt;1=过阻尼(缓慢)</td></tr><tr><td><code>LinearExtraDamping</code></td><td>额外阻尼系数</td><td>≥0</td><td>即使Strength=0也能提供阻尼效果</td></tr><tr><td><code>MaxForce</code></td><td>最大施加力</td><td>≥0</td><td>限制弹簧能施加的最大力，防止剧烈运动</td></tr></tbody></table><h4 id="旋转运动控制参数" tabindex="-1"><a class="header-anchor" href="#旋转运动控制参数"><span>旋转运动控制参数</span></a></h4><table><thead><tr><th>参数</th><th>物理意义</th><th>典型值范围</th><th>效果说明</th></tr></thead><tbody><tr><td><code>AngularStrength</code></td><td>旋转弹性系数</td><td>≥0</td><td>控制旋转趋向目标角度的强度</td></tr><tr><td><code>AngularDampingRatio</code></td><td>旋转阻尼比</td><td>≥0</td><td>类似线性阻尼但作用于旋转</td></tr><tr><td><code>AngularExtraDamping</code></td><td>额外旋转阻尼</td><td>≥0</td><td>独立于AngularStrength的阻尼</td></tr><tr><td><code>MaxTorque</code></td><td>最大扭矩</td><td>≥0</td><td>限制旋转控制的最大扭矩</td></tr></tbody></table><h4 id="目标速度处理" tabindex="-1"><a class="header-anchor" href="#目标速度处理"><span>目标速度处理</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">float</span> LinearTargetVelocityMultiplier<span class="token punctuation">;</span>  <span class="token comment">// 线性目标速度乘数</span></span>
<span class="line"><span class="token keyword">float</span> AngularTargetVelocityMultiplier<span class="token punctuation">;</span> <span class="token comment">// 角度目标速度乘数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这些参数控制如何处理目标物体的速度：</p><ul><li><strong>1.0</strong>：完全跟随目标速度（适合角色动画）</li><li><strong>0.0</strong>：忽略目标速度，仅基于位置控制（像普通弹簧）</li><li><strong>中间值</strong>：部分跟随目标速度</li></ul><h4 id="骨骼动画集成" tabindex="-1"><a class="header-anchor" href="#骨骼动画集成"><span>骨骼动画集成</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">float</span> SkeletalAnimationVelocityMultiplier<span class="token punctuation">;</span> <span class="token comment">// 骨骼动画速度乘数</span></span>
<span class="line">uint8 bUseSkeletalAnimation <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment">// 是否使用骨骼动画</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这些参数实现了物理与动画的混合：</p><ul><li>当<code>bUseSkeletalAnimation=true</code>时，物理系统会尝试匹配骨骼动画的运动</li><li><code>SkeletalAnimationVelocityMultiplier</code>控制动画影响的强度</li></ul><h4 id="控制点系统" tabindex="-1"><a class="header-anchor" href="#控制点系统"><span>控制点系统</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line">FVector CustomControlPoint<span class="token punctuation">;</span>      <span class="token comment">// 自定义控制点位置</span></span>
<span class="line">uint8 bUseCustomControlPoint <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 是否使用自定义控制点</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>控制物理作用的&quot;抓取点&quot;：</p><ul><li>默认使用物体质心</li><li>可指定自定义偏移点（如抓取物体的边缘）</li></ul><h4 id="行为控制标志" tabindex="-1"><a class="header-anchor" href="#行为控制标志"><span>行为控制标志</span></a></h4><table><thead><tr><th>标志</th><th>作用</th><th>使用场景</th></tr></thead><tbody><tr><td><code>bEnabled</code></td><td>总开关</td><td>临时禁用控制而不删除</td></tr><tr><td><code>bDisableCollision</code></td><td>禁用碰撞</td><td>连接体之间的无碰撞</td></tr><tr><td><code>bOnlyControlChildObject</code></td><td>仅控制子物体</td><td>层级控制中的局部控制</td></tr></tbody></table><h4 id="常用的方法" tabindex="-1"><a class="header-anchor" href="#常用的方法"><span>常用的方法</span></a></h4><table><thead><tr><th><strong>方法</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td>bool SetControlData(...);</td><td>完整数据设置</td></tr><tr><td>bool SetControlSparseData(...);</td><td>部分数据更新</td></tr><tr><td>bool SetControlMultiplier(...);</td><td>乘数设置</td></tr><tr><td>bool SetControlTarget(...);</td><td>完整目标设置 FPhysicsControlTarget（位置，速度，方向，角速度）</td></tr><tr><td>bool SetControlTargetPositionAndOrientation(...);</td><td>位置+旋转</td></tr><tr><td>bool SetControlTargetPosition(...);</td><td>仅位置</td></tr><tr><td>bool SetControlTargetOrientation(...);</td><td>仅旋转</td></tr><tr><td>bool SetControlUseSkeletalAnimation(...);</td><td>支持将动画目标与物理控制混合</td></tr></tbody></table><h3 id="body-modifier" tabindex="-1"><a class="header-anchor" href="#body-modifier"><span>Body Modifier</span></a></h3><p>用于更新物理体的物理属性，比如使用模拟还是运行，或者它们是否有重力。躯体修改器用于修改物理躯体的模拟属性，例如调整重力效果，或在模拟运动和运动学运动之间切换。</p><h4 id="创建-1" tabindex="-1"><a class="header-anchor" href="#创建-1"><span>创建</span></a></h4><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果<code>Set</code>没有设置，会自动加入<code>All</code>集合。</p><h4 id="fphysicscontrolmodifierdata" tabindex="-1"><a class="header-anchor" href="#fphysicscontrolmodifierdata"><span>FPhysicsControlModifierData</span></a></h4><p>创建使用的参数是<a href="https://github.com/EpicGames/UnrealEngine/blob/2d53fcab0066b1f16dd956b227720841cad0f6f7/Engine/Plugins/Experimental/PhysicsControl/Source/PhysicsControl/Public/PhysicsControlData.h#L210" target="_blank" rel="noopener noreferrer">FPhysicsControlModifierData</a></p><table><thead><tr><th><strong>名称</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td>MovementType (EPhysicsMovementType)</td><td>定义物体应该如何移动<br>- Simulated：完全物理模拟<br>- Kinematic：运动学物体（不受力影响）<br>- Static：静态物体<br>- 角色死亡时可能从 Kinematic 切换为 Simulated 实现布娃娃效果<br>- 拾取物品时可能从 Simulated 切换为 Kinematic</td></tr><tr><td>CollisionType (ECollisionEnabled::Type)</td><td>定义碰撞类型<br>- QueryOnly：仅用于射线检测等查询<br>- PhysicsOnly：仅用于物理碰撞<br>- QueryAndPhysics：两者兼具<br>- None：完全禁用碰撞</td></tr><tr><td>GravityMultiplier (float)</td><td>模拟时的重力乘数</td></tr><tr><td>PhysicsBlendWeight (float)</td><td>从模拟转换回动画时，模拟输出与原始动画输入的混合权重<br>- 平滑过渡：从0渐变到1实现自然的物理接管效果<br>- 部分控制：保持0.5实现动画与物理的混合</td></tr><tr><td>bUseSkeletalAnimation (bool)</td><td>影响动画蓝图和物理模拟的更新顺序<br>- True：物理模拟在动画之后应用（如衣服模拟）<br>- False：完全由物理驱动（如布娃娃）</td></tr><tr><td>bUpdateKinematicFromSimulation (bool)</td><td>- 确保运动学物体与模拟物体保持同步<br>- 解决由于帧延迟导致的&quot;撕裂&quot;问题<br>- 如果为true，当关联的actor是运动学时，其变换将从模拟中更新<br>- 开启时会增加每帧的变换更新开销<br>- 但能避免视觉异常，特别是在高速移动时</td></tr></tbody></table><h4 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法</span></a></h4><table><thead><tr><th>方法</th><th>介绍</th></tr></thead><tbody><tr><td>bool DestroyBodyModifier(...);</td><td>销毁单个修改器</td></tr><tr><td>bool SetBodyModifierData(...);</td><td>完整设置修改器数据</td></tr><tr><td>bool SetBodyModifierSparseData(...);</td><td>稀疏数据更新（只更新设置过的字段）</td></tr><tr><td>bool SetBodyModifierKinematicTarget(...);</td><td>设置运动学目标变换</td></tr><tr><td>bool SetBodyModifierMovementType(...);</td><td>设置运动类型（模拟/运动学/静态）</td></tr><tr><td>bool SetBodyModifierCollisionType(...);</td><td>设置碰撞类型</td></tr><tr><td>bool SetBodyModifierGravityMultiplier(...);</td><td>设置重力乘数</td></tr><tr><td>bool SetBodyModifierPhysicsBlendWeight(...);</td><td>设置物理混合权重（动画与模拟之间的混合）</td></tr><tr><td>bool SetBodyModifierUseSkeletalAnimation(...);</td><td>设置是否使用骨骼动画</td></tr><tr><td>bool SetBodyModifierUpdateKinematicFromSimulation(...);</td><td>设置是否从模拟结果更新运动学</td></tr><tr><td>bool ResetBodyModifierToCachedBoneTransform(...);</td><td>将身体重置为缓存的骨骼变换，谨慎使用每帧重置</td></tr></tbody></table><h3 id="world-space和parent-space" tabindex="-1"><a class="header-anchor" href="#world-space和parent-space"><span>World Space和Parent Space</span></a></h3><h4 id="parent-space-父空间" tabindex="-1"><a class="header-anchor" href="#parent-space-父空间"><span>Parent Space（父空间）</span></a></h4><ul><li>定义：以父骨骼或物体的局部坐标系为参考的空间。</li><li>特点：物理约束的计算基于父骨骼的局部坐标系，子物体的运动受父物体变换的影响。</li><li>示例：角色手臂的物理约束若设置为Parent Space，则手臂的旋转和位移会相对于肩部骨骼的局部坐标系计算。</li></ul><h4 id="world-space-世界空间" tabindex="-1"><a class="header-anchor" href="#world-space-世界空间"><span>World Space（世界空间）</span></a></h4><ul><li>定义：以游戏世界原点为参考的全局坐标系。</li><li>特点：物理约束的计算独立于父物体，直接基于世界坐标系。</li><li>示例：角色脊椎的物理约束若设置为World Space，则其位置和旋转会直接受世界坐标系控制，不受角色整体旋转的影响。</li></ul><h4 id="应用场景对比" tabindex="-1"><a class="header-anchor" href="#应用场景对比"><span>应用场景对比</span></a></h4><table><thead><tr><th>场景</th><th>Parent Space</th><th>World Space</th></tr></thead><tbody><tr><td>关节控制</td><td>四肢运动（如手臂、腿部弯曲）</td><td>脊椎或身体核心部位的全局定位</td></tr><tr><td>物理交互</td><td>角色行走时腿部关节的自然跟随</td><td>角色背靠座椅时脊椎的固定位置</td></tr><tr><td>参数调整</td><td>角强度（AngularStrength）为主</td><td>线性力（LinearStrength）和角强度结合</td></tr><tr><td>典型案例</td><td>角色奔跑时膝盖的弯曲</td><td>角色抓握方向盘时手部的全局定位</td></tr></tbody></table><h3 id="createcontrolsandbodymodifiersfromlimbbones" tabindex="-1"><a class="header-anchor" href="#createcontrolsandbodymodifiersfromlimbbones"><span>CreateControlsAndBodyModifiersFromLimbBones</span></a></h3><p>常用于创建角色一系列物理控制和身体修改器，主要根据<code>LimbSetupData</code>数据创建三种类型的物理控制元素：</p><ul><li>世界空间控制(World-space controls)</li><li>父空间控制(Parent-space controls)</li><li>身体修改器(Body modifiers)</li></ul><h4 id="输出参数-引用传递" tabindex="-1"><a class="header-anchor" href="#输出参数-引用传递"><span>输出参数（引用传递）</span></a></h4><ul><li>AllWorldSpaceControls：存储所有世界空间控制</li><li>LimbWorldSpaceControls：按肢体分类存储世界空间控制(映射表，键为肢体名)</li><li>AllParentSpaceControls：存储所有父空间控制</li><li>LimbParentSpaceControls：按肢体分类存储父空间控制</li><li>AllBodyModifiers：存储所有身体修改器</li><li>LimbBodyModifiers：按肢体分类存储身体修改器</li></ul><h4 id="输入参数" tabindex="-1"><a class="header-anchor" href="#输入参数"><span>输入参数</span></a></h4><ul><li>SkeletalMeshComponent：目标骨骼网格组件，将对其施加物理控制</li><li>LimbSetupData：肢体设置数据数组，定义如何创建各个肢体的控制</li><li>WorldSpaceControlData：世界空间控制的默认参数</li><li>ParentSpaceControlData：父空间控制的默认参数</li><li>BodyModifierData：身体修改器的默认参数</li><li>WorldComponent：(可选)指定&quot;世界&quot;对象的网格组件，使世界控制可以在另一个对象空间中工作</li><li>WorldBoneName：(可选)如果WorldComponent是骨骼网格，可以指定特定的骨骼名</li></ul><h4 id="fphysicscontrollimbsetupdata" tabindex="-1"><a class="header-anchor" href="#fphysicscontrollimbsetupdata"><span>FPhysicsControlLimbSetupData</span></a></h4><table><thead><tr><th>名称</th><th>介绍</th></tr></thead><tbody><tr><td>LimbName</td><td>要创建的肢体名称</td></tr><tr><td>StartBone</td><td>- 通常是肢体中最靠近根部的骨骼<br>- 例如定义左臂时可能是左锁骨(left clavicle)<br>- 肢体将包含此骨骼及其子骨骼</td></tr><tr><td>bIncludeParentBone</td><td>- 是否包含起始骨骼的父骨骼<br>- 用于像脊柱这样的肢体，你可能想包含骨盆(脊柱的父骨骼)</td></tr><tr><td>bCreateWorldSpaceControls</td><td>是否为该肢体创建世界空间控制</td></tr><tr><td>bCreateParentSpaceControls</td><td>是否为该肢体创建父空间控制</td></tr><tr><td>bCreateBodyModifiers</td><td>是否为该肢体创建身体修改器</td></tr></tbody></table><h4 id="创建核心逻辑" tabindex="-1"><a class="header-anchor" href="#创建核心逻辑"><span>创建核心逻辑</span></a></h4><p>控制元素的创建：</p><ul><li>为每个肢体创建三种控制元素(根据LimbSetupData中的标志决定是否创建)</li><li>使用传入的ControlData和ModifierData作为默认参数</li></ul><p>分类存储机制，每个创建的控制元素会被添加到三个集合中：</p><ul><li>&quot;All&quot;集合(包含所有该类型的控制)</li><li>&quot;ControlType&quot;集合(如&quot;WorldSpace&quot;或&quot;ParentSpace&quot;)</li><li>&quot;ControlType_LimbName&quot;集合(如&quot;WorldSpace_ArmLeft&quot;)</li></ul><p>每个身体修改器会被添加到：</p><ul><li>&quot;All&quot;集合</li><li>&quot;LimbName&quot;集合(如&quot;Spine&quot;或&quot;LegRight&quot;)</li></ul><p>世界空间控制的可定制性：</p><ul><li>通过WorldComponent参数，可以指定世界控制基于另一个对象的空间</li><li>如果WorldComponent是骨骼网格，还可以指定特定的骨骼(WorldBoneName)</li></ul><h2 id="使用例子" tabindex="-1"><a class="header-anchor" href="#使用例子"><span>使用例子</span></a></h2><h3 id="物理方块" tabindex="-1"><a class="header-anchor" href="#物理方块"><span>物理方块</span></a></h3><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建步骤：</p><ul><li>创建一个空的<code>Actor</code>并添加<code>Cube</code>!<br><img src="'+p+'" alt="" loading="lazy"></li><li>开启<code>Cube</code>的物理模拟并关闭重力<br><img src="'+d+'" alt="" loading="lazy"></li><li>添加<code>PhysicalControl</code>组件，值得注意的是该组件应该放在Cube下面，不然会出现控制不了的问题<br><img src="'+c+'" alt="" loading="lazy"></li><li>创建一个控制器，使<code>Cube</code>一直在<code>Actor</code>的位置 <br><img src="'+u+'" alt="" loading="lazy"></li><li><code>Control Data</code>的<code>LinearStrength</code>需要设置一下，初始化出来是0<br><img src="'+h+'" alt="" loading="lazy"></li></ul><h3 id="受击反馈" tabindex="-1"><a class="header-anchor" href="#受击反馈"><span>受击反馈</span></a></h3><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>设置约束描述文件：</p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如何锁住脚？</p><p>需要把骨骼网格的Physics Transform Update Mode 设置为 Component Transform is Kinematic</p><h3 id="单杠" tabindex="-1"><a class="header-anchor" href="#单杠"><span>单杠</span></a></h3><h3 id="控制骨骼蒙皮" tabindex="-1"><a class="header-anchor" href="#控制骨骼蒙皮"><span>控制骨骼蒙皮</span></a></h3><h3 id="角色物理动画" tabindex="-1"><a class="header-anchor" href="#角色物理动画"><span>角色物理动画</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// 设置一个柔软的身体物理控制</span></span>
<span class="line">ControlData<span class="token punctuation">.</span>LinearStrength <span class="token operator">=</span> <span class="token number">100.0f</span><span class="token punctuation">;</span></span>
<span class="line">ControlData<span class="token punctuation">.</span>LinearDampingRatio <span class="token operator">=</span> <span class="token number">0.8f</span><span class="token punctuation">;</span> <span class="token comment">// 轻微弹性</span></span>
<span class="line">ControlData<span class="token punctuation">.</span>bUseSkeletalAnimation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">ControlData<span class="token punctuation">.</span>SkeletalAnimationVelocityMultiplier <span class="token operator">=</span> <span class="token number">0.7f</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="物理抓取系统" tabindex="-1"><a class="header-anchor" href="#物理抓取系统"><span>物理抓取系统</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// 设置一个稳定的物体抓取控制</span></span>
<span class="line">ControlData<span class="token punctuation">.</span>LinearStrength <span class="token operator">=</span> <span class="token number">500.0f</span><span class="token punctuation">;</span></span>
<span class="line">ControlData<span class="token punctuation">.</span>LinearDampingRatio <span class="token operator">=</span> <span class="token number">1.2f</span><span class="token punctuation">;</span> <span class="token comment">// 过阻尼避免振动</span></span>
<span class="line">ControlData<span class="token punctuation">.</span>MaxForce <span class="token operator">=</span> <span class="token number">2000.0f</span><span class="token punctuation">;</span></span>
<span class="line">ControlData<span class="token punctuation">.</span>bUseCustomControlPoint <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">ControlData<span class="token punctuation">.</span>CustomControlPoint <span class="token operator">=</span> GrabLocationOffset<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布娃娃局部控制" tabindex="-1"><a class="header-anchor" href="#布娃娃局部控制"><span>布娃娃局部控制</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// 仅控制上半身物理</span></span>
<span class="line">ControlData<span class="token punctuation">.</span>AngularStrength <span class="token operator">=</span> <span class="token number">50.0f</span><span class="token punctuation">;</span></span>
<span class="line">ControlData<span class="token punctuation">.</span>AngularDampingRatio <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">;</span></span>
<span class="line">ControlData<span class="token punctuation">.</span>bOnlyControlChildObject <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">ControlData<span class="token punctuation">.</span>bDisableCollision <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布娃娃系统" tabindex="-1"><a class="header-anchor" href="#布娃娃系统"><span>布娃娃系统</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// 创建全身修改器</span></span>
<span class="line">TArray<span class="token operator">&lt;</span>FName<span class="token operator">&gt;</span> Modifiers <span class="token operator">=</span> PhysicsControlComp<span class="token operator">-&gt;</span><span class="token function">CreateBodyModifiersFromSkeletalMeshBelow</span><span class="token punctuation">(</span></span>
<span class="line">    SkeletalMeshComp<span class="token punctuation">,</span> </span>
<span class="line">    <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token boolean">true</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;All&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">FPhysicsControlModifierData</span><span class="token punctuation">(</span></span>
<span class="line">        EPhysicsMovementType<span class="token double-colon punctuation">::</span>Simulated<span class="token punctuation">,</span></span>
<span class="line">        ECollisionEnabled<span class="token double-colon punctuation">::</span>QueryAndPhysics<span class="token punctuation">,</span></span>
<span class="line">        <span class="token number">1.0f</span><span class="token punctuation">,</span>  <span class="token comment">// Gravity</span></span>
<span class="line">        <span class="token number">1.0f</span><span class="token punctuation">,</span>  <span class="token comment">// Physics blend</span></span>
<span class="line">        <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// bUseSkeletalAnimation</span></span>
<span class="line">        <span class="token boolean">true</span>   <span class="token comment">// bUpdateKinematicFromSimulation</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 禁用动画影响</span></span>
<span class="line">PhysicsControlComp<span class="token operator">-&gt;</span><span class="token function">SetBodyModifiersUseSkeletalAnimation</span><span class="token punctuation">(</span>Modifiers<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="物理抓取物体" tabindex="-1"><a class="header-anchor" href="#物理抓取物体"><span>物理抓取物体</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// 设为运动学并保持碰撞</span></span>
<span class="line">ModifierData<span class="token punctuation">.</span>MovementType <span class="token operator">=</span> EPhysicsMovementType<span class="token double-colon punctuation">::</span>Kinematic<span class="token punctuation">;</span></span>
<span class="line">ModifierData<span class="token punctuation">.</span>CollisionType <span class="token operator">=</span> ECollisionEnabled<span class="token double-colon punctuation">::</span>QueryAndPhysics<span class="token punctuation">;</span></span>
<span class="line">ModifierData<span class="token punctuation">.</span>GravityMultiplier <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span> <span class="token comment">// 抓取时忽略重力</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动画-物理混合" tabindex="-1"><a class="header-anchor" href="#动画-物理混合"><span>动画-物理混合</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// 50%混合动画和物理</span></span>
<span class="line">ModifierData<span class="token punctuation">.</span>PhysicsBlendWeight <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span></span>
<span class="line">ModifierData<span class="token punctuation">.</span>bUseSkeletalAnimation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><h3 id="工作流" tabindex="-1"><a class="header-anchor" href="#工作流"><span>工作流</span></a></h3><h3 id="如何混合动画" tabindex="-1"><a class="header-anchor" href="#如何混合动画"><span>如何混合动画</span></a></h3><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/680470946" target="_blank" rel="noopener noreferrer">ContentExamples中的PhysicControl解析</a></li><li><a href="https://zhuanlan.zhihu.com/p/679061686" target="_blank" rel="noopener noreferrer">游戏中角色物理动画是什么？-以虚幻引擎的方案为例</a></li><li><a href="https://zhuanlan.zhihu.com/p/461813778" target="_blank" rel="noopener noreferrer">游戏开发中的阻尼器和阻尼弹簧</a></li><li><a href="https://theorangeduck.com/page/spring-roll-call" target="_blank" rel="noopener noreferrer">Spring-It-On: The Game Developer&#39;s Spring-Roll-Call</a></li><li><a href="https://www.youtube.com/watch?v=TmAU8aPekEo&amp;t=330s" target="_blank" rel="noopener noreferrer">Physical Animation in Star Wars Jedi: Fallen Order</a></li></ul>`,97)]))}const C=n(g,[["render",f],["__file","PhysicsControl.html.vue"]]),S=JSON.parse('{"path":"/GameEngine/Unreal/animation/PhysicsControl.html","title":"Physics Control","lang":"en-US","frontmatter":{"date":"2025-05-15T18:03:06.000Z","tag":["Unreal Engine","Animation"]},"git":{"createdTime":1745923753000,"updatedTime":1749049756000,"contributors":[{"name":"ban-ming@foxmail.com","username":"ban-ming@foxmail.com","email":"ban-ming@foxmail.com","commits":3,"url":"https://github.com/ban-ming@foxmail.com"},{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":8,"url":"https://github.com/BanMing"}]},"readingTime":{"minutes":9.53,"words":2859},"filePathRelative":"GameEngine/Unreal/animation/PhysicsControl.md","localizedDate":"May 15, 2025","excerpt":"\\n<p>物理控制组件允许您创建和管理多个控件，通常每个身体部位可以有多个控件。</p>\\n<p>分为两大类：</p>\\n<h2>基础概念</h2>\\n<figure><figcaption></figcaption></figure>\\n<h3>Control</h3>\\n<p>用于控制一个物理体相对于另一个物理体或者世界空间下，这些控制通过物理弹簧或者阻尼器驱动。这些控件可以在世界空间或父空间（类似于肌肉）中工作。每个控件都可以控制任意一对骨骼网格或静态网格（甚至是演员以外的网格）</p>\\n<h4>创建</h4>\\n<figure><figcaption></figcaption></figure>\\n<p>其中是<code>Control Data</code>是<a href=\\"https://github.com/EpicGames/UnrealEngine/blob/2d53fcab0066b1f16dd956b227720841cad0f6f7/Engine/Plugins/Experimental/PhysicsControl/Source/PhysicsControl/Public/PhysicsControlData.h#L535\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">FPhysicsControlData</a>结构体,用来控制阻尼弹簧模型，其基本原理公式如下：</p>"}');export{C as comp,S as data};
