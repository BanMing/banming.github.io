import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as e,o as t}from"./app-Dh12W6gx.js";const i="/assets/2025-02-04-14-10-14-BrwS4BpC.png",p="/assets/2025-02-04-14-11-21-Bo585LL7.png",o="/assets/2025-02-04-14-14-40-C9nyg9gt.png",l="/assets/2025-02-04-14-17-06-tMDHcRe9.png",c="/assets/2025-02-04-14-17-43-DhzTtU3d.png",r="/assets/2025-02-04-14-18-26-DBy2ThxD.png",u="/assets/2025-02-04-14-20-27-C7BXBlY0.png",d="/assets/2025-02-04-14-21-03-B3JQGi95.png",m="/assets/2025-02-04-14-21-32-CB7K0Ahn.png",g="/assets/2025-02-04-14-22-02-BMlPH6Xt.png",h="/assets/2025-02-04-14-23-46-CgK7DNdf.png",k="/assets/2025-02-04-14-26-00-Dx4YDr9f.png",f="/assets/2025-02-04-14-27-50-DXDb1cLJ.png",v="/assets/2025-02-04-14-28-18-CmvJNBVm.png",b="/assets/2025-02-04-14-29-03-TRxp5nZV.png",y="/assets/2025-02-04-14-29-30-7IGqNpts.png",w="/assets/2025-02-04-14-30-02-C-R7zNDL.png",x="/assets/2025-02-04-14-30-41-nCKgWDg7.png",_="/assets/2025-02-04-14-31-35-CeS_gQqB.png",A="/assets/2025-02-04-14-32-29-aab-qDzB.png",L="/assets/2025-02-04-14-33-07-DwwPI0_4.png",C="/assets/2025-02-04-14-35-33-CXZYETwC.png",S="/assets/2025-02-04-14-36-03-DZv3HmPM.png",B="/assets/2025-02-04-14-38-27-ChGk562L.png",D="/assets/2025-02-04-14-39-49-ByrAAI1Y.png",I="/assets/2025-02-04-14-40-30-D_lZsHOZ.png",T="/assets/2025-02-04-14-40-58-BxWpoLsq.png",z="/assets/2025-02-04-14-41-29-DdQ9jFKQ.png",F="/assets/2025-02-04-14-42-00-DI-ByC3x.png",M="/assets/2025-02-04-14-42-23-CcdgriaM.png",R="/assets/2025-02-04-14-43-09-Cs-0g2uA.gif",P="/assets/2025-02-04-14-44-12-CKS8v_0U.png",Y="/assets/2025-02-04-14-44-33-C81c9vyb.png",E="/assets/2025-02-04-14-45-31-DnK7-AMG.png",O="/assets/2025-02-04-14-47-05-kPrfrILR.png",J="/assets/2025-02-04-14-54-37-tyyc3iii.png",G="/assets/2025-02-04-14-55-06-MKkbhSHy.png",U="/assets/2025-02-04-14-55-32-CPC-KcGa.png",j="/assets/2025-02-04-15-45-57-BI4QmKHK.png",q="/assets/2025-02-04-15-46-28-Fvitb1ln.png",V="/assets/2025-02-04-15-48-00-InAZMg11.png",N="/assets/2025-02-04-15-49-17-Ren60j1Y.png",Z="/assets/2025-02-04-15-50-42-CFehrZu4.png",W="/assets/2025-02-04-15-51-18-C44YAta4.png",K="/assets/2025-02-04-15-52-04-BnxavSPa.png",H="/assets/2025-02-04-15-52-26-CnpUcrEn.png",Q="/assets/2025-02-04-15-54-06-NNc79C_4.png",X="/assets/2025-02-04-15-54-48-oZ_noaWs.png",$="/assets/2025-02-04-15-56-21-DpQBG9hJ.png",nn="/assets/2025-02-04-15-57-00-CstxgdJv.png",an="/assets/2025-02-04-15-57-29-Cr_GpakS.png",sn="/assets/2025-02-04-15-58-00-CdcS2hNg.png",en="/assets/2025-02-04-15-58-30-Df6PAvzz.png",tn="/assets/2025-02-04-15-59-59--LBJJFnx.png",pn="/assets/2025-02-04-16-00-32-2IQzdxJR.png",on="/assets/2025-02-04-16-01-35-DWarbF72.png",ln="/assets/2025-02-04-16-02-59-C97WBDFG.gif",cn="/assets/2025-02-04-16-03-25-NwpR4OEA.gif",rn="/assets/2025-02-04-16-26-35-DhsNXRnr.png",un="/assets/2025-02-04-16-27-59-B-_3UAad.png",dn="/assets/2025-02-04-16-28-20-BNv32jk7.png",mn="/assets/2025-02-04-16-28-56-CM87-5A-.png",gn="/assets/2025-02-04-16-29-22-B28a98hc.png",hn="/assets/2025-02-04-16-29-44-Bcea2lPx.png",kn="/assets/2025-02-04-16-30-12-BIzf9E_V.png",fn="/assets/2025-02-04-16-30-26-Dr4hXRkD.png",vn="/assets/2025-02-04-16-30-52-BUsR9OYi.png",bn="/assets/2025-02-04-16-31-16-VgpqNQrc.png",yn="/assets/2025-02-04-16-31-38-C98SEQGc.png",wn="/assets/2025-02-04-16-32-19-CEuLV51Z.png",xn="/assets/2025-02-04-16-32-45-CGORRoqv.png",_n="/assets/2025-02-04-16-33-26-DHS6gj-n.png",An="/assets/2025-02-04-16-33-47-xwpgtbqb.png",Ln="/assets/2025-02-04-16-34-27-8n6cbauW.png",Cn="/assets/2025-02-04-16-35-01-B3sGvLBj.png",Sn={};function Bn(Dn,n){return t(),s("div",null,n[0]||(n[0]=[e('<h1 id="lyra-als" tabindex="-1"><a class="header-anchor" href="#lyra-als"><span>Lyra ALS</span></a></h1><p>这篇文章是课程 <a href="https://www.udemy.com/course/unreal-engine-5-advance-locomotion-system-als-intermediate/" target="_blank" rel="noopener noreferrer">Unreal engine 5:Advance locomotion system ALS (Intermediate)</a> 的笔记。这个课程就是重新实现了一遍<code>Lyra</code>工程中的角色动画，工程仓库：<a href="https://github.com/BanMing/LyraALS" target="_blank" rel="noopener noreferrer">https://github.com/BanMing/LyraALS</a>。课程是全蓝图，我在实现时，把蓝图转换为C++了。</p><h2 id="idle-animation" tabindex="-1"><a class="header-anchor" href="#idle-animation"><span>Idle Animation</span></a></h2><h3 id="idle-switch" tabindex="-1"><a class="header-anchor" href="#idle-switch"><span>Idle Switch</span></a></h3><p>有四种实现方式：</p><h4 id="状态机" tabindex="-1"><a class="header-anchor" href="#状态机"><span>状态机</span></a></h4><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="transition-rule-sharing" tabindex="-1"><a class="header-anchor" href="#transition-rule-sharing"><span>Transition Rule Sharing</span></a></h5><p>共享跳转条件，在转换条件中可以设置：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="通过整数混合" tabindex="-1"><a class="header-anchor" href="#通过整数混合"><span>通过整数混合</span></a></h4><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="通过枚举混合" tabindex="-1"><a class="header-anchor" href="#通过枚举混合"><span>通过枚举混合</span></a></h5><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="序列播放器" tabindex="-1"><a class="header-anchor" href="#序列播放器"><span>序列播放器</span></a></h3><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用Update方法绑定</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里使用的了惯性插值。这是一个对性能友好的插值。具体讲解：</p><p>https://dev.epicgames.com/documentation/en-us/unreal-engine/animation-blueprint-blendnodes-in-unreal-engine#inertialization</p><h2 id="linked-animations" tabindex="-1"><a class="header-anchor" href="#linked-animations"><span>Linked Animations</span></a></h2><h3 id="animation-layer" tabindex="-1"><a class="header-anchor" href="#animation-layer"><span>Animation Layer</span></a></h3><p>Animation Layer就是在动画图中的函数，用来封装动画图的中的逻辑。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="animation-layer-interface" tabindex="-1"><a class="header-anchor" href="#animation-layer-interface"><span>Animation Layer Interface</span></a></h3><p>跟动画蓝图的接口差不多，只是它适用于动画蓝图，创建位置：</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>设置位置跟蓝图接口位置一样。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>设置后，直接在动画蓝图的Animation Layers中找到在接口里声明的方法实现即可。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="linkanimclasslayers" tabindex="-1"><a class="header-anchor" href="#linkanimclasslayers"><span>LinkAnimClassLayers</span></a></h3><p>可以使用 LinkAnimClassLayers 方法实现重载动画蓝图接口。简单来说：</p><p>动画蓝图层级接口类 I 中有 IdleLayer动画蓝图A继承接口I，实现IdleLayer动画蓝图B继承接口I，实现IdleLayer在角色的Mesh上设置动画蓝图A• 在运行时，可以把动画蓝图A中的IdleLayer替换为动画蓝图B的实现。</p><p>文档：https://dev.epicgames.com/documentation/en-us/unreal-engine/animation-in-lyrasample-game-in-unreal-engine#linkedlayeranimationblueprint​</p><h3 id="property-access" tabindex="-1"><a class="header-anchor" href="#property-access"><span>Property Access</span></a></h3><p>文档：https://dev.epicgames.com/documentation/en-us/unreal-engine/property-access-inunreal-engine</p><p>可以在非游戏线程中访问游戏线程的数据，这里有个比较特殊的点是在定义绑定方法的返回值时，返回值的名字一定是 ReturnValue</p><figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>关于在 <code>c++</code> 中使用这个属性：https://forums.unrealengine.com/t/animation-property-access-system-in-c/541917/17。</p><p>直接重载这个方法，在该方法中编写数据即可。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">NativeThreadSafeUpdateAnimation</span><span class="token punctuation">(</span><span class="token keyword">float</span> DeltaSeconds<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="locomotion-cycle-animation" tabindex="-1"><a class="header-anchor" href="#locomotion-cycle-animation"><span>Locomotion Cycle Animation</span></a></h2><h3 id="root-motion" tabindex="-1"><a class="header-anchor" href="#root-motion"><span>Root Motion</span></a></h3><p>值得注意的是，角色的移动是由程序来控制，但是为了解决滑步和45°移动这些问题，使用了插件Motion Warping，这个插件是去处理在动画使用Root Motion时，程序介入改变Root Motion移动的位置或旋转。所以在动画设置中既需要打开Root Motion，也需要打开Force Root Lock。</p><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="calculatedirection" tabindex="-1"><a class="header-anchor" href="#calculatedirection"><span>CalculateDirection</span></a></h3><p><code>UKismetAnimationLibrary::CalculateDirection</code> 这个方法十分有用，用来计算速度和角色之间的夹角。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">/** </span>
<span class="line"> * Returns degree of the angle between Velocity and Rotation forward vector</span>
<span class="line"> * The range of return will be from [-180, 180]. Useful for feeding directional blendspaces.</span>
<span class="line"> * @param        Velocity   The velocity to use as direction relative to BaseRotation</span>
<span class="line"> * @param        BaseRotation   The base rotation, e.g. of a pawn</span>
<span class="line"> */</span></span>
<span class="line"><span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintPure<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">&quot;Animation|Utilities&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">static</span> ANIMGRAPHRUNTIME_API <span class="token keyword">float</span> <span class="token function">CalculateDirection</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVector<span class="token operator">&amp;</span> Velocity<span class="token punctuation">,</span> <span class="token keyword">const</span> FRotator<span class="token operator">&amp;</span> BaseRotation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dead-zone" tabindex="-1"><a class="header-anchor" href="#dead-zone"><span>Dead Zone</span></a></h3><p>把移动动画分为4个方向，为了解决角色已经在某个方向了，在此方向稍微偏移一点角度，角色就会立马改变方向的问题，设计一个缓冲区域。也就是扩大当前方向的角度。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// // // // // // // // // // // // // // //</span></span>
<span class="line"><span class="token comment">// ForwardMin         Forward        BackwardMax</span></span>
<span class="line"><span class="token comment">//     ↖                0°                ↗</span></span>
<span class="line"><span class="token comment">//                - - - - - - -</span></span>
<span class="line"><span class="token comment">//                | ↖ | ↑ | ↗ |</span></span>
<span class="line"><span class="token comment">//                - - - - - - -</span></span>
<span class="line"><span class="token comment">//  -90° Left | ← | o | → | Right 90°</span></span>
<span class="line"><span class="token comment">//                - - - - - - -</span></span>
<span class="line"><span class="token comment">//                | ↙ | ↓ | ↘ |</span></span>
<span class="line"><span class="token comment">//                - - - - - - -</span></span>
<span class="line"><span class="token comment">//         ↙        -180°/180° ↘</span></span>
<span class="line"><span class="token comment">// BackwardMin         Backward        BackwardMax</span></span>
<span class="line"><span class="token comment">// // // // // // // // // // // // // // //</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Check dead zone</span></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>CurrentDirection<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> ELocomotionDirection<span class="token double-colon punctuation">::</span>Forward<span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>CurVelocityLocomotionAngle <span class="token operator">&gt;</span> ForwardMin <span class="token operator">-</span> DeadZone <span class="token operator">&amp;&amp;</span> CurVelocityLocomotionAngle <span class="token operator">&lt;</span> ForwardMax <span class="token operator">+</span> DeadZone<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token keyword">return</span> ELocomotionDirection<span class="token double-colon punctuation">::</span>Forward<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> ELocomotionDirection<span class="token double-colon punctuation">::</span>Backward<span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>CurVelocityLocomotionAngle <span class="token operator">&gt;</span> BackwardMax <span class="token operator">-</span> DeadZone <span class="token operator">||</span> CurVelocityLocomotionAngle <span class="token operator">&lt;</span> BackwardMin <span class="token operator">+</span> DeadZone<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token keyword">return</span> ELocomotionDirection<span class="token double-colon punctuation">::</span>Backward<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> ELocomotionDirection<span class="token double-colon punctuation">::</span>Left<span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>CurVelocityLocomotionAngle <span class="token operator">&gt;</span> BackwardMin <span class="token operator">-</span> DeadZone <span class="token operator">&amp;&amp;</span> CurVelocityLocomotionAngle <span class="token operator">&lt;</span> ForwardMin <span class="token operator">+</span> DeadZone<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token keyword">return</span> ELocomotionDirection<span class="token double-colon punctuation">::</span>Left<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> ELocomotionDirection<span class="token double-colon punctuation">::</span>Right<span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>CurVelocityLocomotionAngle <span class="token operator">&gt;</span> ForwardMax <span class="token operator">-</span> DeadZone <span class="token operator">&amp;&amp;</span> CurVelocityLocomotionAngle <span class="token operator">&lt;</span> BackwardMax <span class="token operator">+</span> DeadZone<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token keyword">return</span> ELocomotionDirection<span class="token double-colon punctuation">::</span>Right<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stride-warping" tabindex="-1"><a class="header-anchor" href="#stride-warping"><span>Stride Warping</span></a></h3><p>这是一个解决滑步的节点，需要启动 <code>Animation Warping</code> 插件。</p><figure><img src="`+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>具体的配置如下：</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里会用到骨骼上的ik节点，如果是自定义的骨骼，这里需要加上ik的节点，可以参考<code>SK_Mannequin</code>中的设置。</p><h3 id="orientation-warping" tabindex="-1"><a class="header-anchor" href="#orientation-warping"><span>Orientation Warping</span></a></h3><p>使用该节点可以制作角色斜方向的移动。</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同样也是使用的ik来实时计算的，具体配置如下：</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="lean-animations" tabindex="-1"><a class="header-anchor" href="#lean-animations"><span>Lean Animations</span></a></h2><p>使用叠加动画做偏向。动画叠加设置：</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>把左右方向的偏移做成BlendSpace：<br><img src="'+x+'" alt="" loading="lazy"></p><p>横坐标：偏移角度[-90,90]纵坐标：步伐[0,1]，移动到跑步。</p><p>需要设置一下 <code>Smoothing Time</code> ，多个动画切换更加的自然。</p><p>在动画蓝图中设置如下：</p><figure><img src="'+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>偏向角度通过角色Actor这一帧的Yaw轴旋转与上一帧的Yaw轴旋转的相减得到。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">LastFrameActorYaw <span class="token operator">=</span> ActorYaw<span class="token punctuation">;</span></span>
<span class="line">ActorYaw <span class="token operator">=</span> WorldRotation<span class="token punctuation">.</span>Yaw<span class="token punctuation">;</span></span>
<span class="line">DeltaActorYaw <span class="token operator">=</span> ActorYaw <span class="token operator">-</span> LastFrameActorYaw<span class="token punctuation">;</span></span>
<span class="line">LeanAngle <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">ClampAngle</span><span class="token punctuation">(</span>DeltaActorYaw <span class="token operator">/</span> <span class="token punctuation">(</span>LeanFactor <span class="token operator">*</span> DeltaSeconds<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">90.f</span><span class="token punctuation">,</span> <span class="token number">90.f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>LocomotionDirection <span class="token operator">==</span> ELocomotionDirection<span class="token double-colon punctuation">::</span>Backward<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    LeanAngle <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1.f</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stop-animation" tabindex="-1"><a class="header-anchor" href="#stop-animation"><span>Stop Animation</span></a></h2><h3 id="stop-layer" tabindex="-1"><a class="header-anchor" href="#stop-layer"><span>Stop Layer</span></a></h3><p>与Cycle Layer相似，不过这里使用的使用的是 <code>SequenceEvaluator</code> 来播放停步动画，不同的是 <code>SequenceEvaluator</code> 可以设置播放时间的偏移。这样就可以在停步时，根据停止点去动态适应不同的<br> 播放时间。</p><figure><img src="`+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里绑定了两个方法：</p><p>SetupStopAnims：根据角色移动方向选择不同的停步动画OnStopUdate：动态设置播放时间点，推进 <code>SequenceEvaluator</code> 播放时间</p><h3 id="stop-location" tabindex="-1"><a class="header-anchor" href="#stop-location"><span>Stop Location</span></a></h3><figure><img src="'+L+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用了 <code>AnimationLocomotionLibrary</code> 插件中的方法 <code>PredictGroundMovementStopLocation</code> 来计算出未来可能的停止点。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">/**</span>
<span class="line"> * Predict where the character will stop based on its current movement properties and parameters from the movement component.</span>
<span class="line"> * This uses prediction logic that is heavily tied to the UCharacterMovementComponent.</span>
<span class="line"> * Each parameter corresponds to a value from the UCharacterMovementComponent with the same name.</span>
<span class="line"> * Because this is a thread safe function, it&#39;s        recommended to populate these fields via the Property Access system.</span>
<span class="line"> * @return The predicted stop position in local space to the character. The size of this vector will be the distance to the stop location.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintPure<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;Animation Character Movement&quot;</span><span class="token punctuation">,</span> meta <span class="token operator">=</span> <span class="token punctuation">(</span>BlueprintThreadSafe<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">static</span> FVector <span class="token function">PredictGroundMovementStopLocation</span><span class="token punctuation">(</span><span class="token keyword">const</span> FVector<span class="token operator">&amp;</span> Velocity<span class="token punctuation">,</span><span class="token keyword">bool</span> bUseSeparateBrakingFriction<span class="token punctuation">,</span> <span class="token keyword">float</span> BrakingFriction<span class="token punctuation">,</span> <span class="token keyword">float</span> GroundFriction<span class="token punctuation">,</span><span class="token keyword">float</span> BrakingFrictionFactor<span class="token punctuation">,</span> <span class="token keyword">float</span> BrakingDecelerationWalking<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单来说就是根据当前的速度和一些停止的速度参数得到未来的停止点，这些参数都可以在 <code>UCharacterMovementComponent</code> 中获取到。</p><h3 id="distance-curve" tabindex="-1"><a class="header-anchor" href="#distance-curve"><span>Distance Curve</span></a></h3><p>可以根据停止点获得当前角色位置离停止点的距离 <code>Distance</code> 。因为停止动画本身是带有位移信息，就可以根据 <code>Distance</code> 来设置动画播放的时间点。</p><p>动画位移数据可以使用曲线的方式获得。使用插件 <code>Animation Modifier Library</code> 可以自动画出位移曲线。</p><figure><img src="`+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击 <code>Window-&gt;Animation Data Modifier</code> 打开面板，选择添加 <code>DistanceCurveModifier</code> ，最后点击 <code>Apply All Modifiers</code> 即可。</p><figure><img src="'+S+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里可以选中所有停止动画，来生成距离曲线。</p><h3 id="distance-match" tabindex="-1"><a class="header-anchor" href="#distance-match"><span>Distance Match</span></a></h3><p>使用了 <code>AnimationLocomotionLibrary</code> 插件中的方法 <code>DistanceMatchToTarget</code> 来设置 <code>SequenceEvaluator</code> 的播放时间。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">/**</span>
<span class="line"> * Set the time of the sequence evaluator to the point in the animation where the distance curve matches the DistanceToTarget input.</span>
<span class="line"> * A common use case is to achieve stops without foot sliding by, each frame, selecting the point in the animation that matches the distance the character has remaining until it stops.</span>
<span class="line"> * Note that because this technique sets the time of the animation by distance remaining, it doesn&#39;t respect phase of any previous animation (e.g. from a jog cycle).</span>
<span class="line"> * @param SequenceEvaluator - The sequence evaluator node to operate on.</span>
<span class="line"> * @param DistanceToTarget - The distance remaining to a target (e.g. a stop or pivot point).</span>
<span class="line"> * @param DistanceCurveName - Name of the curve we want to match </span>
<span class="line"> */</span></span>
<span class="line"><span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;Distance Matching&quot;</span><span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>BlueprintThreadSafe<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">static</span> FSequenceEvaluatorReference <span class="token function">DistanceMatchToTarget</span><span class="token punctuation">(</span><span class="token keyword">const</span> FSequenceEvaluatorReference<span class="token operator">&amp;</span> SequenceEvaluator<span class="token punctuation">,</span> <span class="token keyword">float</span> DistanceToTarget<span class="token punctuation">,</span> FName DistanceCurveName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原理就是根据当前角色位置到停步点的距离 <code>DistanceToTarget</code> ，获取到 <code>DistanceCurveName</code> 曲线中相似距离的点，该点就是播放停止动画的时间点。</p><p>文档：https://dev.epicgames.com/documentation/en-us/unreal-engine/animation-in-lyrasample-game-in-unreal-engine#distancematchingandstridewarping​</p><h3 id="orientation-warping-1" tabindex="-1"><a class="header-anchor" href="#orientation-warping-1"><span>Orientation Warping</span></a></h3><p>与Cycle相同， $45^{\\circ}$ 的停止动画也是用 <code>Orientation Warping</code> 节点来实现。不同的点是需要把 <code>SequenceEvaluator</code> 节点上的 <code>Teleport to Explicit Time</code> 关上。</p><figure><img src="`+B+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>文档：https://dev.epicgames.com/documentation/en-us/unreal-engine/animation-in-lyrasample-game-in-unreal-engine#orientationwarping​</p><h2 id="start-animation" tabindex="-1"><a class="header-anchor" href="#start-animation"><span>Start Animation</span></a></h2><p>实现的逻辑与Stop Animation是一样的，不同的点是开始不需要计算停止位置，但是还是需要使用<code>Distance Matching</code>来控制起步动画播放的时间点。使用了 <code>UAnimDistanceMatchingLibrary</code> 中的方法 <code>AdvanceTimeByDistanceMatching</code> 来设置 <code>SequenceEvaluator</code> 的播放时间。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">/**</span>
<span class="line"> * Advance the sequence evaluator forward by distance traveled rather than time. A distance curve is required on the animation that</span>
<span class="line"> * describes the distance traveled by the root bone in the animation. See UDistanceCurveModifier.</span>
<span class="line"> * @param UpdateContext - The update context provided in the anim node function.</span>
<span class="line"> * @param SequenceEvaluator - The sequence evaluator node to operate on.</span>
<span class="line"> * @param DistanceTraveled - The distance traveled by the character since the last animation update.</span>
<span class="line"> * @param DistanceCurveName - Name of the curve we want to match </span>
<span class="line"> * @param PlayRateClamp - A clamp on the effective play rate of the animation after distance matching. Set to (0,0) for no clamping.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;Distance Matching&quot;</span><span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>BlueprintThreadSafe<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">static</span> FSequenceEvaluatorReference <span class="token function">AdvanceTimeByDistanceMatching</span><span class="token punctuation">(</span><span class="token keyword">const</span> FAnimUpdateContext<span class="token operator">&amp;</span> UpdateContext<span class="token punctuation">,</span> <span class="token keyword">const</span> FSequenceEvaluatorReference<span class="token operator">&amp;</span> SequenceEvaluator<span class="token punctuation">,</span> <span class="token keyword">float</span> DistanceTraveled<span class="token punctuation">,</span> FName DistanceCurveName<span class="token punctuation">,</span> FVector2D PlayRateClamp <span class="token operator">=</span> <span class="token function">FVector2D</span><span class="token punctuation">(</span><span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token number">1.25f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动画状态机也进行了变更：</p><figure><img src="`+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="pivot-animation" tabindex="-1"><a class="header-anchor" href="#pivot-animation"><span>Pivot Animation</span></a></h2><p>急停动画，实现与Start Animation相似。Base状态机添加动画状态：</p><figure><img src="'+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="state-alias" tabindex="-1"><a class="header-anchor" href="#state-alias"><span>State Alias</span></a></h3><p>为了减少各个状态之间的直接连接带来的混乱，使用匿名的状态来设置哪些状态可以跳转到特定的状态。</p><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="pivot-state-machine" tabindex="-1"><a class="header-anchor" href="#pivot-state-machine"><span>Pivot State Machine</span></a></h3><p>在Pivot Layer中设置两个相同的状态，因为在急停播放时，可能会触发另一个方向的急停。</p><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里课程中有一点问题，在计算两个状态切换时，这里的急停加速度（PivotAcceleration）应该与当前加速度（CurAcceleration）作比较。</p><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>与此同时急停加速度应该放在，急停动画开始时进行记录。这样两个急停状态互相切换就没有问题。</p><figure><img src="'+M+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同时也不需要在急停动画的Update方法中实时检测当前动画是否播放正确。</p><h2 id="turn-in-place" tabindex="-1"><a class="header-anchor" href="#turn-in-place"><span>Turn In Place</span></a></h2><p>这个功能是镜头先旋转，角色会滞后旋转到镜头正方向。镜头旋转超过一定的角度时，才会触发角色旋转。这个功能仅在角色处于Idle状态时应用。</p><figure><img src="'+R+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个功能实际的旋转的值是由程序来控制的，将分为两部分来实现：</p><p>逻辑：角色的旋转，在<code>ABP_Base</code>中实现。<br> 表现：角色旋转动画的播放，在<code>ABP_Layers</code>中实现。</p><h3 id="turn-logic" tabindex="-1"><a class="header-anchor" href="#turn-logic"><span>Turn Logic</span></a></h3><h4 id="root-yaw-offset" tabindex="-1"><a class="header-anchor" href="#root-yaw-offset"><span>Root Yaw Offset</span></a></h4><p>相机的旋转时跟着PlayerController的</p><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同时角色的Yaw轴的旋转也是跟着PlayerController的</p><figure><img src="'+Y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以相机的<code>Yaw</code>旋转和角色<code>Yaw</code>轴旋转是一样，这里就需要添加旋转偏移。偏移直接使用计算角色偏向角度时用到的<code>DeltaActorYaw</code>作为基础即可。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">RootYawOffset <span class="token operator">=</span> <span class="token class-name">UKismetMathLibrary</span><span class="token double-colon punctuation">::</span><span class="token function">NormalizeAxis</span><span class="token punctuation">(</span>RootYawOffset <span class="token operator">+</span> DeltaActorYaw <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1.f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>因为是要还原角色的旋转所以这里需要乘上-1，同时这个偏移角度应该是(-180,180)的范围。</p><h4 id="rotate-root-bone" tabindex="-1"><a class="header-anchor" href="#rotate-root-bone"><span>Rotate Root Bone</span></a></h4><p>把偏移旋转应用到角色上，使用Rotate Root Bone这个动画蓝图的节点。</p><p>动画蓝图中的节点：</p><figure><img src="`+E+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因为该功能只在Idle状态下生效，所以需要设置一个状态RootYawOffsetMode 来区别移动和待机。</p><ul><li>Accumulate 待机状态</li><li>BlendOut 移动状态，RootYawOffset的值应该为0，这里对其做了插值处理。</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>RootYawOffsetMode <span class="token operator">==</span> ERootYawOffsetMode<span class="token double-colon punctuation">::</span>Accumulate<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    RootYawOffset <span class="token operator">=</span> <span class="token class-name">UKismetMathLibrary</span><span class="token double-colon punctuation">::</span><span class="token function">NormalizeAxis</span><span class="token punctuation">(</span>RootYawOffset <span class="token operator">+</span> DeltaActorYaw <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1.f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>RootYawOffsetMode <span class="token operator">==</span> ERootYawOffsetMode<span class="token double-colon punctuation">::</span>BlendOut<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    FFloatSpringState RootYawOffsetSpringState<span class="token punctuation">;</span></span>
<span class="line">    RootYawOffset <span class="token operator">=</span> <span class="token class-name">UKismetMathLibrary</span><span class="token double-colon punctuation">::</span><span class="token function">FloatSpringInterp</span><span class="token punctuation">(</span>RootYawOffset<span class="token punctuation">,</span> <span class="token number">0.f</span><span class="token punctuation">,</span> RootYawOffsetSpringState<span class="token punctuation">,</span> <span class="token number">80.f</span><span class="token punctuation">,</span> <span class="token number">1.f</span><span class="token punctuation">,</span> DeltaSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">RootYawOffsetMode <span class="token operator">=</span> ERootYawOffsetMode<span class="token double-colon punctuation">::</span>BlendOut<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段逻辑会在每帧去检测，同时在每帧结束时把旋转偏移模式设置为移动状态。需要在<code>ABP_Base</code>中的Idle状态里添加Update的监听函数，用来设置旋转偏移模式为<code>Accumulate</code>。</p><figure><img src="`+O+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="root-rotation-curve" tabindex="-1"><a class="header-anchor" href="#root-rotation-curve"><span>Root Rotation Curve</span></a></h4><p>角色每一帧实际旋转多少值可以根据旋转动画获取。这里使用动画变形器<code>MotionExtractorModifier</code>来提取角色根节点在动画中的Yaw轴变化曲线。</p><figure><img src="'+J+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>得到曲线：</p><figure><img src="'+G+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里需要对曲线的范围做一定的修改，使旋转结束时角度为0，这样便于在设置<code>RootYawOffset</code>时不需要做过多的检测。</p><figure><img src="'+U+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="is-turning-curve" tabindex="-1"><a class="header-anchor" href="#is-turning-curve"><span>Is Turning Curve</span></a></h4><p>程序在旋转角色时，需要在动画播放旋转的期间，也就是说在<code>root_rotation_Z</code>曲线中不为0的时间点都是在旋转。为了更加直观的看出角色是否在播放旋转动画，这里添加了新的动画曲线，来表示角色是否在旋转中。</p><figure><img src="'+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+q+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里自定义了一个动画变形器 <code>IsTurningModifier</code>，逻辑也很简单，从动画最后一帧开始查询与最后一帧根骨骼Yaw轴旋转不同的时间点A，那么A之前就是在旋转，A之后就是为旋转停止。</p><h3 id="process-turn-yaw-curve" tabindex="-1"><a class="header-anchor" href="#process-turn-yaw-curve"><span>Process Turn Yaw Curve</span></a></h3><p>有了这两个曲线，可以实时更新RootYawOffset来使角色贴近相机方向。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token class-name">ULyraALSAnimInstanceBase</span><span class="token double-colon punctuation">::</span><span class="token function">ProcessTurnYawCurve</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">        LastFrameTurnYawCurveValue <span class="token operator">=</span> TurnYawCurveValue<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token keyword">float</span> TurningValue <span class="token operator">=</span> <span class="token function">GetCurveValue</span><span class="token punctuation">(</span><span class="token string">&quot;IsTurning&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>TurningValue <span class="token operator">&lt;</span> <span class="token number">1.0f</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">                LastFrameTurnYawCurveValue <span class="token operator">=</span> TurnYawCurveValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">                TurnYawCurveValue <span class="token operator">=</span> <span class="token function">GetCurveValue</span><span class="token punctuation">(</span><span class="token string">&quot;root_rotation_Z&quot;</span><span class="token punctuation">)</span> <span class="token operator">*</span> TurningValue<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>LastFrameTurnYawCurveValue <span class="token operator">!=</span> <span class="token number">0.f</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                        RootYawOffset <span class="token operator">=</span> <span class="token class-name">UKismetMathLibrary</span><span class="token double-colon punctuation">::</span><span class="token function">NormalizeAxis</span><span class="token punctuation">(</span>RootYawOffset <span class="token operator">-</span> <span class="token punctuation">(</span>TurnYawCurveValue <span class="token operator">-</span> LastFrameTurnYawCurveValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样这段代码会在Idle状态监听的Update方法中调用。每帧减少偏移的数值是动画中两帧旋转数值的差值。</p><h3 id="turn-animation" tabindex="-1"><a class="header-anchor" href="#turn-animation"><span>Turn Animation</span></a></h3><h4 id="idle-state-machine" tabindex="-1"><a class="header-anchor" href="#idle-state-machine"><span>Idle State Machine</span></a></h4><p>在ABP_Layers中把IdleLayer设置为Idle状态机，如下图：</p><figure><img src="`+V+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>值得注意的是：需要把状态机的<code>Max Transition Per Frame</code>设置为1。</p><p>这里为什么会有3个状态，因为角色在转向时，是一个持续性动画，所以在转向的过程中可能会变向。也就是说本身角色需要向左转90度，在转到60度时，这时候又收到指令需要向右旋转90度，那就需要重新选取转向动画。如果只有一个转向的状态就无法满足这个需求。</p><h4 id="turn-in-place-entry" tabindex="-1"><a class="header-anchor" href="#turn-in-place-entry"><span>Turn In Place Entry</span></a></h4><p>这个状态用于播放转向动画中转向的部分，也就是旋转曲线数值不为0的那一部分。</p><ul><li>进入的条件：为RootYawOffset的绝对值大于50。这个值可以手动调整。</li><li>退出条件：当IsTurning为0时。也就是说旋转停止了。<img src="'+N+'" alt="" loading="lazy"></li></ul><p>绑定了三个方法：</p><ul><li>SetupTurnInPlaceEntryState：根据RootYawOffset设置转向方向</li><li>SetupTurnInPlaceEntryAnims：根据RootYawOffset和转向方向旋转选择动画</li><li>UpdateTurnInPlaceEntryAnims：推进旋转动画的播放</li></ul><p>在该状态中需要记录选择的动画和播放的时间。</p><h4 id="turn-in-place-recovery" tabindex="-1"><a class="header-anchor" href="#turn-in-place-recovery"><span>Turn In Place Recovery</span></a></h4><p>这个状态主要就是播放旋转动画中的一小段待机动作，其中进入该状态不需要设置过渡时间，因为是于Turn In Place Entry状态播放的同一个动画，就是接着上一个状态继续播放即可。</p><figure><img src="'+Z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>退出条件：</p><ul><li>为RootYawOffset的绝对值大于50。这个值可以手动调整。</li><li>旋转动画播放完成</li></ul><p>在旋转180度时，会出现插值混合的问题。可以使用惯性化混合解决这个问题。</p><figure><img src="'+W+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="crouch-animation" tabindex="-1"><a class="header-anchor" href="#crouch-animation"><span>Crouch Animation</span></a></h2><p>蹲伏包括前面的所有功能，只是在不同的状态中把原有的动画替换为蹲伏即可。同时在Gate中添加一个新为Crounching。这样可以根据角色当前的Gate来选择不同的动画。</p><h3 id="switch-crouch" tabindex="-1"><a class="header-anchor" href="#switch-crouch"><span>Switch Crouch</span></a></h3><p>按键触发切换蹲伏：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token class-name">ALyraALSPlayerController</span><span class="token double-colon punctuation">::</span><span class="token function">OnCrouchInput</span><span class="token punctuation">(</span><span class="token keyword">const</span> FInputActionValue<span class="token operator">&amp;</span> InputActionValue<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">switch</span> <span class="token punctuation">(</span>LyraALSCharacterBase<span class="token operator">-&gt;</span><span class="token function">GetCurrentGate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">case</span> EGate<span class="token double-colon punctuation">::</span>Walking<span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">case</span> EGate<span class="token double-colon punctuation">::</span>Jogging<span class="token operator">:</span></span>
<span class="line">                        LyraALSCharacterBase<span class="token operator">-&gt;</span><span class="token function">SwitchGate</span><span class="token punctuation">(</span>EGate<span class="token double-colon punctuation">::</span>Crounching<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">case</span> EGate<span class="token double-colon punctuation">::</span>Crounching<span class="token operator">:</span></span>
<span class="line">                        LyraALSCharacterBase<span class="token operator">-&gt;</span><span class="token function">SwitchGate</span><span class="token punctuation">(</span>EGate<span class="token double-colon punctuation">::</span>Jogging<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接使用角色自带的蹲伏功能即可。</p><h3 id="select-animation" tabindex="-1"><a class="header-anchor" href="#select-animation"><span>Select Animation</span></a></h3><p>只需要在原有系统中加入对 EGate::Crouching 的处理即可。如下：</p><figure><img src="`+K+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="stance-transition" tabindex="-1"><a class="header-anchor" href="#stance-transition"><span>Stance Transition</span></a></h3><p>把Idle状态转换为状态机，用来做站立和蹲伏之间的切换。</p><figure><img src="'+H+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在Stance Transition中只播放进入蹲伏和退出蹲伏动画。蹲伏的待机还是在Idle状态中。</p><p>文档：https://dev.epicgames.com/documentation/en-us/unreal-engine/animation-in-lyrasample-game-in-unreal-engine#turninplace​</p><h2 id="jump-animation" tabindex="-1"><a class="header-anchor" href="#jump-animation"><span>Jump Animation</span></a></h2><p>跳跃是一个相对来说比较独立的模块，它的动画由多个状态组成，逻辑直接使用角色知道的Jump方法即可。同时从高处落下也是使用该模块。</p><h3 id="logic​" tabindex="-1"><a class="header-anchor" href="#logic​"><span>Logic​</span></a></h3><p>在按键按下时直接触发 Character-&gt;Jump ,在按键完成时触发 Character-&gt;Stop 。</p><h4 id="jump-info" tabindex="-1"><a class="header-anchor" href="#jump-info"><span>Jump Info</span></a></h4><p>动画蓝图会使用到三个跳跃的状态数据，每帧都会刷新：</p><ul><li>bIsInAir = CharacterMovementComp-&gt;IsFalling();</li><li>bIsJumping = CharacterVelocity.Z&gt;0 &amp;&amp; bIsInAir;</li><li>bIsFalling = CharacterVelocity.Z&lt;0 &amp;&amp; bIsInAir;</li></ul><h4 id="time-to-jump-apex" tabindex="-1"><a class="header-anchor" href="#time-to-jump-apex"><span>Time To Jump Apex</span></a></h4><p>角色跳跃到最高点所需要的时间，计算方式：角色Z轴的速度除以Z轴的重力即可。只在角色时跳跃时计算</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>bIsJumping<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    TimeToJumpApex <span class="token operator">=</span> <span class="token operator">-</span>CharacterVelocity<span class="token punctuation">.</span>Z <span class="token operator">/</span> CharacterMovementComp<span class="token operator">-&gt;</span><span class="token function">GetGravityZ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    TimeToJumpApex <span class="token operator">=</span> <span class="token number">0.f</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该值作为跳跃循环状态切换到跳跃最高点状态的条件。</p><h4 id="ground-distance" tabindex="-1"><a class="header-anchor" href="#ground-distance"><span>Ground Distance</span></a></h4><p>角色离地面的距离，使用射线碰撞获得该值。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token class-name">ALyraALSCharacterBase</span><span class="token double-colon punctuation">::</span><span class="token function">UpdateGroundDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetCharacterMovement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">IsFalling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">                FHitResult OutHit<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                FVector Start <span class="token operator">=</span> <span class="token function">GetActorLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">FVector</span><span class="token punctuation">(</span><span class="token number">0.f</span><span class="token punctuation">,</span> <span class="token number">0.f</span><span class="token punctuation">,</span> <span class="token function">GetCapsuleComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">GetScaledCapsuleHalfHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                FVector End <span class="token operator">=</span> <span class="token function">GetActorLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">FVector</span><span class="token punctuation">(</span><span class="token number">0.f</span><span class="token punctuation">,</span> <span class="token number">0.f</span><span class="token punctuation">,</span> <span class="token number">1000.f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">LineTraceSingleByChannel</span><span class="token punctuation">(</span>OutHit<span class="token punctuation">,</span> Start<span class="token punctuation">,</span> End<span class="token punctuation">,</span> ECollisionChannel<span class="token double-colon punctuation">::</span>ECC_Visibility<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> AnimationInterface<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                        AnimationInterface<span class="token operator">-&gt;</span><span class="token function">ReceiveGroundDistance</span><span class="token punctuation">(</span>OutHit<span class="token punctuation">.</span>Distance<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="state-machine" tabindex="-1"><a class="header-anchor" href="#state-machine"><span>State Machine</span></a></h3><figure><img src="`+Q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这些状态在基础动画蓝图中的移动状态机里，同时这些状态分为三类：</p><ul><li>粉色：匿名状态</li><li>绿色：选择器</li><li>灰色：状态</li></ul><p>接下来会按照状态流程依次介绍每个状态，每个状态一一对应着一个动画层。</p><figure><img src="'+X+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>匿名状态文档：https://dev.epicgames.com/documentation/en-us/unreal-engine/animation-inlyra-sample-game-in-unreal-engine#statealiases</p><h4 id="jump-sources" tabindex="-1"><a class="header-anchor" href="#jump-sources"><span>Jump Sources</span></a></h4><p>从其他状态进入跳跃模块的入口点，其他状态有：</p><ul><li>Idle</li><li>Cycle​</li><li>Stop​</li><li>Start​</li><li>Pivot​</li></ul><h4 id="jump-selector" tabindex="-1"><a class="header-anchor" href="#jump-selector"><span>Jump Selector</span></a></h4><p>通过数据进入对应状态：</p><ul><li><p><code>bIsJumping</code> ：JumpStart</p></li><li><p><code>bIsFalling</code> ：JumpApex</p></li></ul><h4 id="jumpstart​" tabindex="-1"><a class="header-anchor" href="#jumpstart​"><span>JumpStart​</span></a></h4><figure><img src="'+$+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在JumpStartLayer中使用Sequence Player直接绑定对应的动画，播放结束进入JumpStartLoop</p><h4 id="jumpstartloop" tabindex="-1"><a class="header-anchor" href="#jumpstartloop"><span>JumpStartLoop</span></a></h4><figure><img src="'+nn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在JumpStartLoopLayer中使用Sequence Player直接绑定对应的动画，当跳到最高的时间TimeToJumpApex小于特定值时，进入JumpApex。</p><h4 id="jumpapex" tabindex="-1"><a class="header-anchor" href="#jumpapex"><span>JumpApex</span></a></h4><figure><img src="'+an+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在JumpApexLayer中使用Sequence Player直接绑定对应的动画，播放结束进入JumpFallLoop。</p><h4 id="jumpfallloop" tabindex="-1"><a class="header-anchor" href="#jumpfallloop"><span>JumpFallLoop</span></a></h4><figure><img src="'+sn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在JumpFallLoopLayer中使用Sequence Player直接绑定对应的动画，当GroundDistance小于一个特定的值时，进入JumpFallLand。</p><h4 id="jumpfallland" tabindex="-1"><a class="header-anchor" href="#jumpfallland"><span>JumpFallLand</span></a></h4><figure><img src="'+en+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在JumpFallLayer中使用Sequence Evaluator播放绑定对应的动画。该播放器绑定了两个方法：</p><ul><li>SetupJumpFallLandAnims：在播放开始时，设置播放动画时间点为0。</li><li>UpdateJumpFallLandAnims：根据GroundDistance数值，每帧动态调整动画播放的时间点。这使用到了DistanceMatching，匹配的距离是在动画中设置的Z轴下来曲线。在角色的状态不在空中时进入到EndInAir选择状态。</li></ul><h4 id="endinair" tabindex="-1"><a class="header-anchor" href="#endinair"><span>EndInAir</span></a></h4><p>结束空中状态后，根据角色当前的水平方向的速度决定去以下两个状态：</p><ul><li>Cycle：速度大于0</li><li>Idle：速度接近0</li></ul><h4 id="jumpinteruptsource" tabindex="-1"><a class="header-anchor" href="#jumpinteruptsource"><span>JumpInteruptSource</span></a></h4><p>当然在角色执行跳的过程中，也会突然结束角色在空中这个状态。比如说角色跳台阶，可能角色还在播起跳循环时，角色已经落到更高的台阶上了，就不需要下落的动画了，直接进入EndInAir状态即可。以下几个跳跃的状态可以被打断：</p><ul><li>JumpStart</li><li>JumpApex</li><li>JumpStartLoop</li><li>JumpFallLLoop</li></ul><h3 id="jump-fall-land-recovery" tabindex="-1"><a class="header-anchor" href="#jump-fall-land-recovery"><span>Jump Fall Land Recovery</span></a></h3><p>角色在落地后，一般会有一个落地反馈动画。这个动画并没有放在整个跳跃的状态机里，因为角色在下落后可能会立马进入移动状态，如果加一个反馈动画，这样会让移动等一会响应，这就很呆。所以把这个动画做成叠加动画呈现到角色上，在基础动画蓝图中如下：</p><figure><img src="'+tn+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="time-falling" tabindex="-1"><a class="header-anchor" href="#time-falling"><span>Time Falling</span></a></h4><p>角色下落到地面所花费的时间。作为落地反馈动画叠加的插值。计算方式只需要在角色处于下落时，加上变换时间即可。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>bIsFalling<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    TimeFalling <span class="token operator">+=</span> DeltaSeconds<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>bIsJumping<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        TimeFalling <span class="token operator">=</span> <span class="token number">0.f</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个值是需要每一帧计算的。</p><h4 id="jumplandrecoverysm" tabindex="-1"><a class="header-anchor" href="#jumplandrecoverysm"><span>JumpLandRecoverySM</span></a></h4><p>在JumpFallLandRecoveryLayer中使用状态机来旋转播放下落反馈动画。</p><figure><img src="`+pn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因为叠加动画是放在Locomotion状态机后面，换句话说这个叠加动画是常态存在的，所以需要设置在特定的情况下播放反馈动画。</p><p>其中Default和InAir状态中并没有什么动画，跳转条件如下：</p><ul><li>Default-&gt;InAir：bInAir为真</li><li>InAir-&gt;JumpFallLandRecovery：bInAir为假</li><li>JumpFallLandRecovery-&gt;Default: <ul><li>bInAir为真，优先级1</li><li>叠加动画播放完，优先级2</li></ul></li></ul><p>JumpFallLandRecovery状态的逻辑如下：</p><figure><img src="'+on+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>反馈动画和默认叠加动画进行混合，混合的程度由下落时间决定。其中Additive Identity Pose就是一个空的叠加姿势，主姿势叠加该姿势就是主姿势。</p><p>参考：https://forums.unrealengine.com/t/what-is-ls-ref-pose-and-additive-identity-posefor/478394/5</p><h2 id="sync-group" tabindex="-1"><a class="header-anchor" href="#sync-group"><span>Sync Group</span></a></h2><p>主要解决两个不同周期动画混合时，出现因为人物姿势巨大的不同产生跳跃感的问题。这种情况多出现在角色从步行到跑步过渡时，角色脚不同位置产生的跳跃感。</p><table><thead><tr><th>同步组关闭</th><th>同步组打开</th></tr></thead><tbody><tr><td><img src="'+ln+'" alt="" loading="lazy"></td><td><img src="'+cn+'" alt="" loading="lazy"></td></tr></tbody></table><p>之前在项目中遇到一个问题，角色在频繁转向时的脚步声会播重复，使用同步组可以解决这个问题。因为播放脚步声是使用动画通知，由于动画比较短，转向时会切动画，这时就会触发动画通知。如果频繁切动画，动画通知就会多次触发，声音就会重叠。同步组会抑制跟随者的动画通知，这样就可以减少不必要的通知。</p><p>文档：https://dev.epicgames.com/documentation/zh-cn/unreal-engine/animation-sync-groups-in-unreal-engine?application_version $=5.4$</p><h3 id="group" tabindex="-1"><a class="header-anchor" href="#group"><span>Group</span></a></h3><p>以下几种动画状态设置为同一个组，几个状态的角色如下：</p><ul><li>Cycle: Always Follower</li><li>Pivot : Always Leader</li><li>Start: Can be Leader​</li><li>Stop: Can be Leader</li></ul><p>使用基于标识同步，所以急停、启动、停步都设置为Leader的角色。</p><h3 id="syncmarkeranimmodifier" tabindex="-1"><a class="header-anchor" href="#syncmarkeranimmodifier"><span>SyncMarkerAnimModifier</span></a></h3><p>使用该动画变形器，自动为动画添加脚步同步标识。在使用该变形器时需要关闭动画的force Rootlock选项，同时通话启动Root Motion。</p><h2 id="aim-offset" tabindex="-1"><a class="header-anchor" href="#aim-offset"><span>Aim Offset</span></a></h2><figure><img src="'+rn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>瞄准偏移，存储了一系列可混合的姿势，用于帮助角色瞄准武器。可以理解为一种特殊的混合空间，其中每个动画改为特定的姿势。这瞄准的姿势都是叠加到角色的当前姿势上。</p><h3 id="logic​-1" tabindex="-1"><a class="header-anchor" href="#logic​-1"><span>Logic​</span></a></h3><p>瞄准偏移主要分为两个轴：</p><ul><li>Yaw：直接使用Turn In Place里使用的RootYawOffset，这个值需要取一下反。</li><li>Pitch：直接使用 Pawn-&gt;GetBaseAimRotation().Pitch ，他底层也是直接使用的Controller的旋转。</li></ul><h3 id="animation-setting" tabindex="-1"><a class="header-anchor" href="#animation-setting"><span>Animation Setting</span></a></h3><h4 id="sequence" tabindex="-1"><a class="header-anchor" href="#sequence"><span>Sequence</span></a></h4><p>每一个Sequence中都需要设置叠加动画，设置基础姿势都会对应武器正象的姿势：</p><figure><img src="'+un+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在AO中可以设置Grid Divisions来方便吸附动画配置。</p><h4 id="abp-base" tabindex="-1"><a class="header-anchor" href="#abp-base"><span>ABP Base</span></a></h4><p>因为是叠加动画，所以AimOffsetLayer不需要放在Locomotion状态机里，直接放在最外层， Locomotion之后即可。</p><figure><img src="'+dn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="aimoffsetlayer" tabindex="-1"><a class="header-anchor" href="#aimoffsetlayer"><span>AimOffsetLayer</span></a></h3><p>只需要把参数和动画传入AimOffset Player即可：</p><figure><img src="'+mn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>参考：</p><ul><li>https://dev.epicgames.com/documentation/zh-cn/unreal-engine/creating-an-aim-offset-inunreal-engine​</li></ul><h2 id="foot-placement" tabindex="-1"><a class="header-anchor" href="#foot-placement"><span>Foot Placement</span></a></h2><figure><img src="'+gn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>解决了图中脚没有放在地面上的问题，这是一个UE5全新的节点，集合SlopeWar平，FootLock和IK预算等功能。在ABPBase中使用如下：</p><figure><img src="'+hn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>具体的设置：</p><figure><img src="'+kn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>详细的介绍可以看这篇文章：https://zhuanlan.zhihu.com/p/687084876</p><h2 id="blend-options" tabindex="-1"><a class="header-anchor" href="#blend-options"><span>Blend Options</span></a></h2><h3 id="blend-profile" tabindex="-1"><a class="header-anchor" href="#blend-profile"><span>Blend Profile</span></a></h3><p>混合描述（Blend Profiles） 可以添加至骨骼，用于定义每个骨骼的混合速度，从而让一些骨骼比其它的骨骼更快混合。</p><p>UE默认有一个FastFeet的选项，可以用于从Idle状态过渡到Start状态。它的效果是开始混合下半身。</p><figure><img src="'+fn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在骨骼中可以看到FastFeet的配置如下：</p><figure><img src="'+vn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>文档：https://dev.epicgames.com/documentation/en-us/unreal-engine/blend-masks-andblend-profiles-in-unreal-engine#blendprofiles​</p><h3 id="blend-layers" tabindex="-1"><a class="header-anchor" href="#blend-layers"><span>Blend Layers</span></a></h3><p>切换不同的动画层时，会出现闪烁的问题，可以配置层级混合时间，来解决这个问题。因为在ABP_Base中使用了惯性化插值，所以这里配置混合时间是可以起作用的。每个动画层上都可以配置混合时间和混合描述：</p><figure><img src="'+bn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="weapon" tabindex="-1"><a class="header-anchor" href="#weapon"><span>Weapon</span></a></h2><p>开枪动画使用蒙太奇播放，使用叠加的方式混合进入当前人物姿势。</p><h3 id="hand-ik" tabindex="-1"><a class="header-anchor" href="#hand-ik"><span>Hand IK</span></a></h3><p>具体动画蓝图如下：</p><figure><img src="'+yn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用<code>Hand IK Retargeting</code>节点修正持枪手的骨骼位置，防止手臂的拉伸。设置以右手为基准，移动左手对齐右手。移动到的点为 <code>ik_hand_gun</code> 。</p><figure><img src="'+wn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>左手只是跟随了右手的移动，同属需要保持枪到左手的位置。这里新建虚拟骨骼<code>VB_weapon_r_hand_l</code> ，从右手武器点到左手。</p><figure><img src="'+xn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>每一帧把该骨骼位置和旋转信息复制 <code>ik_hand_l</code> 骨骼上。最后使用<code>Two Bone Ik</code>节点应用<code>ik_hand</code> 骨骼信息到 <code>hand</code> 骨骼链上。</p><p>添加一个开关， 来设置是否启用手部IK，通过在动画上设置曲线值来实现。比如在换弹时，不需要应用手部IK，这样可以在换弹动画中设置曲线如下：</p><figure><img src="'+_n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Hand IK Retargeting 文档：https://dev.epicgames.com/documentation/en-us/unrealengine/animation-blueprint-hand-ik-retargeting-in-unreal-engine​</p><h3 id="upper-body" tabindex="-1"><a class="header-anchor" href="#upper-body"><span>Upper Body</span></a></h3><p>实现边走边换弹的功能，需要使用到上下半身分别混合。具体蓝图如下：</p><figure><img src="'+An+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>换弹动画使用蒙太奇来播放，并把蒙太奇的插槽标记为上半身。使用 <code>Layered blend per bone</code>节点实现上下半身分别混合，该节点配置如下：</p><figure><img src="'+Ln+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里使用了混合遮罩来进行控制上半身混合， <code>ALS Upper Body</code> 遮罩配置如下：</p><figure><img src="'+Cn+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="max-transitions-per-frame" tabindex="-1"><a class="header-anchor" href="#max-transitions-per-frame"><span>Max Transitions Per Frame</span></a></h3><p>该数字定义了单个帧或更新中可以发生的转换或 决策 数量。如果你的状态机有许多状态和转换，其中多个转换可以在给定时间均成立，可能需要将该数字设置为 1 。这样一来，一次只能做出一个决策，防止多个决策和转换彼此竞争。</p><p>在该项目中所有的状态机都把这个数值设置为1了，以确保过渡的状态没有被跳过。</p>',328)]))}const zn=a(Sn,[["render",Bn],["__file","LyraALS.html.vue"]]),Fn=JSON.parse('{"path":"/GameEngine/Unreal/manual/LyraALS.html","title":"Lyra ALS","lang":"en-US","frontmatter":{"date":"2025-02-04T18:03:06.000Z","tag":["Unreal Engine","Animation"]},"headers":[{"level":2,"title":"Idle Animation","slug":"idle-animation","link":"#idle-animation","children":[{"level":3,"title":"Idle Switch","slug":"idle-switch","link":"#idle-switch","children":[]},{"level":3,"title":"序列播放器","slug":"序列播放器","link":"#序列播放器","children":[]}]},{"level":2,"title":"Linked Animations","slug":"linked-animations","link":"#linked-animations","children":[{"level":3,"title":"Animation Layer","slug":"animation-layer","link":"#animation-layer","children":[]},{"level":3,"title":"Animation Layer Interface","slug":"animation-layer-interface","link":"#animation-layer-interface","children":[]},{"level":3,"title":"LinkAnimClassLayers","slug":"linkanimclasslayers","link":"#linkanimclasslayers","children":[]},{"level":3,"title":"Property Access","slug":"property-access","link":"#property-access","children":[]}]},{"level":2,"title":"Locomotion Cycle Animation","slug":"locomotion-cycle-animation","link":"#locomotion-cycle-animation","children":[{"level":3,"title":"Root Motion","slug":"root-motion","link":"#root-motion","children":[]},{"level":3,"title":"CalculateDirection","slug":"calculatedirection","link":"#calculatedirection","children":[]},{"level":3,"title":"Dead Zone","slug":"dead-zone","link":"#dead-zone","children":[]},{"level":3,"title":"Stride Warping","slug":"stride-warping","link":"#stride-warping","children":[]},{"level":3,"title":"Orientation Warping","slug":"orientation-warping","link":"#orientation-warping","children":[]}]},{"level":2,"title":"Lean Animations","slug":"lean-animations","link":"#lean-animations","children":[]},{"level":2,"title":"Stop Animation","slug":"stop-animation","link":"#stop-animation","children":[{"level":3,"title":"Stop Layer","slug":"stop-layer","link":"#stop-layer","children":[]},{"level":3,"title":"Stop Location","slug":"stop-location","link":"#stop-location","children":[]},{"level":3,"title":"Distance Curve","slug":"distance-curve","link":"#distance-curve","children":[]},{"level":3,"title":"Distance Match","slug":"distance-match","link":"#distance-match","children":[]},{"level":3,"title":"Orientation Warping","slug":"orientation-warping-1","link":"#orientation-warping-1","children":[]}]},{"level":2,"title":"Start Animation","slug":"start-animation","link":"#start-animation","children":[]},{"level":2,"title":"Pivot Animation","slug":"pivot-animation","link":"#pivot-animation","children":[{"level":3,"title":"State Alias","slug":"state-alias","link":"#state-alias","children":[]},{"level":3,"title":"Pivot State Machine","slug":"pivot-state-machine","link":"#pivot-state-machine","children":[]}]},{"level":2,"title":"Turn In Place","slug":"turn-in-place","link":"#turn-in-place","children":[{"level":3,"title":"Turn Logic","slug":"turn-logic","link":"#turn-logic","children":[]},{"level":3,"title":"Process Turn Yaw Curve","slug":"process-turn-yaw-curve","link":"#process-turn-yaw-curve","children":[]},{"level":3,"title":"Turn Animation","slug":"turn-animation","link":"#turn-animation","children":[]}]},{"level":2,"title":"Crouch Animation","slug":"crouch-animation","link":"#crouch-animation","children":[{"level":3,"title":"Switch Crouch","slug":"switch-crouch","link":"#switch-crouch","children":[]},{"level":3,"title":"Select Animation","slug":"select-animation","link":"#select-animation","children":[]},{"level":3,"title":"Stance Transition","slug":"stance-transition","link":"#stance-transition","children":[]}]},{"level":2,"title":"Jump Animation","slug":"jump-animation","link":"#jump-animation","children":[{"level":3,"title":"Logic​","slug":"logic​","link":"#logic​","children":[]},{"level":3,"title":"State Machine","slug":"state-machine","link":"#state-machine","children":[]},{"level":3,"title":"Jump Fall Land Recovery","slug":"jump-fall-land-recovery","link":"#jump-fall-land-recovery","children":[]}]},{"level":2,"title":"Sync Group","slug":"sync-group","link":"#sync-group","children":[{"level":3,"title":"Group","slug":"group","link":"#group","children":[]},{"level":3,"title":"SyncMarkerAnimModifier","slug":"syncmarkeranimmodifier","link":"#syncmarkeranimmodifier","children":[]}]},{"level":2,"title":"Aim Offset","slug":"aim-offset","link":"#aim-offset","children":[{"level":3,"title":"Logic​","slug":"logic​-1","link":"#logic​-1","children":[]},{"level":3,"title":"Animation Setting","slug":"animation-setting","link":"#animation-setting","children":[]},{"level":3,"title":"AimOffsetLayer","slug":"aimoffsetlayer","link":"#aimoffsetlayer","children":[]}]},{"level":2,"title":"Foot Placement","slug":"foot-placement","link":"#foot-placement","children":[]},{"level":2,"title":"Blend Options","slug":"blend-options","link":"#blend-options","children":[{"level":3,"title":"Blend Profile","slug":"blend-profile","link":"#blend-profile","children":[]},{"level":3,"title":"Blend Layers","slug":"blend-layers","link":"#blend-layers","children":[]}]},{"level":2,"title":"Weapon","slug":"weapon","link":"#weapon","children":[{"level":3,"title":"Hand IK","slug":"hand-ik","link":"#hand-ik","children":[]},{"level":3,"title":"Upper Body","slug":"upper-body","link":"#upper-body","children":[]},{"level":3,"title":"Max Transitions Per Frame","slug":"max-transitions-per-frame","link":"#max-transitions-per-frame","children":[]}]}],"git":{"createdTime":1738652566000,"updatedTime":1738666220000,"contributors":[{"name":"BanMing","email":"ban-ming@foxmail.com","commits":4}]},"readingTime":{"minutes":22.01,"words":6603},"filePathRelative":"GameEngine/Unreal/manual/LyraALS.md","localizedDate":"February 4, 2025","excerpt":"\\n<p>这篇文章是课程 <a href=\\"https://www.udemy.com/course/unreal-engine-5-advance-locomotion-system-als-intermediate/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Unreal engine 5:Advance locomotion system ALS (Intermediate)</a> 的笔记。这个课程就是重新实现了一遍<code>Lyra</code>工程中的角色动画，工程仓库：<a href=\\"https://github.com/BanMing/LyraALS\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/BanMing/LyraALS</a>。课程是全蓝图，我在实现时，把蓝图转换为C++了。</p>"}');export{zn as comp,Fn as data};
