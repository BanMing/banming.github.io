import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,f as e,o as t}from"./app-CbMdtCfv.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="square-of-a-sorted-array" tabindex="-1"><a class="header-anchor" href="#square-of-a-sorted-array"><span>Square of a Sorted Array</span></a></h1><p>Given an array of integers <strong>A</strong> sorted in non-decreasing order,retrun an array of the squares of each number,also in sorted non-decreasing order.</p><p><strong>Example</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Input:[-4,-1,0,3,10]</span>
<span class="line">Output:[0,1,9,16,100]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><details><summary> Tips </summary> two point </details><hr><details><summary> Solution </summary><!-- ::: details Solution --><p>there are two solutions.</p><h3 id="_1-sort" tabindex="-1"><a class="header-anchor" href="#_1-sort"><span>1.Sort</span></a></h3><p>just get every element square then sort list.</p><h3 id="_2-two-point" tabindex="-1"><a class="header-anchor" href="#_2-two-point"><span>2.Two Point</span></a></h3><ul><li>from the last element to the first.</li><li>use two point left and right</li><li>judge the left and right values which is bigger</li><li>the bigger one sets to the current last element</li><li>move point from last one to second last</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    size_t r <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    size_t p <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">res</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> l<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> a <span class="token operator">=</span> A<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> b <span class="token operator">=</span> A<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            res<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span></span>
<span class="line">            l<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            res<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span></span>
<span class="line">            r<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        p<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> res<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><!-- ::: --></details><hr>`,9)]))}const r=s(p,[["render",o],["__file","SortedSquares.html.vue"]]),u=JSON.parse('{"path":"/Basic/algorithm/leetcode/array/SortedSquares.html","title":"Square of a Sorted Array","lang":"en-US","frontmatter":{"date":"2020-09-05T13:56:05.000Z"},"git":{"createdTime":1599285365000,"updatedTime":1706518071000,"contributors":[{"name":"BanMing","username":"BanMing","email":"banming729@163.com","commits":1,"url":"https://github.com/BanMing"},{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":5,"url":"https://github.com/BanMing"},{"name":"wupeng","username":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":1,"url":"https://github.com/wupeng"}]},"readingTime":{"minutes":0.59,"words":176},"filePathRelative":"Basic/algorithm/leetcode/array/SortedSquares.md","localizedDate":"September 5, 2020","excerpt":"\\n<p>Given an array of integers <strong>A</strong> sorted in non-decreasing order,retrun an array of the squares of each number,also in sorted non-decreasing order.</p>\\n<p><strong>Example</strong></p>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"text\\"><pre><code><span class=\\"line\\">Input:[-4,-1,0,3,10]</span>\\n<span class=\\"line\\">Output:[0,1,9,16,100]</span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{r as comp,u as data};
