import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as e,b as s}from"./app-DBSbKQKi.js";const t={},i=s(`<h1 id="quaternions" tabindex="-1"><a class="header-anchor" href="#quaternions" aria-hidden="true">#</a> Quaternions</h1><p>绕轴旋转 θ 可以在球体上表示为任何有向弧，在垂直于旋转轴的平面上长度为 <code>θ/2</code>。正角产生绕轴逆时针旋转。</p><p>为什么是1/2呢？因为一个四元数可以记录2个圆周，也就是720度，但是sin/cos的循环时360度，所以为了适配就除以2。</p><h2 id="different-methods-for-creating-quaternions" tabindex="-1"><a class="header-anchor" href="#different-methods-for-creating-quaternions" aria-hidden="true">#</a> Different methods for creating quaternions</h2><h2 id="retrieving-the-angle-and-axis-of-aquaternion" tabindex="-1"><a class="header-anchor" href="#retrieving-the-angle-and-axis-of-aquaternion" aria-hidden="true">#</a> Retrieving the angle and axis of aquaternion</h2><h2 id="basic-component-wise-operations" tabindex="-1"><a class="header-anchor" href="#basic-component-wise-operations" aria-hidden="true">#</a> Basic component-wise operations</h2><h2 id="the-length-and-dot-product-of-two-quaternions" tabindex="-1"><a class="header-anchor" href="#the-length-and-dot-product-of-two-quaternions" aria-hidden="true">#</a> The length and dot product of two quaternions</h2><h2 id="inverting-quaternions" tabindex="-1"><a class="header-anchor" href="#inverting-quaternions" aria-hidden="true">#</a> Inverting quaternions</h2><p>当一个四元数被归一化后，他的共轨和逆向时一样。</p><h2 id="combining-quaternions" tabindex="-1"><a class="header-anchor" href="#combining-quaternions" aria-hidden="true">#</a> Combining quaternions</h2><h2 id="transforming-vectors-by-quaternions" tabindex="-1"><a class="header-anchor" href="#transforming-vectors-by-quaternions" aria-hidden="true">#</a> Transforming vectors by quaternions</h2><p>纯四元数就是，旋转轴时单位向量，w是0时。</p><h2 id="interpolating-between-quaternions" tabindex="-1"><a class="header-anchor" href="#interpolating-between-quaternions" aria-hidden="true">#</a> Interpolating between quaternions</h2><p>四元数是一个旋转角度，而不是方向。做插值，就是从一个角度变道另一个角度。在旋转中，我们可以获得最长的路径或者最短的路径。插值最好使用最短的路径。在两个四元数点乘时，大于零时就是取得最短路径，小于零时就是取得最长路径。如果我们需要使用最短路径，就可以做如下操作：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>quat <span class="token function">SampleFunction</span><span class="token punctuation">(</span><span class="token keyword">const</span> quat<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> quat<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        b <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>    
    <span class="token keyword">return</span> <span class="token function">slerp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="converting-quaternions-and-matrices" tabindex="-1"><a class="header-anchor" href="#converting-quaternions-and-matrices" aria-hidden="true">#</a> Converting quaternions and matrices</h2>`,16),o=[i];function r(c,p){return a(),e("div",null,o)}const l=n(t,[["render",r],["__file","Quaternions.html.vue"]]);export{l as default};
