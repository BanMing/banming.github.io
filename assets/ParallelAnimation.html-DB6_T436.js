import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as i,f as e,o as t}from"./app-DHJJuLtP.js";const r={};function l(o,n){return t(),i("div",null,n[0]||(n[0]=[e('<h1 id="parallel-animation" tabindex="-1"><a class="header-anchor" href="#parallel-animation"><span>Parallel Animation</span></a></h1><p>并行动画计算（Parallel Animation Evaluation）<br> UE可以在多个线程上并行计算动画，这减少了主线程的负担并提高了整体性能。并行动画计算通常在以下几个方面发挥作用：<br> a. Skinning Decompression<br> 这是解压和准备网格数据以便进行蒙皮处理的过程。这一步骤可以在多个线程上并行执行，以加快处理速度。<br> b. Animation Graph Evaluation<br> 动画图的计算可以在不同的线程上并行进行。这包括所有的IK计算、动画混合、状态转换等。<br> c. Bone Transforms Calculation<br> 骨骼变换的计算也可以并行处理。这是计算最终骨骼位置以供渲染使用的步骤。</p><p>UAnimInstance<br> UAnimInstance是一个Unreal Engine的类，它是一个Actor的动画实例，负责管理和播放Skeleton Mesh的动画。它包含动画蓝图（Animation Blueprint）的逻辑，处理动画状态机、变量和事件。UAnimInstance通常在游戏的主线程中运行，处理与游戏逻辑相关的各种动画任务。<br> FAnimInstanceProxy<br> FAnimInstanceProxy是一个结构体，作为UAnimInstance的轻量级代理，用于在多线程环境中计算动画。这个代理包含了为动画计算所需的所有数据，可以在不同的线程（通常是工作线程）上进行处理，从而减少主线程的负担。FAnimInstanceProxy的设计使得动画的计算可以独立于游戏逻辑之外并行执行。<br> 关系与工作流程</p><ol><li>数据同步：在动画更新周期的开始，UAnimInstance会将相关数据复制到FAnimInstanceProxy中。这包括动画参数、状态机状态、骨骼变换等。</li><li>并行计算：一旦FAnimInstanceProxy包含了所有必要的数据，它可以在另一个线程上独立计算动画。这包括骨骼的变换计算、动画混合、IK处理等。</li><li>数据回传：计算完成后，结果（如最终骨骼的变换）会被传回到UAnimInstance，以便在主线程中应用到Mesh上，并进行渲染。</li></ol>',4)]))}const c=a(r,[["render",l],["__file","ParallelAnimation.html.vue"]]),b=JSON.parse('{"path":"/GameEngine/Unreal/animation/ParallelAnimation.html","title":"Parallel Animation","lang":"en-US","frontmatter":{"date":"2024-02-18T18:57:03.000Z","tag":["Unreal Engine","Animation"]},"git":{"createdTime":1745297123000,"updatedTime":1745297123000,"contributors":[{"name":"ban-ming@foxmail.com","username":"ban-ming@foxmail.com","email":"ban-ming@foxmail.com","commits":1,"url":"https://github.com/ban-ming@foxmail.com"}]},"readingTime":{"minutes":1.78,"words":535},"filePathRelative":"GameEngine/Unreal/animation/ParallelAnimation.md","localizedDate":"February 18, 2024","excerpt":"\\n<p>并行动画计算（Parallel Animation Evaluation）<br>\\nUE可以在多个线程上并行计算动画，这减少了主线程的负担并提高了整体性能。并行动画计算通常在以下几个方面发挥作用：<br>\\na. Skinning Decompression<br>\\n这是解压和准备网格数据以便进行蒙皮处理的过程。这一步骤可以在多个线程上并行执行，以加快处理速度。<br>\\nb. Animation Graph Evaluation<br>\\n动画图的计算可以在不同的线程上并行进行。这包括所有的IK计算、动画混合、状态转换等。<br>\\nc. Bone Transforms Calculation<br>\\n骨骼变换的计算也可以并行处理。这是计算最终骨骼位置以供渲染使用的步骤。</p>"}');export{c as comp,b as data};
