import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as i,e as r}from"./app-_BRcm9gM.js";const t="/assets/20210805102348-aG8k0gXL.png",n={},d=r('<h1 id="游戏ai模型" tabindex="-1"><a class="header-anchor" href="#游戏ai模型" aria-hidden="true">#</a> 游戏AI模型</h1><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一般游戏中的AI模块我们都可以它分为三个小块：</p><ul><li>移动</li><li>行为决策</li><li>策略</li></ul><p>前两个都是对于单个AI角色的操作，策略则是对多个AI角色的操作。当然也有某些游戏没有其中的某一个小块。</p><h2 id="移动-movement" tabindex="-1"><a class="header-anchor" href="#移动-movement" aria-hidden="true">#</a> 移动 MOVEMENT</h2><p>移动是指使用算法去决定角色进入某种运动，或者更简单的理解就是寻路系统。当AI角色想要执行某个特定的行为时，如攻击，但是AI角色想要攻击的对象并不在AI角色的攻击范围内，所以就需要让这个角色走到让攻击对象在他攻击范围内。当然这个移动的这个过程中需要避开障碍物。</p><h2 id="行为决策-decision-making" tabindex="-1"><a class="header-anchor" href="#行为决策-decision-making" aria-hidden="true">#</a> 行为决策 DECISION MAKING</h2><p>行为决策是指我们的角色下一步需要做什么。我们的角色有很多不同的行为，我们需要根据当前的环境筛选出最适合在当前执行的行为的一个过程。我们经常听到的行为树他的功能范围就是这个。</p><h2 id="策略-strategy" tabindex="-1"><a class="header-anchor" href="#策略-strategy" aria-hidden="true">#</a> 策略 STRATEGY</h2><p>这是并不是控制某一个单位的行为，而是控制多个单位，把他们看做一个整体来控制，在moba游戏里像是团战怎么打或者是rts游戏中一队小兵集体做什么。</p><h2 id="基础设施-infrastructure" tabindex="-1"><a class="header-anchor" href="#基础设施-infrastructure" aria-hidden="true">#</a> 基础设施 INFRASTRUCTURE</h2><p>指的是游戏的基本运行组件，比如说是我们要使一个角色自动从A点移动B点，怎么走到B点，走那一条路是AI程序需要计算的，这个角色的走的前提是它具备走这个能力，我们需要使用动画、位移、物理等使这个角色拥有这个能力，这个就属于是基础设施。这个部分也有让我们的AI角色感受到周围世界，从中获取信息从而根据这些信息去执行我们的AI逻辑。</p><h2 id="基于代理的ai-agent-based-ai" tabindex="-1"><a class="header-anchor" href="#基于代理的ai-agent-based-ai" aria-hidden="true">#</a> 基于代理的AI AGENT-BASED AI</h2><p>指我们在设计AI功能时，我们是以自底向上的方式还是自顶向下的方式设计。</p><p>自底向上：你需要从每一个角色的行为是什么和通过AI程序去支持什么，把这些小的实现合并在一起了，就是一个游戏的AI系统。换句话说就是我有一个角色，我知道他的所有的数据，把这些数据传入一个公用或者工具方法中，这个角色就去执行AI需要做的行为。这种方式就是基于代理的AI系统。</p><p>自顶向下：我们需要总结出一个完整的角色体系，在这个体系中去实现模拟我们的角色行为。</p>',17),h=[d];function s(c,o){return e(),i("div",null,h)}const A=a(n,[["render",s],["__file","GameAIModel.html.vue"]]);export{A as default};
