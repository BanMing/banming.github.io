import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as t,b as n}from"./app-CXjdBmfs.js";const s="/assets/2024-01-02-21-53-50-FR_9SFaT.png",i="/assets/2024-01-02-22-19-44-qtzHJEFJ.png",o="/assets/2024-01-03-22-28-48-KC1gdG5K.png",l="/assets/2024-01-03-22-59-59-19U6HFn1.png",p="/assets/2024-01-06-13-23-21-k99YelBI.png",c="/assets/2024-01-16-16-39-54-6ECCrj1g.png",d="/assets/2024-01-16-17-30-06-nY-KjaHk.png",r="/assets/2024-01-16-17-34-01-hW0lF67p.png",u="/assets/2024-01-22-21-07-52-jns_74gB.png",m="/assets/2024-01-25-11-34-43-M0GKjq84.png",g="/assets/2024-01-25-11-35-29-Mtmx-AZi.png",y={},f=n('<h1 id="gameplay-ability-system" tabindex="-1"><a class="header-anchor" href="#gameplay-ability-system" aria-hidden="true">#</a> Gameplay Ability System</h1><figure><img src="'+s+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><ul><li>Ability System Component：控制技能生命周期。</li><li>Attribute Set：数据配置</li><li>Gameplay Ability：技能逻辑</li><li>Ability Task：技能执行在一帧，可以设置不同的回调也就是任务，来响应技能执行。</li><li>Gameplay Effect：技能产生的影响，修改了那些数据。</li><li>Gameplay Cue：技能相关的音效，粒子效果，相机抖动等。</li><li>Gameplay Tag：描述物体的状态或数据，可以用来控制技能的释放等。</li></ul><h2 id="ability-system-component" tabindex="-1"><a class="header-anchor" href="#ability-system-component" aria-hidden="true">#</a> Ability System Component</h2><figure><img src="'+i+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p><code>Ability System Component</code>和<code>Attribute Set</code>可以放在<code>Pawn</code>上也可以放在<code>Player State</code>。他们的区别是<code>Pawn</code>会在游戏中会被销毁，那么技能系统也就销毁了。</p><h3 id="init-ability-actor-info" tabindex="-1"><a class="header-anchor" href="#init-ability-actor-info" aria-hidden="true">#</a> Init Ability Actor Info</h3><p>当<code>ASC</code>在不同的宿主上时，初始化的地方各有不同，主要原因是要确保<code>Controller</code>已经被初始化。</p><figure><img src="'+o+`" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p><code>ASC</code>可以有两种类型的宿主，在初始化<code>ASC</code>时，使用该函数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">UAbilitySystemComponent</span><span class="token double-colon punctuation">::</span><span class="token function">InitAbilityActorInfo</span><span class="token punctuation">(</span>AActor<span class="token operator">*</span> InOwnerActor<span class="token punctuation">,</span> AActor<span class="token operator">*</span> InAvatarActor<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>InOwnerActor 逻辑上的宿主</li><li>InAvatarActor 游戏世界里物理宿主</li></ul><p>在多人游戏中一般可以这样设置：</p><figure><img src="`+l+`" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h3 id="egameplayeffectreplicationmode" tabindex="-1"><a class="header-anchor" href="#egameplayeffectreplicationmode" aria-hidden="true">#</a> EGameplayEffectReplicationMode</h3><table><thead><tr><th style="text-align:center;">Replication</th><th style="text-align:center;">Use Case</th><th style="text-align:center;">Description</th></tr></thead><tbody><tr><td style="text-align:center;">Full</td><td style="text-align:center;">Single Player</td><td style="text-align:center;">Gameplay Effects are replicated to all clients</td></tr><tr><td style="text-align:center;">Mixed</td><td style="text-align:center;">Multiplayer, Player-Controlled</td><td style="text-align:center;">Game Effects are replicated to the owning client only. Gameplay Cues and Gameplay Tags replicated to all clients.</td></tr><tr><td style="text-align:center;">Minimal</td><td style="text-align:center;">Multiplayer, AI-Controlled</td><td style="text-align:center;">Gameplay Effects are <strong>NOT</strong> replicated. Gameplay Cues and Gameplay Tags replicated to all clients.</td></tr></tbody></table><p>当设置为<code>Mixed</code>时，<code>ASC</code>的拥有者必须是<code>Controller</code>。<code>PlayerState</code>会自动转换为<code>Controller</code>。如果是其他的类型，就需要调用<code>SetOwner()</code>把<code>ASC</code>设置到<code>Controller</code>上。</p><p>使用蓝图库来获取该组件：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;AbilitySystemBlueprintLibrary.h&quot;</span></span>
<span class="token class-name">UAbilitySystemBlueprintLibrary</span><span class="token double-colon punctuation">::</span><span class="token function">GetAbilitySystemComponent</span><span class="token punctuation">(</span>AActor<span class="token operator">*</span> Target<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="attribute-set" tabindex="-1"><a class="header-anchor" href="#attribute-set" aria-hidden="true">#</a> Attribute Set</h2><p>使用下面的宏来设置属性函数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;AbilitySystemComponent.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ATTRIBUTE_ACCESSORS</span><span class="token expression"><span class="token punctuation">(</span>ClassName<span class="token punctuation">,</span> PropertyName<span class="token punctuation">)</span>           </span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token function">GAMEPLAYATTRIBUTE_PROPERTY_GETTER</span><span class="token punctuation">(</span>ClassName<span class="token punctuation">,</span> PropertyName<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token function">GAMEPLAYATTRIBUTE_VALUE_GETTER</span><span class="token punctuation">(</span>PropertyName<span class="token punctuation">)</span>               </span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token function">GAMEPLAYATTRIBUTE_VALUE_SETTER</span><span class="token punctuation">(</span>PropertyName<span class="token punctuation">)</span>               </span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token function">GAMEPLAYATTRIBUTE_VALUE_INITTER</span><span class="token punctuation">(</span>PropertyName<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>头文件实列：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>	<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadOnly<span class="token punctuation">,</span> ReplicatedUsing <span class="token operator">=</span> OnRep_Health<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;Vital Attributes&quot;</span><span class="token punctuation">)</span>
	FGameplayAttributeData Health<span class="token punctuation">;</span>
    <span class="token function">ATTRIBUTE_ACCESSORS</span><span class="token punctuation">(</span>ThisClass<span class="token punctuation">,</span> Health<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">OnRep_Health</span><span class="token punctuation">(</span><span class="token keyword">const</span> FGameplayAttributeData<span class="token operator">&amp;</span> OldHealth<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类实列：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">UAuraAttributeSet</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">FLifetimeProperty</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
	<span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>OutLifetimeProps<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">DOREPLIFETIME_CONDITION_NOTIFY</span><span class="token punctuation">(</span>ThisClass<span class="token punctuation">,</span> Health<span class="token punctuation">,</span> COND_None<span class="token punctuation">,</span> REPNOTIFY_Always<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">UAuraAttributeSet</span><span class="token double-colon punctuation">::</span><span class="token function">OnRep_Health</span><span class="token punctuation">(</span><span class="token keyword">const</span> FGameplayAttributeData<span class="token operator">&amp;</span> OldHealth<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">GAMEPLAYATTRIBUTE_REPNOTIFY</span><span class="token punctuation">(</span>ThisClass<span class="token punctuation">,</span> Health<span class="token punctuation">,</span> OldHealth<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用函数" tabindex="-1"><a class="header-anchor" href="#常用函数" aria-hidden="true">#</a> 常用函数</h3><ul><li>PreAttributeChange：数据在修改前，调用。</li><li>PostAttributeChange：数据在修改后，调用。</li></ul><h2 id="gameplay-effect" tabindex="-1"><a class="header-anchor" href="#gameplay-effect" aria-hidden="true">#</a> Gameplay Effect</h2><figure><img src="`+p+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p>执行规则：</p><ul><li>Instant 一次</li><li>Has Duration 一段时间</li><li>Infinite 无限次</li></ul><h3 id="periodic-gameplay-effects" tabindex="-1"><a class="header-anchor" href="#periodic-gameplay-effects" aria-hidden="true">#</a> Periodic Gameplay Effects</h3><figure><img src="'+c+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p>在一段时间内定期修改基础数值</p><h3 id="stacking" tabindex="-1"><a class="header-anchor" href="#stacking" aria-hidden="true">#</a> Stacking</h3><h3 id="aggregate-by-soucre" tabindex="-1"><a class="header-anchor" href="#aggregate-by-soucre" aria-hidden="true">#</a> Aggregate by Soucre</h3><figure><img src="'+d+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h3 id="aggregate-by-soucre-1" tabindex="-1"><a class="header-anchor" href="#aggregate-by-soucre-1" aria-hidden="true">#</a> Aggregate by Soucre</h3><figure><img src="'+r+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h2 id="gameplay-ability" tabindex="-1"><a class="header-anchor" href="#gameplay-ability" aria-hidden="true">#</a> Gameplay Ability</h2><h2 id="ability-task" tabindex="-1"><a class="header-anchor" href="#ability-task" aria-hidden="true">#</a> Ability Task</h2><h2 id="gameplay-cue" tabindex="-1"><a class="header-anchor" href="#gameplay-cue" aria-hidden="true">#</a> Gameplay Cue</h2><h2 id="gameplay-tag" tabindex="-1"><a class="header-anchor" href="#gameplay-tag" aria-hidden="true">#</a> Gameplay Tag</h2><figure><img src="'+u+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p>可以多出使用Tag：</p><ul><li>Inputs</li><li>Abilities</li><li>Attributes</li><li>Damage Types</li><li>Buffs/Debuffs</li><li>Messages</li><li>Data</li><li>Anything you want！</li></ul><p>管理所有Tags：</p><ul><li>存在<code>Config/DefaultGameplayTags.ini</code>文件中 -<code>Edit-&gt;Project Setting-&gt;GameplayTags</code></li><li>使用<code>DataTable</code>创建<code>GameplayTagTableRow</code>数据表，需要配置到项目设置中的<code>Gameplay Tag Table List</code></li></ul><p>GameplayEffect中的Tag配置：</p><figure><img src="'+m+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><table><thead><tr><th>Category</th><th>Description</th></tr></thead><tbody><tr><td>Gameplay Effect Asset Tags</td><td>Tags that the <code>GameplayEffect</code> has. They do not do any function on their own and serve only the purpose of describing the <code>GameplayEffect</code>.</td></tr><tr><td>Granted Tags</td><td>Tags that live on the <code>GameplayEffect</code> but are also given to the <code>ASC</code> that the <code>GameplayEffect</code> is applied to. They are removed from the <code>ASC</code> when the <code>GameplayEffect</code> is removed. This only works for <code>Duration</code> and <code>Infinite</code> <code>GameplayEffects</code>.</td></tr><tr><td>Ongoing Tag Requirements</td><td>Once applied, these tags determine whether the <code>GameplayEffect</code> is on or off. A <code>GameplayEffect</code> can be off and still be applied. If a <code>GameplayEffect</code> is off due to failing the Ongoing Tag Requirements, but the requirements are then met, the <code>GameplayEffect</code> will turn on again and reapply its modifiers. This only works for <code>Duration</code> and <code>Infinite</code> <code>GameplayEffects</code>.</td></tr><tr><td>Application Tag Requirements</td><td>Tags on the Target that determine if a <code>GameplayEffect</code> can be applied to the Target. If these requirements are not met, the <code>GameplayEffect</code> is not applied.</td></tr><tr><td>Remove Gameplay Effects with Tags</td><td><code>GameplayEffects</code> on the Target that have any of these tags in their <code>Asset Tags</code> or <code>Granted Tags</code> will be removed from the Target when this <code>GameplayEffect</code> is successfully applied.</td></tr></tbody></table><p>以上设置在<strong>5.3</strong>之前还是有的，在<strong>5.3</strong>中是把上面的属性设置到组件里如图：</p><figure><img src="'+g+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><table><thead><tr><th>Gameplay Effect</th><th>Component Description</th></tr></thead><tbody><tr><td>UChanceToApplyGameplayEffectComponent</td><td>应用Gameplay效果的率。</td></tr><tr><td>UBlockAbilityTagsGameplayEffectComponent</td><td>根据所有者Gameplay效果目标Actor的Gameplay标签，进行Gameplay技能激活阻止处理。</td></tr><tr><td>UAssetTagsGameplayEffectComponent</td><td>Gameplay效果资产拥有的标签。这些标签 <strong>不会</strong> 转移到Actor。</td></tr><tr><td>UAdditionalEffectsGameplayEffectComponent</td><td>添加尝试在特定条件下激活（或任何条件下都不激活）的其他Gameplay效果。</td></tr><tr><td>UTargetTagsGameplayEffectComponent</td><td>将标签授予Gameplay效果的目标（有时指所有者），在效果结束时会自动取消掉该标签。只在<code>Duration</code>模式下，生效且在开启<code>Stack</code>限制时，只会添加一此在对象上。</td></tr><tr><td>UTargetTagRequirementsGameplayEffectComponent</td><td>指定如果此GE须应用或继续执行，目标（Gameplay效果的拥有者）必须具备的标签要求。</td></tr><tr><td>URemoveOtherGameplayEffectComponent</td><td>基于某些条件移除其他Gameplay效果。</td></tr><tr><td>UCustomCanApplyGameplayEffectComponent</td><td>处理CustomApplicationRequirement函数的配置，以查看是否应该应用此Gameplay效果。</td></tr><tr><td>UImmunityGameplayEffectComponent</td><td>免疫会阻止其他GameplayEffectSpecs的应用。</td></tr></tbody></table><h2 id="replication-mode" tabindex="-1"><a class="header-anchor" href="#replication-mode" aria-hidden="true">#</a> Replication Mode</h2><table><thead><tr><th>Replication Mode</th><th>Use Case</th><th>Description</th></tr></thead><tbody><tr><td>Full</td><td>Single Player</td><td>Gameplay Effects are replicated to all clients</td></tr><tr><td>Mixed</td><td>Multiplayer,Player-Controlled</td><td>Gameplay Effects are replicated to the owning client only. Gameplay Cues and Gameplay Tags replicated to all clients.</td></tr><tr><td>Minimal</td><td>Multiplayer,AI-Controlled</td><td>GamePlay Effects are <strong>not</strong> replicated. Gameplay Cues and Gameplay Tags replicated to all clients.</td></tr></tbody></table><h2 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> Debug</h2><p>调试命令：<code>ShowDebug AbilitySystem</code></p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2><p>https://docs.unrealengine.com/5.0/en-US/gameplay-ability-system-for-unreal-engine/</p><p>https://github.com/tranek/GASDocumentation#intro</p>',62),h=[f];function b(k,A){return e(),t("div",null,h)}const T=a(y,[["render",b],["__file","GameplayAbilitySystem.html.vue"]]);export{T as default};
