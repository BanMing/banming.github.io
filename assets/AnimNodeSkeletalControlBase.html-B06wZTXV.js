import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,f as e,o as t}from"./app-BuwgwF29.js";const o="/assets/2025-03-29-16-05-05-Bg3201Wo.gif",p={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[e('<h1 id="animnode-skeletal-control-base" tabindex="-1"><a class="header-anchor" href="#animnode-skeletal-control-base"><span>AnimNode Skeletal Control Base</span></a></h1><p><code>FAnimNode_SkeletalControlBase</code> 是 Unreal Engine 动画蓝图（AnimBlueprint）中用于 <strong>骨骼变换控制（Skeletal Control）</strong> 的核心基类，所有基于骨骼的动画控制节点（如 <code>ModifyBone</code>、<code>LookAt</code>、<code>SpringBone</code>）都继承自它。它的核心作用是 <strong>在动画蓝图的 AnimGraph 中动态修改骨骼的 Transform（位置、旋转、缩放）</strong>，常用于 IK（逆向动力学）、物理模拟（如布料、头发）、程序化动画调整等场景。</p><p><a href="https://github.com/BanMing/LyraALS/blob/master/Source/LyraALS/Animation/AnimNode/AnimNode_MyCustomControl.cpp" target="_blank" rel="noopener noreferrer">简单例子</a>：</p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="fanimnode-skeletalcontrolbase-的核心作用" tabindex="-1"><a class="header-anchor" href="#fanimnode-skeletalcontrolbase-的核心作用"><span><strong>FAnimNode_SkeletalControlBase 的核心作用</strong></span></a></h2><h3 id="主要功能" tabindex="-1"><a class="header-anchor" href="#主要功能"><span><strong>主要功能</strong></span></a></h3><ul><li><strong>动态修改骨骼 Transform</strong>：允许在运行时通过代码调整骨骼的位置（<code>Location</code>）、旋转（<code>Rotation</code>）和缩放（<code>Scale</code>）。</li><li><strong>基于 Component Space（组件空间）计算</strong>：所有骨骼变换都是在 <strong>组件空间（Component Space）</strong> 下计算的，确保层级关系正确。</li><li><strong>支持 LOD（细节级别）</strong>：可以基于 LOD 级别决定是否执行该节点，优化性能。</li><li><strong>可调试性</strong>：提供 <code>GatherDebugData()</code> 方法，方便在动画蓝图中调试节点效果。</li></ul><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span><strong>适用场景</strong></span></a></h3><ul><li><strong>IK（逆向动力学）</strong>：如 <code>AnimNode_Fabrik</code>（FABRIK IK 求解器）就是基于它实现的。</li><li><strong>物理模拟</strong>：如 <code>AnimNode_SpringBone</code>（弹簧骨骼）用于模拟头发、尾巴的物理摆动。</li><li><strong>程序化动画调整</strong>：如 <code>AnimNode_ModifyBone</code> 直接修改骨骼 Transform。</li><li><strong>LookAt 控制</strong>：<code>AnimNode_LookAt</code> 让角色眼睛/头部跟随目标。</li></ul><hr><h2 id="fanimnode-skeletalcontrolbase-的核心代码解析" tabindex="-1"><a class="header-anchor" href="#fanimnode-skeletalcontrolbase-的核心代码解析"><span><strong>FAnimNode_SkeletalControlBase 的核心代码解析</strong></span></a></h2><h3 id="关键方法" tabindex="-1"><a class="header-anchor" href="#关键方法"><span><strong>关键方法</strong></span></a></h3><h4 id="evaluateskeletalcontrol-anythread-必须实现" tabindex="-1"><a class="header-anchor" href="#evaluateskeletalcontrol-anythread-必须实现"><span><strong><code>EvaluateSkeletalControl_AnyThread()</code>（必须实现）</strong></span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">EvaluateSkeletalControl_AnyThread</span><span class="token punctuation">(</span></span>
<span class="line">    FComponentSpacePoseContext<span class="token operator">&amp;</span> Output<span class="token punctuation">,</span> </span>
<span class="line">    TArray<span class="token operator">&lt;</span>FBoneTransform<span class="token operator">&gt;</span><span class="token operator">&amp;</span> OutBoneTransforms</span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>作用</strong>：核心计算函数，所有骨骼控制逻辑都在这里实现。</li><li><strong>参数</strong>： <ul><li><code>Output</code>：输入动画姿势（Component Space）。</li><li><code>OutBoneTransforms</code>：输出要修改的骨骼变换列表。</li></ul></li><li><strong>调用时机</strong>：在动画线程（AnimGraph 计算时）执行。</li></ul><h4 id="updateinternal" tabindex="-1"><a class="header-anchor" href="#updateinternal"><span><strong><code>UpdateInternal()</code></strong></span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">UpdateInternal</span><span class="token punctuation">(</span><span class="token keyword">const</span> FAnimationUpdateContext<span class="token operator">&amp;</span> Context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>作用</strong>： <ul><li>处理 LOD 判断（<code>IsLODEnabled()</code>）。</li><li>计算 <code>Alpha</code>（混合权重）是否生效。</li><li>调用 <code>PreUpdate()</code>（可被子类覆盖，用于预处理）。</li></ul></li></ul><h4 id="gatherdebugdata" tabindex="-1"><a class="header-anchor" href="#gatherdebugdata"><span><strong><code>GatherDebugData()</code></strong></span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">GatherDebugData</span><span class="token punctuation">(</span>FNodeDebugData<span class="token operator">&amp;</span> DebugData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>作用</strong>：收集调试信息，在动画蓝图的 <strong>Debug 模式</strong> 下显示节点状态。</li></ul><hr><h3 id="关键数据成员" tabindex="-1"><a class="header-anchor" href="#关键数据成员"><span><strong>关键数据成员</strong></span></a></h3><table><thead><tr><th>成员变量</th><th>作用</th></tr></thead><tbody><tr><td><code>FBoneReference BoneToModify</code></td><td>要控制的骨骼引用</td></tr><tr><td><code>FAlphaBlend Alpha</code></td><td>控制节点的影响权重（0~1）</td></tr><tr><td><code>FInputAlphaBoolBlend AlphaBoolBlend</code></td><td>用布尔值控制是否生效</td></tr><tr><td><code>int32 LODThreshold</code></td><td>低于该 LOD 级别时禁用节点</td></tr></tbody></table><hr><h2 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程"><span><strong>工作流程</strong></span></a></h2><p><code>FAnimNode_SkeletalControlBase</code> 在 AnimGraph 中的执行顺序如下：</p><ol><li><p><strong>初始化阶段（<code>Initialize_AnyThread</code>）</strong>：</p><ul><li>解析骨骼引用（<code>BoneToModify.Initialize()</code>）。</li><li>缓存必要的骨骼索引。</li></ul></li><li><p><strong>更新阶段（<code>Update_AnyThread</code>）</strong>：</p><ul><li>调用 <code>UpdateInternal()</code> 计算是否要执行（LOD + Alpha 判断）。</li><li>如果启用，则进入 <code>Evaluate</code> 阶段。</li></ul></li><li><p><strong>评估阶段（<code>EvaluateComponentSpace_AnyThread</code>）</strong>：</p><ul><li>调用 <code>EvaluateSkeletalControl_AnyThread()</code> 计算骨骼变换。</li><li>将结果写入 <code>FComponentSpacePoseContext</code>。</li></ul></li><li><p><strong>应用阶段（<code>EvaluateComponentSpace</code>）</strong>：</p><ul><li>最终变换会合并到 Component Space Pose 中。</li></ul></li></ol><hr><h2 id="如何自定义骨骼控制节点" tabindex="-1"><a class="header-anchor" href="#如何自定义骨骼控制节点"><span><strong>如何自定义骨骼控制节点？</strong></span></a></h2><h3 id="继承-fanimnode-skeletalcontrolbase" tabindex="-1"><a class="header-anchor" href="#继承-fanimnode-skeletalcontrolbase"><span><strong>继承 <code>FAnimNode_SkeletalControlBase</code></strong></span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token function">USTRUCT</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">MYANIMATION_API</span> FAnimNode_MyCustomControl <span class="token operator">:</span> <span class="token keyword">public</span> FAnimNode_SkeletalControlBase</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 要控制的骨骼</span></span>
<span class="line">    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;Settings&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    FBoneReference TargetBone<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 自定义参数</span></span>
<span class="line">    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;Settings&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">float</span> Strength <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 必须实现的核心计算函数</span></span>
<span class="line">    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">EvaluateSkeletalControl_AnyThread</span><span class="token punctuation">(</span></span>
<span class="line">        FComponentSpacePoseContext<span class="token operator">&amp;</span> Output<span class="token punctuation">,</span></span>
<span class="line">        TArray<span class="token operator">&lt;</span>FBoneTransform<span class="token operator">&gt;</span><span class="token operator">&amp;</span> OutBoneTransforms</span>
<span class="line">    <span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现-evaluateskeletalcontrol-anythread" tabindex="-1"><a class="header-anchor" href="#实现-evaluateskeletalcontrol-anythread"><span><strong>实现 <code>EvaluateSkeletalControl_AnyThread</code></strong></span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token class-name">FAnimNode_MyCustomControl</span><span class="token double-colon punctuation">::</span><span class="token function">EvaluateSkeletalControl_AnyThread</span><span class="token punctuation">(</span></span>
<span class="line">    FComponentSpacePoseContext<span class="token operator">&amp;</span> Output<span class="token punctuation">,</span></span>
<span class="line">    TArray<span class="token operator">&lt;</span>FBoneTransform<span class="token operator">&gt;</span><span class="token operator">&amp;</span> OutBoneTransforms</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1. 获取当前骨骼的 Component Space Transform</span></span>
<span class="line">    <span class="token keyword">const</span> FCompactPoseBoneIndex BoneIndex <span class="token operator">=</span> TargetBone<span class="token punctuation">.</span><span class="token function">GetCompactPoseIndex</span><span class="token punctuation">(</span>Output<span class="token punctuation">.</span>Pose<span class="token punctuation">.</span><span class="token function">GetPose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetBoneContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    FTransform BoneTransform <span class="token operator">=</span> Output<span class="token punctuation">.</span>Pose<span class="token punctuation">.</span><span class="token function">GetComponentSpaceTransform</span><span class="token punctuation">(</span>BoneIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2. 修改 Transform（示例：让骨骼沿X轴偏移）</span></span>
<span class="line">    BoneTransform<span class="token punctuation">.</span><span class="token function">AddToTranslation</span><span class="token punctuation">(</span><span class="token function">FVector</span><span class="token punctuation">(</span>Strength<span class="token punctuation">,</span> <span class="token number">0.f</span><span class="token punctuation">,</span> <span class="token number">0.f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3. 写入输出</span></span>
<span class="line">    OutBoneTransforms<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">FBoneTransform</span><span class="token punctuation">(</span>BoneIndex<span class="token punctuation">,</span> BoneTransform<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="性能优化建议" tabindex="-1"><a class="header-anchor" href="#性能优化建议"><span><strong>性能优化建议</strong></span></a></h2><ol><li><strong>减少骨骼计算量</strong>： <ul><li>只计算必要的骨骼，避免遍历整个骨骼树。</li></ul></li><li><strong>合理使用 LOD</strong>： <ul><li>高 LOD 时才启用复杂计算（如 <code>LODThreshold = 1</code>）。</li></ul></li><li><strong>缓存骨骼索引</strong>： <ul><li>在 <code>Initialize_AnyThread</code> 中缓存 <code>BoneIndex</code>，避免运行时查找。</li></ul></li><li><strong>避免频繁内存分配</strong>： <ul><li>尽量复用 <code>TArray&lt;FBoneTransform&gt;</code>，而不是每次 <code>Evaluate</code> 都 <code>Add</code>。</li><li>使用<code>UE_DONT_INLINE_CALL</code>调用方法，减少栈使用</li></ul></li></ol><hr><h2 id="实际案例-实现一个简单的-bone-wiggle-抖动效果" tabindex="-1"><a class="header-anchor" href="#实际案例-实现一个简单的-bone-wiggle-抖动效果"><span><strong>实际案例：实现一个简单的 &quot;Bone Wiggle&quot; 抖动效果</strong></span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// 在 EvaluateSkeletalControl_AnyThread 中加入抖动逻辑</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token class-name">FAnimNode_BoneWiggle</span><span class="token double-colon punctuation">::</span><span class="token function">EvaluateSkeletalControl_AnyThread</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">float</span> Time <span class="token operator">=</span> <span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">GetTimeSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">float</span> WiggleOffset <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Sin</span><span class="token punctuation">(</span>Time <span class="token operator">*</span> Speed<span class="token punctuation">)</span> <span class="token operator">*</span> Intensity<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    FTransform BoneTransform <span class="token operator">=</span> Output<span class="token punctuation">.</span>Pose<span class="token punctuation">.</span><span class="token function">GetComponentSpaceTransform</span><span class="token punctuation">(</span>BoneIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    BoneTransform<span class="token punctuation">.</span><span class="token function">AddToTranslation</span><span class="token punctuation">(</span><span class="token function">FVector</span><span class="token punctuation">(</span><span class="token number">0.f</span><span class="token punctuation">,</span> <span class="token number">0.f</span><span class="token punctuation">,</span> WiggleOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    OutBoneTransforms<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">FBoneTransform</span><span class="token punctuation">(</span>BoneIndex<span class="token punctuation">,</span> BoneTransform<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>效果：骨骼会沿着 Z 轴上下抖动，可用于呼吸、颤抖等动画增强。</li></ul><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h2><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><strong>核心用途</strong></td><td>动态修改骨骼 Transform</td></tr><tr><td><strong>计算空间</strong></td><td>Component Space（组件空间）</td></tr><tr><td><strong>关键方法</strong></td><td><code>EvaluateSkeletalControl_AnyThread()</code></td></tr><tr><td><strong>适用场景</strong></td><td>IK、物理模拟、程序化动画</td></tr><tr><td><strong>性能优化</strong></td><td>LOD + 骨骼索引缓存</td></tr></tbody></table><p><code>FAnimNode_SkeletalControlBase</code> 是 UE 动画系统中 <strong>最强大的骨骼控制工具之一</strong>，掌握它可以实现高度动态、程序化的动画效果。</p>`,46)]))}const d=s(p,[["render",l],["__file","AnimNodeSkeletalControlBase.html.vue"]]),u=JSON.parse('{"path":"/GameEngine/Unreal/animation/AnimNodeSkeletalControlBase.html","title":"AnimNode Skeletal Control Base","lang":"en-US","frontmatter":{"date":"2024-08-25T18:03:06.000Z","tag":["Unreal Engine","Animation"]},"git":{"createdTime":1743235961000,"updatedTime":1743235961000,"contributors":[{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":1,"url":"https://github.com/BanMing"}]},"readingTime":{"minutes":3.61,"words":1083},"filePathRelative":"GameEngine/Unreal/animation/AnimNodeSkeletalControlBase.md","localizedDate":"August 25, 2024","excerpt":"\\n<p><code>FAnimNode_SkeletalControlBase</code> 是 Unreal Engine 动画蓝图（AnimBlueprint）中用于 <strong>骨骼变换控制（Skeletal Control）</strong> 的核心基类，所有基于骨骼的动画控制节点（如 <code>ModifyBone</code>、<code>LookAt</code>、<code>SpringBone</code>）都继承自它。它的核心作用是 <strong>在动画蓝图的 AnimGraph 中动态修改骨骼的 Transform（位置、旋转、缩放）</strong>，常用于 IK（逆向动力学）、物理模拟（如布料、头发）、程序化动画调整等场景。</p>"}');export{d as comp,u as data};
