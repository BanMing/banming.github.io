import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,f as e,o as p}from"./app-DHJJuLtP.js";const t={};function c(o,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="智能指针" tabindex="-1"><a class="header-anchor" href="#智能指针"><span>智能指针</span></a></h1><h2 id="unique-ptr" tabindex="-1"><a class="header-anchor" href="#unique-ptr"><span>unique_ptr</span></a></h2><p>脱离作用域，该指针就会被释放。不能复制这个指针。</p><h2 id="weak-ptr" tabindex="-1"><a class="header-anchor" href="#weak-ptr"><span>weak_ptr</span></a></h2><p><code>std::weak_ptr</code> 是 C++11 标准库中的一个智能指针类型，用于解决 <code>std::shared_ptr</code> 循环引用的问题。<code>std::weak_ptr</code> 不控制所指向对象的生命周期，它只是观察一个由 <code>std::shared_ptr</code> 管理的对象。这意味着 <code>std::weak_ptr</code> 不会增加所指向对象的引用计数。</p><p><code>std::weak_ptr</code> 的主要特点如下：</p><ol><li><p><strong>不控制对象的生命周期</strong>：与 <code>std::shared_ptr</code> 不同，<code>std::weak_ptr</code> 不拥有所指向对象的所有权。当最后一个 <code>std::shared_ptr</code> 被销毁或重置时，无论是否有 <code>std::weak_ptr</code> 指向该对象，对象都会被删除。</p></li><li><p><strong>避免循环引用</strong>：在复杂的对象结构中，两个或多个对象相互持有对方的 <code>std::shared_ptr</code> 可能导致循环引用，从而使这些对象无法被正确删除。通过使用 <code>std::weak_ptr</code> 代替其中一个或多个 <code>std::shared_ptr</code>，可以打破循环引用，确保对象在不再需要时能够被正确删除。</p></li><li><p><strong>访问对象前需要锁定</strong>：由于 <code>std::weak_ptr</code> 不保证所指向的对象仍然存在（因为该对象可能已经被 <code>std::shared_ptr</code> 删除），所以在访问对象之前，通常需要先将其转换为 <code>std::shared_ptr</code>。这可以通过调用 <code>std::weak_ptr::lock</code> 方法实现，该方法会尝试获取一个指向对象的 <code>std::shared_ptr</code>。如果对象仍然存在，<code>lock</code> 方法会返回一个有效的 <code>std::shared_ptr</code>；否则，返回一个空的 <code>std::shared_ptr</code>。</p></li></ol><p>下面是一个简单的示例，展示了如何使用 <code>std::weak_ptr</code> 来避免循环引用：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>weak_ptr<span class="token operator">&lt;</span>Parent<span class="token operator">&gt;</span> parent<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">~</span><span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Child destroyed\\n&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Child<span class="token operator">&gt;</span> child<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">~</span><span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Parent destroyed\\n&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">auto</span> parent <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Parent<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">auto</span> child <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Child<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        parent<span class="token operator">-&gt;</span>child <span class="token operator">=</span> child<span class="token punctuation">;</span></span>
<span class="line">        child<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 此时，parent 和 child 对象相互持有对方的引用，但由于 child 使用的是 weak_ptr，</span></span>
<span class="line">        <span class="token comment">// 因此不会造成循环引用。当离开这个作用域时，parent 和 child 都会被正确删除。</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>Parent</code> 类持有一个指向 <code>Child</code> 的 <code>std::shared_ptr</code>，而 <code>Child</code> 类持有一个指向 <code>Parent</code> 的 <code>std::weak_ptr</code>。当 <code>parent</code> 和 <code>child</code> 对象离开作用域时，它们都会被正确删除，即使它们相互引用。这是因为 <code>std::weak_ptr</code> 不增加引用计数，所以不会阻止对象的删除。</p>`,10)]))}const d=n(t,[["render",c],["__file","SmartPtr.html.vue"]]),r=JSON.parse('{"path":"/Basic/language/Cplusplus/SmartPtr.html","title":"智能指针","lang":"en-US","frontmatter":{"date":"2023-03-15T19:20:37.000Z","tag":["C++"]},"git":{"createdTime":1678879237000,"updatedTime":1714063030000,"contributors":[{"name":"wupeng","username":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":3,"url":"https://github.com/wupeng"},{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":3,"url":"https://github.com/BanMing"}]},"readingTime":{"minutes":2.09,"words":628},"filePathRelative":"Basic/language/Cplusplus/SmartPtr.md","localizedDate":"March 15, 2023","excerpt":"\\n<h2>unique_ptr</h2>\\n<p>脱离作用域，该指针就会被释放。不能复制这个指针。</p>\\n<h2>weak_ptr</h2>\\n<p><code>std::weak_ptr</code> 是 C++11 标准库中的一个智能指针类型，用于解决 <code>std::shared_ptr</code> 循环引用的问题。<code>std::weak_ptr</code> 不控制所指向对象的生命周期，它只是观察一个由 <code>std::shared_ptr</code> 管理的对象。这意味着 <code>std::weak_ptr</code> 不会增加所指向对象的引用计数。</p>"}');export{d as comp,r as data};
