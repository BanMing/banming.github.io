import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as d,e as i,a as t,b as o}from"./app-_BRcm9gM.js";const n="/assets/1594968555061-e616da5e-f1dc-462e-a046-204828525c65-umpWhroB.png",r="/assets/1594968570010-fdf7402d-b49b-4eb8-aa6d-6b2ad79e1d9d-VnrD4CtS.png",s="/assets/1594968578401-f071ea60-8880-46ed-acc3-68e1601cd886-APGaljRy.png",l="/assets/1594968583238-1e7bb869-fb0b-448f-9a20-c299944b6539-6jELjAM_.png",p={},c=r+"#align=left&display=inline&height=529&margin=[object%20Object]&name=2.png&originHeight=529&originWidth=872&size=424253&status=done&style=none&width=872",h=s+"#align=left&display=inline&height=376&margin=[object%20Object]&name=3.png&originHeight=376&originWidth=972&size=432706&status=done&style=none&width=972",g=i('<h1 id="音效设置" tabindex="-1"><a class="header-anchor" href="#音效设置" aria-hidden="true">#</a> 音效设置</h1><h2 id="设置界面" tabindex="-1"><a class="header-anchor" href="#设置界面" aria-hidden="true">#</a> 设置界面</h2><p><img src="'+n+'" alt="5.png" loading="lazy"> 这里使用一个2.4mb背景音乐做参数测试</p><ul><li><p>Force To Mono : 强制把多声道文件设置为单声道，使用此选项可降低内存的的占用。（音质会受影响，打开后大小为0.6mb）</p></li><li><p>Load In Background: 后台加载，这里做了个测试：</p><ol><li>以流的方式加载，打开选项，内存：202kb</li><li>以流的方式加载，关闭选项，内存：192kb</li></ol><p>是不是意味着打开后台加载，会造成内存的多占用。</p></li><li><p>Ambisonic:3d环绕音响</p></li><li><p>Load Type : 记载方式（测试在开启Force To Mono）</p></li><li><p>Streaming: 流的方式加载，内存占用少（200kb），Streaming CPU占用大，适用于大于200kb的文件。</p></li><li><p>Decompress On Load: 加载时就解压，内存占用极大（6.5mb），CPU占用极小</p></li><li><p>Compress In Memory：在内存中解压，内存占用大（0.6mb），DSP CPU占用大，加载速度极快</p></li><li><p>Preload Audio Data：在场景加载时就加载音效</p><ol><li>这里有个问题：是打开了这个，是否是在加载任何场景都会加载该音效？还是只加载场景中用到的打了这个音效的资源，但是如果加载场景，场景会自动加载场景中所有资源，难道是提前一些？</li><li>测试打开，不会再任何场景加载时加载打开的音效</li></ol></li><li><p>Compression Format: 压缩方式</p><ol><li>PCM:无损</li><li>Vorbis:压缩为ogg，压缩最小，一般用这个。</li><li>ADPCM:稍微压缩，是pcm压缩率的3.5倍。</li></ol></li></ul><h2 id="加载速度对比" tabindex="-1"><a class="header-anchor" href="#加载速度对比" aria-hidden="true">#</a> 加载速度对比</h2><table><thead><tr><th>Load in Background</th><th>格式设置</th><th>速度倍数</th></tr></thead><tbody><tr><td>开</td><td>Compressed + Vorbis</td><td>1倍</td></tr><tr><td>开</td><td>其他格式 + Vorbis</td><td>1倍</td></tr><tr><td>开</td><td>所有格 + PCM</td><td>5倍</td></tr><tr><td>关</td><td>Compressed + Vorbis</td><td>1倍</td></tr><tr><td>关</td><td>其他格式 + Vorbis</td><td>1倍</td></tr><tr><td>关</td><td>所有格 + PCM</td><td>9倍</td></tr></tbody></table><h2 id="内存占用对比" tabindex="-1"><a class="header-anchor" href="#内存占用对比" aria-hidden="true">#</a> 内存占用对比</h2>',7),b=t("figure",null,[t("img",{src:c,alt:"2.png",tabindex:"0",loading:"lazy"}),t("figcaption",null,"2.png")],-1),m=t("h2",{id:"参考测试数据",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#参考测试数据","aria-hidden":"true"},"#"),o(" 参考测试数据")],-1),_=t("figure",null,[t("img",{src:h,alt:"3.png",tabindex:"0",loading:"lazy"}),t("figcaption",null,"3.png")],-1),u=i('<h2 id="测试数据-12个背景音乐同事播放" tabindex="-1"><a class="header-anchor" href="#测试数据-12个背景音乐同事播放" aria-hidden="true">#</a> 测试数据：12个背景音乐同事播放</h2><figure><img src="'+l+'" alt="4.png" tabindex="0" loading="lazy"><figcaption>4.png</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>格式：mp3，在苹果设备上有优化，这里格式使用wav也可以，反而会更好些，因为unity在打包时，都会重新设置格式。包括图片也是。</p><p>Load In Background 可以用在背景音乐</p><p>Compression Format 使用Vorbis就可以，Quality选项调整到50%</p><p>频繁使用的音效：Decompress On Load</p><p>都可以选择上Force To Mono</p><p>在手机上出现了声音延迟的情况，在查阅逻辑无误后，可修改AudioSetting中的DSP Buffer Size。这个是来控制传输音效数据到cpu的一个桶，如果出现延迟就是这个桶的值太大。如果过小的话，就会出现cpu负担。有点像drawcall。</p>',9),f=[g,b,m,_,u];function y(x,C){return a(),d("div",null,f)}const k=e(p,[["render",y],["__file","sound_setting.html.vue"]]);export{k as default};
