import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as c,c as o,a as n,b as a,d as e,e as t}from"./app-9NK56ceF.js";const p={},d=t('<h1 id="cmake" tabindex="-1"><a class="header-anchor" href="#cmake" aria-hidden="true">#</a> CMake</h1><h2 id="building-a-basic-project" tabindex="-1"><a class="header-anchor" href="#building-a-basic-project" aria-hidden="true">#</a> Building a Basic Project</h2><ul><li>CmakeLists.txt：根目录下一定要有的文件</li><li>cmake_minimum_required()：设置cmake的版本</li><li>project()：传入项目名字与项目版本号，相当于Visual Studio中的解决方案</li><li>add_executable()：设置一个可执行的库，相当于Visual Studio中的一个可运行的项目(main)</li></ul><h3 id="specifying-the-c-standard" tabindex="-1"><a class="header-anchor" href="#specifying-the-c-standard" aria-hidden="true">#</a> Specifying the C++ Standard</h3>',4),r={href:"https://cmake.org/cmake/help/latest/manual/cmake-variables.7.html",target:"_blank",rel:"noopener noreferrer"},u=t(`<p>其中设置C++版本可以使用一下两个变量：</p><ul><li>CMAKE_CXX_STANDARD</li><li>CMAKE_CXX_STANDARD_REQUIRED</li></ul><p>在CMakeLists.txt文件中添加一下代码，就是为工程设置C++11编码标准：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">11</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD_REQUIRED</span> True<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="adding-a-version-number-and-configured-header-file" tabindex="-1"><a class="header-anchor" href="#adding-a-version-number-and-configured-header-file" aria-hidden="true">#</a> Adding a Version Number and Configured Header File</h3><p>CMake中有很多预设变量，这些变量可以在c++中使用。需要在CMakeLists文件使用<code>configure_file</code>语句。用法如下：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">configure_file</span><span class="token punctuation">(</span>TutorialConfig.h.in TutorialConfig.h<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里就是把与<code>CMakeLists.txt</code>同目录下的<code>TutorialConfig.h.in</code>文件拷贝到<code>build</code>文件夹里。当然复制目录和生成目录都可以自定义设置。</p><p>使用CMake中的变量时，需要使用<code>@</code>包裹着变量，实例如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CMAKE_PROJECT_VERSION_MAJOR</span> <span class="token expression">@Tutorial_VERSION_MAJOR@</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="adding-a-library" tabindex="-1"><a class="header-anchor" href="#adding-a-library" aria-hidden="true">#</a> Adding a Library</h2>`,11),k=n("code",null,"main",-1),m=n("code",null,"CMakeLists.txt",-1),v={href:"https://cmake.org/cmake/help/latest/command/add_library.html#command:add_library",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">add_library</span><span class="token punctuation">(</span>lib_name header.h file1.cxx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个参数为库名字，后面加上需要编入库的文件，当然可以使用<code>set</code>、<code>file</code>等命令来把多个文件集合为一个变量。</p><p>把库工程连接到执行工程中，首先需要链接库的CMakeLists文件，使用<code>add_subdirectory()</code>命令。传入库文件夹的相对于执行工程的CMakeLists文件的目录即可。如下目录：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>│   CMakeLists.txt
│   tutorial.cxx
│   TutorialConfig.h.in
│
└───MathFunctions
        CMakeLists.txt
        MathFunctions.h
        mysqrt.cxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>add_subdirectory(MathFunctions)</code>即可，然后使用<code>target_link_libraries()</code>命令把库链接到执行文件中。</p><h3 id="making-our-library-optional" tabindex="-1"><a class="header-anchor" href="#making-our-library-optional" aria-hidden="true">#</a> Making Our Library Optional</h3>`,6),h={href:"https://cmake.org/cmake/help/latest/command/option.html#command:option",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>在<code>configure_file</code>文件中使用<code>cmakedefine</code>可以把<code>option</code>中设置的变量设置为宏变量，使用如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">cmakedefine</span> <span class="token expression">USE_MAMATH</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="adding-usage-requirements-for-a-library" tabindex="-1"><a class="header-anchor" href="#adding-usage-requirements-for-a-library" aria-hidden="true">#</a> Adding Usage Requirements for a Library</h2><p>以下为可以配置使用要求的命令：</p><ul><li>target_compile_definitions()</li><li>target_compile_options()</li><li>target_include_directories()</li><li>target_link_directories()</li><li>target_link_options()</li><li>target_precompile_headers()</li><li>target_sources()</li></ul>`,5),_=n("code",null,"INTERFACE",-1),E=n("code",null,"PUBLIC",-1),f=n("code",null,"PRIVATE",-1),C={href:"https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#target-usage-requirements",target:"_blank",rel:"noopener noreferrer"},R=t(`<p>举个例子：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">add_library</span><span class="token punctuation">(</span>MathFunctions mysqrt.cxx<span class="token punctuation">)</span>
<span class="token keyword">target_include_directories</span><span class="token punctuation">(</span>MathFunctions <span class="token namespace">INTERFACE</span> <span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该命令是把链接该库的所有target都自动添加引用路径。</p><h2 id="adding-generator-expressions" tabindex="-1"><a class="header-anchor" href="#adding-generator-expressions" aria-hidden="true">#</a> Adding Generator Expressions</h2>`,4),y={href:"https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#manual:cmake-generator-expressions(7)",target:"_blank",rel:"noopener noreferrer"},x=t(`<h3 id="setting-the-c-standard-with-interface-libraries" tabindex="-1"><a class="header-anchor" href="#setting-the-c-standard-with-interface-libraries" aria-hidden="true">#</a> Setting the C++ Standard with Interface Libraries</h3><p>使用一个公共库来设置编译要求，如设置c++版本，前面讲到使用<code>set(CMAKE_CXX_STANDARD 11)</code>该命令设置，这里可以创建一个公共库，专门来配置生成器的编译配置，示例如下：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">add_library</span><span class="token punctuation">(</span>tutorial_compiler_flags <span class="token namespace">INTERFACE</span><span class="token punctuation">)</span>
<span class="token keyword">target_compile_features</span><span class="token punctuation">(</span>tutorial_compiler_flags <span class="token namespace">INTERFACE</span> <span class="token property">cxx_std_11</span><span class="token punctuation">)</span>

<span class="token comment"># 最终连接该库即可</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>Tutorial <span class="token namespace">PUBLIC</span> <span class="token punctuation">\${</span>EXTRA_LIBS<span class="token punctuation">}</span> tutorial_compiler_flags<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="adding-compiler-warning-flags-with-generator-expressions" tabindex="-1"><a class="header-anchor" href="#adding-compiler-warning-flags-with-generator-expressions" aria-hidden="true">#</a> Adding Compiler Warning Flags with Generator Expressions</h3><h2 id="installing-and-testing" tabindex="-1"><a class="header-anchor" href="#installing-and-testing" aria-hidden="true">#</a> Installing and Testing</h2><h3 id="install-rules" tabindex="-1"><a class="header-anchor" href="#install-rules" aria-hidden="true">#</a> Install Rules</h3><p>安装就是把工程打包可执行文件与lib文件，打出目录如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├───bin
│       Tutorial.exe
│
├───include
│       MathFunctions.h
│       TutorialConfig.h
│
└───lib
        MathFunctions.lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),T={href:"https://cmake.org/cmake/help/latest/command/install.html#command:install",target:"_blank",rel:"noopener noreferrer"},A=t(`<ul><li>bin：可执行文件 <code>install(TARGETS Tutorial DESTINATION bin)</code></li><li>include：头文件 <code>install(FILES MathFunctions.h DESTINATION include)</code></li><li>lib：库文件<div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set</span><span class="token punctuation">(</span>installable_libs MathFunctions tutorial_compiler_flags<span class="token punctuation">)</span>
<span class="token keyword">install</span><span class="token punctuation">(</span>TARGETS <span class="token punctuation">\${</span>installable_libs<span class="token punctuation">}</span> DESTINATION lib<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>值得注意的是，需要把库或可执行文件全部配置完成后，再执行安装命令。</p><p>安装命令，需要先执行build命令再执行安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> build
cmake <span class="token punctuation">..</span>
cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--config</span> Release
<span class="token comment"># 安装到默认文件夹</span>
cmake <span class="token parameter variable">--install</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--config</span> Release
<span class="token comment"># 指定安装目录</span>
cmake <span class="token parameter variable">--install</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--config</span> Release <span class="token parameter variable">--prefix</span> <span class="token string">&quot;/home/myuser/installdir&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="testing-support" tabindex="-1"><a class="header-anchor" href="#testing-support" aria-hidden="true">#</a> Testing Support</h3><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">enable_testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Add a test called Runs which runs the following command:</span>
<span class="token comment"># $ Tutorial 25</span>
<span class="token keyword">add_test</span><span class="token punctuation">(</span><span class="token property">NAME</span> Runs COMMAND Tutorial <span class="token number">25</span><span class="token punctuation">)</span>

<span class="token comment"># Add a test called Usage which runs the following command:</span>
<span class="token comment"># $ Tutorial</span>
<span class="token comment"># Make sure the expected output is displayed.</span>
<span class="token comment"># Hint: Use the PASS_REGULAR_EXPRESSION property with &quot;Usage.*number&quot;</span>
<span class="token keyword">add_test</span><span class="token punctuation">(</span><span class="token property">NAME</span> Usage COMMAND Tutorial<span class="token punctuation">)</span>
<span class="token keyword">set_tests_properties</span><span class="token punctuation">(</span>Usage <span class="token namespace">PROPERTIES</span> <span class="token property">PASS_REGULAR_EXPRESSION</span> <span class="token string">&quot;Usage:.*number&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># Add a test which runs the following command:</span>
<span class="token comment"># $ Tutorial 4</span>
<span class="token comment"># Make sure the result is correct.</span>
<span class="token comment"># Hint: Use the PASS_REGULAR_EXPRESSION property with &quot;4 is 2&quot;</span>
<span class="token keyword">add_test</span><span class="token punctuation">(</span><span class="token property">NAME</span> StandardUse COMMAND Tutorial <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">set_tests_properties</span><span class="token punctuation">(</span>StandardUse
  <span class="token namespace">PROPERTIES</span> <span class="token property">PASS_REGULAR_EXPRESSION</span> <span class="token string">&quot;4 is 2&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment"># Add more tests. Create a function called do_test to avoid copy +</span>
<span class="token comment"># paste. Test the following values: 4, 9, 5, 7, 25, -25 and 0.0001.</span>
<span class="token keyword">function</span><span class="token punctuation">(</span>do_test target arg result<span class="token punctuation">)</span>
  <span class="token keyword">add_test</span><span class="token punctuation">(</span><span class="token property">NAME</span> Comp<span class="token punctuation">\${</span>arg<span class="token punctuation">}</span> COMMAND <span class="token punctuation">\${</span>target<span class="token punctuation">}</span> <span class="token punctuation">\${</span>arg<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">set_tests_properties</span><span class="token punctuation">(</span>Comp<span class="token punctuation">\${</span>arg<span class="token punctuation">}</span>
    <span class="token namespace">PROPERTIES</span> <span class="token property">PASS_REGULAR_EXPRESSION</span> <span class="token punctuation">\${</span>result<span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
<span class="token keyword">endfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># do a bunch of result based tests</span>
<span class="token function">do_test</span><span class="token punctuation">(</span>Tutorial <span class="token number">4</span> <span class="token string">&quot;4 is 2&quot;</span><span class="token punctuation">)</span>
<span class="token function">do_test</span><span class="token punctuation">(</span>Tutorial <span class="token number">9</span> <span class="token string">&quot;9 is 3&quot;</span><span class="token punctuation">)</span>
<span class="token function">do_test</span><span class="token punctuation">(</span>Tutorial <span class="token number">5</span> <span class="token string">&quot;5 is 2.236&quot;</span><span class="token punctuation">)</span>
<span class="token function">do_test</span><span class="token punctuation">(</span>Tutorial <span class="token number">7</span> <span class="token string">&quot;7 is 2.645&quot;</span><span class="token punctuation">)</span>
<span class="token function">do_test</span><span class="token punctuation">(</span>Tutorial <span class="token number">25</span> <span class="token string">&quot;25 is 5&quot;</span><span class="token punctuation">)</span>
<span class="token function">do_test</span><span class="token punctuation">(</span>Tutorial -<span class="token number">25</span> <span class="token string">&quot;-25 is (-nan|nan|0)&quot;</span><span class="token punctuation">)</span>
<span class="token function">do_test</span><span class="token punctuation">(</span>Tutorial <span class="token number">0.0001</span> <span class="token string">&quot;0.0001 is 0.01&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="adding-support-for-a-testing-dashboard" tabindex="-1"><a class="header-anchor" href="#adding-support-for-a-testing-dashboard" aria-hidden="true">#</a> Adding Support for a Testing Dashboard</h3><p>可以设置后台编译结果查看，式例：https://my.cdash.org/index.php?project=CMakeTutorial 设置如下：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set</span><span class="token punctuation">(</span>CTEST_PROJECT_NAME <span class="token string">&quot;CMakeTutorial&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CTEST_NIGHTLY_START_TIME</span> <span class="token string">&quot;00:00:00 EST&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CTEST_DROP_METHOD</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CTEST_DROP_SITE</span> <span class="token string">&quot;my.cdash.org&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CTEST_DROP_LOCATION</span> <span class="token string">&quot;/submit.php?project=CMakeTutorial&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CTEST_DROP_SITE_CDASH</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="adding-system-introspection" tabindex="-1"><a class="header-anchor" href="#adding-system-introspection" aria-hidden="true">#</a> Adding System Introspection</h3><p>根据不同平台可以的标准库不同，来设置宏：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">include</span><span class="token punctuation">(</span>CheckCXXSourceCompiles<span class="token punctuation">)</span>

<span class="token comment"># Use check_cxx_source_compiles with simple C++ code to verify</span>
<span class="token comment"># availability of:</span>
<span class="token comment"># * std::log</span>
<span class="token comment"># * std::exp</span>
<span class="token comment"># Store the results in HAVE_LOG and HAVE_EXP respectively.</span>
<span class="token function">check_cxx_source_compiles</span><span class="token punctuation">(</span><span class="token string">&quot;
    #include &lt;cmath&gt;
    int main(){
        std::log(1.0);
        return 0;
    }
&quot;</span> HAVE_LOG<span class="token punctuation">)</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>HAVE_LOG<span class="token punctuation">)</span>
    <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>MathFunctions <span class="token namespace">PRIVATE</span> <span class="token string">&quot;HAVE_LOG&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="adding-a-custom-command-and-generated-file" tabindex="-1"><a class="header-anchor" href="#adding-a-custom-command-and-generated-file" aria-hidden="true">#</a> Adding a Custom Command and Generated File</h3>`,13),S={href:"https://cmake.org/cmake/help/latest/command/add_custom_command.html",target:"_blank",rel:"noopener noreferrer"},O=t(`<ul><li>直接运行</li><li>监听构建过程，指定某个阶段执行 <ul><li>PRE_BUILD</li><li>PRE_LINK</li><li>POST_BUILD</li></ul></li></ul><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">add_custom_command</span><span class="token punctuation">(</span>
  OUTPUT table.csv
  COMMAND makeTable -i <span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">}</span>/input.dat
                    -o table.csv
  <span class="token property">DEPENDS</span> <span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">}</span>/input.dat
  VERBATIM<span class="token punctuation">)</span>
<span class="token keyword">add_custom_target</span><span class="token punctuation">(</span>generate_table_csv <span class="token property">DEPENDS</span> table.csv<span class="token punctuation">)</span>

<span class="token keyword">add_custom_command</span><span class="token punctuation">(</span>
  OUTPUT foo.cxx
  COMMAND genFromTable -i table.csv -case foo -o foo.cxx
  <span class="token property">DEPENDS</span> table.csv           <span class="token comment"># file-level dependency</span>
          generate_table_csv  <span class="token comment"># target-level dependency</span>
  VERBATIM<span class="token punctuation">)</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>foo foo.cxx<span class="token punctuation">)</span>

<span class="token keyword">add_custom_command</span><span class="token punctuation">(</span>
  OUTPUT bar.cxx
  COMMAND genFromTable -i table.csv -case bar -o bar.cxx
  <span class="token property">DEPENDS</span> table.csv           <span class="token comment"># file-level dependency</span>
          generate_table_csv  <span class="token comment"># target-level dependency</span>
  VERBATIM<span class="token punctuation">)</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>bar bar.cxx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="packaging-an-installer" tabindex="-1"><a class="header-anchor" href="#packaging-an-installer" aria-hidden="true">#</a> Packaging an Installer</h3><p>在顶层<code>CMakeLists.txt</code>最后加上以下代码：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">include</span><span class="token punctuation">(</span>InstallRequiredSystemLibraries<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>CPACK_RESOURCE_FILE_LICENSE <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">}</span></span>/License.txt&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CPACK_PACKAGE_VERSION_MAJOR</span> <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">Tutorial_VERSION_MAJOR</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CPACK_PACKAGE_VERSION_MINOR</span> <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">Tutorial_VERSION_MINOR</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>CPACK_SOURCE_GENERATOR <span class="token string">&quot;TGZ&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">include</span><span class="token punctuation">(</span>CPack<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着运行以下命令：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code>cmake --build .
<span class="token comment"># 默认打包设置，使用nsis</span>
cpack

<span class="token comment"># 同样可以指定设置打包压缩文件</span>
<span class="token comment"># cpack -G ZIP -C Debug</span>

<span class="token comment"># 也可以指定打包设置</span>
<span class="token comment"># cpack --config CPackSourceConfig.cmake</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里生成的就是<code>install</code>配置安装的包体。</p><h3 id="selecting-static-or-shared-libraries" tabindex="-1"><a class="header-anchor" href="#selecting-static-or-shared-libraries" aria-hidden="true">#</a> Selecting Static or Shared Libraries</h3><p>使用<code>BUILD_SHARED_LIBS</code>字段来控制所有库共享属性，使用如下：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">option</span><span class="token punctuation">(</span><span class="token variable">BUILD_SHARED_LIBS</span> <span class="token string">&quot;Global flag to cause add_library() to create shared libraries if on&quot;</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开关设置为<code>ON</code>/<code>OFF</code>。</p><h3 id="adding-export-configuration" tabindex="-1"><a class="header-anchor" href="#adding-export-configuration" aria-hidden="true">#</a> Adding Export Configuration</h3><p>设置自定义命令</p><h3 id="packaging-debug-and-release" tabindex="-1"><a class="header-anchor" href="#packaging-debug-and-release" aria-hidden="true">#</a> Packaging Debug and Release</h3><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><p>直接使用<code>cmake</code>命令在拥有<code>CMakeLists.txt</code>的目录下，会自动识别当前的运行的平台，来设置编译器和平台等。</p><p>需要特殊设置可以使用以下命令：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code>cmake -B $CMakeBuildPath -G $Generator -A $Arch -DCMAKE_TOOLCHAIN_FILE=<span class="token string">&quot;$Toolchain&quot;</span> -DCMAKE_BUILD_TYPE=Release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>B 输出构建工程的路径</li><li>G 编译器</li><li>A 平台，64位或32位等</li></ul><p>以下两个也可以在<code>CMakeLists.txt</code>中使用<code>set</code>命令直接设置：</p><ul><li>DCMAKE_TOOLCHAIN_FILE 工具链，特殊平台编译需要使用的一些预设</li><li>DCMAKE_BUILD_TYPE 打包的配置</li></ul><p>Windows的几个编译配置：</p><ol><li>Release: high optimization level, no debug info, code or asserts.</li><li>Debug: No optimization, asserts enabled, [custom debug (output) code enabled], debug info included in executable (so you can step through the code with a debugger and have address to source-file:line-number translation).</li><li>RelWithDebInfo: optimized, <em>with</em> debug info, but no debug (output) code or asserts.</li><li>MinSizeRel: same as Release but optimizing for size rather than speed.</li></ol><h2 id="常用变量" tabindex="-1"><a class="header-anchor" href="#常用变量" aria-hidden="true">#</a> 常用变量</h2><ul><li>PROJECT_SOURCE_DIR: 使用<code>project</code>命令的目录</li><li>PROJECT_BINARY_DIR：build目录</li><li>CMAKE_CURRENT_SOURCE_DIR：当前CMakeLists文件目录</li></ul><h2 id="常用语句设置" tabindex="-1"><a class="header-anchor" href="#常用语句设置" aria-hidden="true">#</a> 常用语句设置</h2><h3 id="target-include-directories" tabindex="-1"><a class="header-anchor" href="#target-include-directories" aria-hidden="true">#</a> target_include_directories</h3><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">target_include_directories</span><span class="token punctuation">(</span>Tutorial <span class="token namespace">PUBLIC</span> <span class="token punctuation">\${</span><span class="token variable">PROJECT_BINARY_DIR</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,29),M={href:"https://cmake.org/cmake/help/latest/command/target_include_directories.html#command:target_include_directories",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,[a("对一个Target指定一个路径，在写"),n("code",null,"#include"),a("时，可以省略写指定的路径。有3个范围限定:")],-1),w=n("ul",null,[n("li",null,"INTERFACE：仅有头文件，没有实现。设置为公共库引用，可以把公共接口抽象出来，并将其与库实现分离。"),n("li",null,"PUBLIC: 在头文件和实现中使用，对应的路径"),n("li",null,"PRIVATE：只在实现中使用，对应的路径")],-1),N={href:"https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#target-usage-requirements",target:"_blank",rel:"noopener noreferrer"},P=n("h3",{id:"list",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#list","aria-hidden":"true"},"#"),a(" list")],-1),U={href:"https://cmake.org/cmake/help/latest/command/list.html#command:list",target:"_blank",rel:"noopener noreferrer"},q=t(`<h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h3><p>建议直接使用<code>set</code>命令 而不是<code>file(GLOB_RECURSE)</code>，因为后者有以下缺点：</p><ul><li>GLOB 命令只会在 CMake 首次运行时执行一次，并且不会更新文件列表，因此如果你添加或删除了文件，则不会自动更新 CMake 构建。</li><li>对于大型项目来说，GLOB 命令可能会变得很慢，因为它需要扫描整个源目录树。</li><li>GLOB 命令无法处理重命名和移动文件的情况。</li></ul><p>可以使用<code>set</code>命令直接储存文件，使用如下：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token property">SOURCES</span>
    src/foo.cpp
    src/bar.cpp
    <span class="token punctuation">)</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>my_lib <span class="token punctuation">\${</span><span class="token property">SOURCES</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置vs使用文件夹包裹" tabindex="-1"><a class="header-anchor" href="#设置vs使用文件夹包裹" aria-hidden="true">#</a> 设置VS使用文件夹包裹</h3><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">CMAKE_GENERATOR</span> <span class="token operator">MATCHES</span> <span class="token string">&quot;Visual Studio&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">set_property</span><span class="token punctuation">(</span>GLOBAL PROPERTY <span class="token property">USE_FOLDERS</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cmake-dependent-option" tabindex="-1"><a class="header-anchor" href="#cmake-dependent-option" aria-hidden="true">#</a> cmake_dependent_option</h3><p>https://cmake.org/cmake/help/latest/module/CMakeDependentOption.html</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token function">cmake_dependent_option</span><span class="token punctuation">(</span>USE_FOO <span class="token string">&quot;Use Foo&quot;</span> <span class="token boolean">ON</span> <span class="token string">&quot;USE_BAR&quot;</span> <span class="token boolean">OFF</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果<code>USE_BAR</code>为<code>ON</code>，那么<code>USE_FOO</code>为<code>ON</code>，否则为<code>OFF</code>。简单来说就是依赖项为真，那么选项的值就为前面，反之为后面。</p><p>该设置不会有引用属性，也就是后续修改<code>USE_BAR</code>值，<code>USE_FOO</code>值并不会修改。</p><h2 id="模板" tabindex="-1"><a class="header-anchor" href="#模板" aria-hidden="true">#</a> 模板</h2><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 设置cmake版本</span>
<span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.0.0</span><span class="token punctuation">)</span>

<span class="token comment"># 设置项目名称为dome </span>
<span class="token comment"># 这里对应变量\${PROJECT_NAME}</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>dome <span class="token property">VERSION</span> <span class="token number">0.1.0</span><span class="token punctuation">)</span>

<span class="token comment"># 设置引用目录 可省略头文件目录</span>
<span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span>/include/<span class="token punctuation">)</span>

<span class="token comment"># 搜索src模板下的cpp文件（顶层）设置到变量SOURCE_FILES</span>
<span class="token keyword">file</span><span class="token punctuation">(</span>GLOB_RECURSE SOURCE_FILES <span class="token punctuation">\${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span>/src/*cpp<span class="token punctuation">)</span>
<span class="token comment"># 打印</span>
<span class="token comment">#message(\${SOURCE_FILES})</span>

<span class="token comment"># 这里设置两个库 dome_src dome_libsrc</span>
<span class="token comment"># 这里有个奇异的点就是 库的名字必须是\${PROJECT_NAME}这个开头 不然无法链接到</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>_src <span class="token namespace">SHARED</span> <span class="token punctuation">\${</span>SOURCE_FILES<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 这个是直接输入源文件到库</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>_libsrc <span class="token namespace">SHARED</span> libsrc/i.cpp<span class="token punctuation">)</span>

<span class="token comment"># 添加可执行文件 编译</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span> example/i_love_China.cpp<span class="token punctuation">)</span>

<span class="token comment"># 这里把库文件链接到可执行文件中</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>
<span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>_src
<span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>_libsrc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="报错" tabindex="-1"><a class="header-anchor" href="#报错" aria-hidden="true">#</a> 报错</h2><hr><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code>  <span class="token property">Failed to run MSBuild command:</span>

    <span class="token file-path string">C:/Program</span> Files <span class="token operator">(</span>x86<span class="token operator">)</span><span class="token operator">/</span>Microsoft Visual Studio<span class="token operator">/</span><span class="token number">2019</span><span class="token operator">/</span>Professional<span class="token operator">/</span>MSBuild<span class="token operator">/</span>Current<span class="token operator">/</span>Bin<span class="token operator">/</span>MSBuild<span class="token punctuation">.</span>exe

  <span class="token property">to get the value of VCTargetsPath:</span>

    Access violation
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决：https://stackoverflow.com/questions/61842794/cmake-cant-get-the-value-of-vctargetspath-when-generating-for-uwp</p><p>From <code>VisualStudio Installer</code> app, click <code>Modify</code> and install <code>C++ Universal Windows Platform support for v142 build tools (ARM64) </code>individual component.</p><hr><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>cmake <code>marco</code>和<code>function</code> 的区别不大，但是前者是有点像值传递的感觉，后者有点像引用传递。</p><h2 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h2><p>https://cmake.org/cmake/help/latest/guide/tutorial/index.html</p><p>https://modern-cmake-cn.github.io/Modern-CMake-zh_CN/</p>`,25);function D(L,F){const s=l("ExternalLinkIcon");return c(),o("div",null,[d,n("p",null,[a("Cmake中有很多预设变量，"),n("a",r,[a("详情可以看这里"),e(s)]),a("。")]),u,n("p",null,[a("添加一个库工程，也就是Visual Studio中没有"),k,a("函数的项目。使用一个文件夹作为库工程的根目录，在该根目录中需要加入"),m,a("文件。在该文件中使用"),n("a",v,[a("add_library()"),e(s)]),a("。使用实例如下：")]),b,n("p",null,[a("在项目中会使用一些配置来控制工程，使用"),n("a",h,[a('option(<variable> "<help_text>" [value])'),e(s)]),a("命令来控制。")]),g,n("p",null,[a("其中使用需求有"),_,a("，"),E,a("，"),f,a("。他们的不同可以"),n("a",C,[a("看这里"),e(s)]),a("。")]),R,n("p",null,[a("可以设置生成器的一些特殊构建信息。"),n("a",y,[a("文档"),e(s)])]),x,n("p",null,[a("文件目录可以自定义，主要使用"),n("a",T,[a("install()"),e(s)]),a("命令进行配置。主要分为三种：")]),A,n("p",null,[a("在构建时，可以执行特殊命令来生成文件，命令是由一个C++的可执行的库组成的。"),n("a",S,[a("文档"),e(s)]),a("。这有两种方式调用：")]),O,n("p",null,[n("a",M,[a("文档"),e(s)])]),I,w,n("p",null,[n("a",N,[a("范围参考"),e(s)])]),P,n("p",null,[a("可以把一些变量存放到一个列表中，并对该列表进行维护。"),n("a",U,[a("文档"),e(s)])]),q])}const V=i(p,[["render",D],["__file","Cmake.html.vue"]]);export{V as default};
