import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,b as t}from"./app-CXjdBmfs.js";const e={},o=t(`<h1 id="height-checker" tabindex="-1"><a class="header-anchor" href="#height-checker" aria-hidden="true">#</a> Height Checker</h1><p>Students are asked to stand in non-decreasing order of heights for an annual photo.</p><p>Return the minimum number of students that must move in order for all students to be standing in non-decreasing order of height.</p><p>Notice that when a group of students is selected they can reorder in any possible way between themselves and the non seleted students remain on their seats.</p><hr><details><summary> Tips </summary> Build the correct order of heights by sorting another array, then compare the two arrays. </details><hr><details><summary> Solution </summary><h3 id="_1-my-badly-solution" tabindex="-1"><a class="header-anchor" href="#_1-my-badly-solution" aria-hidden="true">#</a> 1. my badly solution</h3><p>like bubble sort</p><ul><li>get the smallest height index A</li><li>swap A with current index</li><li>mark the heights to map</li><li>after sorting,get how many heights have swaped?</li></ul><hr><h3 id="_2-best-solution" tabindex="-1"><a class="header-anchor" href="#_2-best-solution" aria-hidden="true">#</a> 2. best solution</h3><ul><li>Build the correct order of heights by sorting another array</li><li>then compare the two arrays.</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">heightChecker</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>heights<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sortHeights</span><span class="token punctuation">(</span>heights<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> heights<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>sortHeights<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sortHeights<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> sortHeights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            res<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr>`,9),p=[o];function i(c,l){return s(),a("div",null,p)}const d=n(e,[["render",i],["__file","HeightChecker.html.vue"]]);export{d as default};
