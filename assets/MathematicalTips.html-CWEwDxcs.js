import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as s,f as t,o as e}from"./app-CmUWY-7t.js";const o={};function p(c,n){return e(),s("div",null,n[0]||(n[0]=[t(`<h1 id="mathematical-tips" tabindex="-1"><a class="header-anchor" href="#mathematical-tips"><span>Mathematical Tips</span></a></h1><h2 id="自定义两actor旋转数值" tabindex="-1"><a class="header-anchor" href="#自定义两actor旋转数值"><span>自定义两Actor旋转数值</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line">FRotator Rotation <span class="token operator">=</span> <span class="token punctuation">(</span>ActorA<span class="token operator">-&gt;</span><span class="token function">GetActorLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> ActorB<span class="token operator">-&gt;</span><span class="token function">GetActorLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Rotation<span class="token punctuation">.</span>Pitch <span class="token operator">=</span> <span class="token number">45.f</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> FVector ToTarget <span class="token operator">=</span> Rotation<span class="token punctuation">.</span><span class="token function">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码的意义是，从<code>B</code>到<code>A</code>的向量在Pitch方向旋转45度得到<code>ToTarget</code>方向向量，且该值是进行了标准化操作。这个也太方便了吧。</p><p>这里<code>Rotation</code>方法其实就是<code>ToOrientationRotator</code>。</p><h2 id="direction-vs-forwardvector" tabindex="-1"><a class="header-anchor" href="#direction-vs-forwardvector"><span>Direction vs ForwardVector</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line">FVector Direction <span class="token operator">=</span> ActorA<span class="token operator">-&gt;</span><span class="token function">GetActorRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">FVector ForwardVector <span class="token operator">=</span> <span class="token function">GetActorForwardVector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的<code>Direction</code>与<code>ForwardVector</code>这两个值是相同的。</p><h2 id="提取动画根节点位移后转为角色的世界坐标" tabindex="-1"><a class="header-anchor" href="#提取动画根节点位移后转为角色的世界坐标"><span>提取动画根节点位移后转为角色的世界坐标</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">const</span> FTransform ActorToWorld <span class="token operator">=</span> <span class="token function">GetOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">GetTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> FTransform ComponentToActor <span class="token operator">=</span> ActorToWorld<span class="token punctuation">.</span><span class="token function">GetRelativeTransform</span><span class="token punctuation">(</span><span class="token function">GetComponentTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> FTransform NewComponentToWorld <span class="token operator">=</span> InTransform <span class="token operator">*</span> <span class="token function">GetComponentTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> FTransform NewActorTransform <span class="token operator">=</span> ComponentToActor <span class="token operator">*</span> NewComponentToWorld<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来源：<a href="https://github.com/EpicGames/UnrealEngine/blob/2d53fcab0066b1f16dd956b227720841cad0f6f7/Engine/Source/Runtime/Engine/Private/Components/SkeletalMeshComponent.cpp#3925" target="_blank" rel="noopener noreferrer">USkeletalMeshComponent::ConvertLocalRootMotionToWorld</a></p><h2 id="frotationmatrix-makefromx-desiredxaxis-rotator" tabindex="-1"><a class="header-anchor" href="#frotationmatrix-makefromx-desiredxaxis-rotator"><span>FRotationMatrix::MakeFromX(DesiredXAxis).Rotator()</span></a></h2><p><strong>将 Actor 的正方向（即其本地 X 轴）旋转到与 <code>DesiredXAxis</code> 世界空间方向对齐</strong>，同时自动计算合理的 Y 和 Z 轴方向以保持正交性。</p><hr><h3 id="具体行为解析" tabindex="-1"><a class="header-anchor" href="#具体行为解析"><span>具体行为解析：</span></a></h3><ol><li><p><strong><code>MakeFromX(DesiredXAxis)</code></strong></p><ul><li>以输入的 <code>DesiredXAxis</code>（世界空间方向向量）作为 <strong>新的 X 轴</strong>。</li><li><strong>自动计算 Y 和 Z 轴</strong>：引擎会通过叉积运算生成与 X 轴正交的 Y 和 Z 轴（具体逻辑可能依赖虚幻引擎的右手坐标系规则）。</li></ul></li><li><p><strong><code>.Rotator()</code></strong></p><ul><li>将生成的旋转矩阵转换为 <code>FRotator</code>（Pitch/Yaw/Roll），可直接用于设置 Actor 的旋转。</li></ul></li><li><p><strong>最终效果</strong></p><ul><li>Actor 的 <strong>本地 X 轴</strong>（通常是其正前方向）会完全对齐到 <code>DesiredXAxis</code> 方向。</li><li>Actor 的 Y 和 Z 轴会根据引擎的默认正交化规则调整（可能不是唯一的解，但保证合理性）。</li></ul></li></ol><hr><h3 id="示例场景" tabindex="-1"><a class="header-anchor" href="#示例场景"><span>示例场景</span></a></h3><p>假设有一个角色需要面朝移动方向（X 轴对齐速度方向）：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// 获取角色当前的移动速度方向（世界空间）</span></span>
<span class="line">FVector MovementDirection <span class="token operator">=</span> <span class="token function">GetVelocity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetSafeNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 生成使X轴对齐移动方向的旋转</span></span>
<span class="line">FRotator TargetRotation <span class="token operator">=</span> <span class="token class-name">FRotationMatrix</span><span class="token double-colon punctuation">::</span><span class="token function">MakeFromX</span><span class="token punctuation">(</span>MovementDirection<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rotator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 应用到角色</span></span>
<span class="line">Character<span class="token operator">-&gt;</span><span class="token function">SetActorRotation</span><span class="token punctuation">(</span>TargetRotation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，角色的 <strong>正前方（X轴）</strong> 将严格指向移动方向。</p><hr><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ol><li><p><strong>其他轴向的不确定性</strong></p><ul><li>仅约束 X 轴时，Y/Z 轴的方向由引擎自动计算（可能依赖内部叉积顺序）。如果需要精确控制其他轴，需使用 <code>MakeFromXY()</code> 或 <code>MakeFromXZ()</code>。</li></ul></li><li><p><strong>万向节锁问题</strong></p><ul><li>当 <code>DesiredXAxis</code> 接近垂直（如 <code>FVector(0,0,1)</code>）时，转换到 <code>FRotator</code> 可能出现歧义（Pitch ±90° 时的万向节锁）。</li></ul></li><li><p><strong>归一化要求</strong></p><ul><li>输入向量必须是非零向量（通常先用 <code>GetSafeNormal()</code> 处理）。</li></ul></li></ol><hr><h3 id="对比其他方法" tabindex="-1"><a class="header-anchor" href="#对比其他方法"><span>对比其他方法</span></a></h3><ul><li><p>如果希望 <strong>Actor 的某个特定轴（非X轴）对齐目标方向</strong>，需改用其他方法：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// 让Actor的Z轴指向目标方向</span></span>
<span class="line">FRotator TargetRotation <span class="token operator">=</span> <span class="token class-name">FRotationMatrix</span><span class="token double-colon punctuation">::</span><span class="token function">MakeFromZ</span><span class="token punctuation">(</span>DesiredZAxis<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rotator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果需要 <strong>完全控制所有轴向</strong>，使用 <code>MakeFromXY()</code> 或 <code>MakeFromXZ()</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// 明确指定X和Y轴方向（Z轴自动正交化）</span></span>
<span class="line"><span class="token class-name">FRotationMatrix</span><span class="token double-colon punctuation">::</span><span class="token function">MakeFromXY</span><span class="token punctuation">(</span>DesiredXAxis<span class="token punctuation">,</span> DesiredYAxis<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rotator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>总之，<code>MakeFromX().Rotator()</code> 是 <strong>最直接的方式</strong> 让 Actor 的 X 轴对齐目标方向，适用于大多数&quot;面朝方向&quot;的需求。</p><h2 id="关于插值使用" tabindex="-1"><a class="header-anchor" href="#关于插值使用"><span>关于插值使用</span></a></h2><p>通常来说使用线性插值时，我们会定死一个起始点和结束点，来叠加<code>Alpha</code>值，如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">float</span> Alpha <span class="token operator">+=</span> DeltaTime <span class="token operator">*</span> Speed<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">float</span> Value <span class="token operator">=</span> <span class="token function">Lerp</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>Alpha<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>Alpha</code>是需要缓存起来，实时计算。</p><p>有另一种做法，固定<code>Alpha</code>值，也就是速率，缩短行程。这种做法适用于更改一个值，这个值一直作为起点。比如想平滑移动一个物体到特殊的位置，这个物体的位置就作为<code>A</code>来计算，如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">float</span> Alpha <span class="token operator">=</span> DeltaTime <span class="token operator">*</span> Speed<span class="token punctuation">;</span></span>
<span class="line">A <span class="token operator">=</span> <span class="token function">Lerp</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>Alpha<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,34)]))}const r=a(o,[["render",p],["__file","MathematicalTips.html.vue"]]),u=JSON.parse('{"path":"/GameEngine/Unreal/manual/MathematicalTips.html","title":"Mathematical Tips","lang":"en-US","frontmatter":{"date":"2024-09-15T18:03:06.000Z","tag":["Unreal Engine","Math"]},"git":{"createdTime":1746434942000,"updatedTime":1747292484000,"contributors":[{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":1,"url":"https://github.com/BanMing"},{"name":"ban-ming@foxmail.com","username":"ban-ming@foxmail.com","email":"ban-ming@foxmail.com","commits":1,"url":"https://github.com/ban-ming@foxmail.com"}]},"readingTime":{"minutes":2.93,"words":879},"filePathRelative":"GameEngine/Unreal/manual/MathematicalTips.md","localizedDate":"September 15, 2024","excerpt":"\\n<h2>自定义两Actor旋转数值</h2>\\n<div class=\\"language-cpp line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"cpp\\"><pre><code><span class=\\"line\\">FRotator Rotation <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>ActorA<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">GetActorLocation</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> ActorB<span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">GetActorLocation</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Rotation</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">Rotation<span class=\\"token punctuation\\">.</span>Pitch <span class=\\"token operator\\">=</span> <span class=\\"token number\\">45.f</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">const</span> FVector ToTarget <span class=\\"token operator\\">=</span> Rotation<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Vector</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{r as comp,u as data};
