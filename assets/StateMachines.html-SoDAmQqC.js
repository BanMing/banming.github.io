import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as s,f as e,o as t}from"./app-yueGNJdZ.js";const i="/assets/20211117115116-BJ6gnQuw.png",p={};function c(l,n){return t(),s("div",null,n[0]||(n[0]=[e('<h1 id="state-machines" tabindex="-1"><a class="header-anchor" href="#state-machines"><span>State Machines</span></a></h1><p>AI角色在游戏中一般都是一直做一样的事情，直到收到某个信息才会改变角色现在做的事情。这我们就可以使用状态机来制作。</p><h3 id="a-basic-state-machine" tabindex="-1"><a class="header-anchor" href="#a-basic-state-machine"><span>A Basic State Machine</span></a></h3><p>在一个状态中每个角色都有一个状态变量。一个行为对应着一个状态，并且有一系列的条件。当满足状态切换条件时，这个叫做<code>触发（trigger）</code>,当切换到一个新的状态时，这叫<code>激活（fired）</code></p><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图展示了一个简单的状态机：巡逻，战斗，逃跑。每个状态都有自己的一些条件。</p><h3 id="finite-state-machines" tabindex="-1"><a class="header-anchor" href="#finite-state-machines"><span>Finite State Machines</span></a></h3><p>有限状态机就是一般状态机。</p><h2 id="the-problem" tabindex="-1"><a class="header-anchor" href="#the-problem"><span>The Problem</span></a></h2><p>我们想要一个支持具有任何类型转换条件的任意状态机的一般系统。状态机将符合上述结构，并且同一时刻只占据一种状态。</p><h2 id="the-algorithm" tabindex="-1"><a class="header-anchor" href="#the-algorithm"><span>The Algorithm</span></a></h2><p>为了实现这个，我们可以使用一个通用的状态接口，并且状态中用条件。一个状态机有着一些可能进入的状态和记录着当前的状态。</p><p>在每一帧我们就更新状态机，状态机去更新当前状态，从而检测是否切换状态。</p><h2 id="pseudo-code" tabindex="-1"><a class="header-anchor" href="#pseudo-code"><span>Pseudo-code</span></a></h2><p>这里我们一帧去检测当前状态是已经被切换了，并且调佣特定的切换的方法。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">StateMachine</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># We’re in one state at a time.</span></span>
<span class="line">    initialState<span class="token punctuation">:</span> State</span>
<span class="line">    currentState<span class="token punctuation">:</span> State <span class="token operator">=</span> initialState</span>
<span class="line">    targetState<span class="token punctuation">:</span> State</span>
<span class="line"></span>
<span class="line">    <span class="token comment"># transfrom to next state </span></span>
<span class="line">    function transitionTo<span class="token punctuation">(</span>state<span class="token punctuation">)</span></span>
<span class="line">        targetState <span class="token operator">=</span>  state</span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Checks and applies transitions, returning current state actions.</span></span>
<span class="line">    function update<span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">        currentState<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> targetState ! <span class="token operator">=</span> null then</span>
<span class="line">            executeStateTransition<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># execute transition</span></span>
<span class="line">    funtion executeStateTransition<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        currentState<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        currentState <span class="token operator">=</span> targetState</span>
<span class="line">        currentState<span class="token punctuation">.</span>OnTransitionTo <span class="token operator">=</span> transitionTo</span>
<span class="line">        currentState<span class="token punctuation">.</span>entry<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="data-structures-and-interfaces" tabindex="-1"><a class="header-anchor" href="#data-structures-and-interfaces"><span>Data Structures and Interfaces</span></a></h2><p>状态的接口：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">IState</span><span class="token punctuation">:</span></span>
<span class="line">    Action<span class="token operator">&lt;</span>IState<span class="token operator">&gt;</span> OnTransitionTo</span>
<span class="line">    function entry<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># do state actions</span></span>
<span class="line">    function update<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    function exit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="weaknesses" tabindex="-1"><a class="header-anchor" href="#weaknesses"><span>Weaknesses</span></a></h2><p>TODO： 腾讯课程</p>`,21)]))}const u=a(p,[["render",c],["__file","StateMachines.html.vue"]]),d=JSON.parse('{"path":"/Gameplay/AI/DecisionMaking/StateMachines.html","title":"State Machines","lang":"en-US","frontmatter":{"date":"2021-11-17T18:48:34.000Z","tag":["Game AI"]},"git":{"createdTime":1637146114000,"updatedTime":1707213711000,"contributors":[{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":4,"url":"https://github.com/BanMing"},{"name":"wupeng","username":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":2,"url":"https://github.com/wupeng"}]},"readingTime":{"minutes":1.49,"words":447},"filePathRelative":"Gameplay/AI/DecisionMaking/StateMachines.md","localizedDate":"November 17, 2021","excerpt":"\\n<p>AI角色在游戏中一般都是一直做一样的事情，直到收到某个信息才会改变角色现在做的事情。这我们就可以使用状态机来制作。</p>\\n<h3>A Basic State Machine</h3>\\n<p>在一个状态中每个角色都有一个状态变量。一个行为对应着一个状态，并且有一系列的条件。当满足状态切换条件时，这个叫做<code>触发（trigger）</code>,当切换到一个新的状态时，这叫<code>激活（fired）</code></p>\\n<figure><figcaption></figcaption></figure>\\n<p>上图展示了一个简单的状态机：巡逻，战斗，逃跑。每个状态都有自己的一些条件。</p>"}');export{u as comp,d as data};
