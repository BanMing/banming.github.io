import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as e,b as t}from"./app-uSoypkDR.js";const n="/assets/20210730162538-_B4W2ayL.png",r={},h=t('<h1 id="可见性路径规划" tabindex="-1"><a class="header-anchor" href="#可见性路径规划" aria-hidden="true">#</a> 可见性路径规划</h1><p>我不知道翻译是不是对的,英文是：<code>Visibility Graph Path Planning</code>，简称：<code>VGAPH</code>。</p><h2 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么" aria-hidden="true">#</a> 是什么</h2><p>我们从实际问题出发，如下图，当我们在游戏中需要使一个角色自动从<code>start</code>点移动到<code>goal</code>点并且绕开障碍物，蓝色为障碍物。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们第一个想到的使用的方法就是寻路，那么我们说的<code>VGAPH</code>就是一种寻路的策略。</p><h2 id="为什么" tabindex="-1"><a class="header-anchor" href="#为什么" aria-hidden="true">#</a> 为什么</h2><p>我们常见的寻路方案中，需要在角色移动或者是在规划路线时检测物理碰撞，从而找到顺畅通过的路线。检测碰撞也是一个比较耗时的工作，如果使用不当的话。 <code>VGAPH</code>这个寻路的方案是直接跳过碰撞检测。</p><h2 id="怎么用" tabindex="-1"><a class="header-anchor" href="#怎么用" aria-hidden="true">#</a> 怎么用</h2><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><p>https://lis.csail.mit.edu/pubs/tlp/collision-free-planning-cacm.pdf</p><p>http://ntur.lib.ntu.edu.tw/bitstream/246246/200704191001565/1/01389835.pdf</p><p>https://github.com/christopher-boustros/Unity-Visibility-Graph-Path-Planning-Simulation</p><p>http://www.ijoar.org/journals/IJOARM/papers/Visibility-Graph-Shortest-Path-in-Polygonal-Arena-Motion-Planning.pdf</p><p>http://lavalle.pl/planning/</p>',16),o=[h];function d(c,s){return i(),e("div",null,o)}const f=a(r,[["render",d],["__file","VisibilityGraphPathPlanning.html.vue"]]);export{f as default};
