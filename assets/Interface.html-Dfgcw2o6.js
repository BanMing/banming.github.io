import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,f as e,o as p}from"./app-Ccr1Gj2O.js";const i={};function t(l,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="interface" tabindex="-1"><a class="header-anchor" href="#interface"><span>Interface</span></a></h1><p>下面是一个简单的接口示例：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;DoSomeThings.generated.h&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token function">UINTERFACE</span><span class="token punctuation">(</span>MinimalAPI<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UDoSomeThings</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UInterface</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// This will always be empty!</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">YOURPROJECT_API</span> IDoSomeThings</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">    <span class="token comment">// Get the number of things</span></span>
<span class="line">    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> BlueprintNativeEvent<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">&quot;Things&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token function">GetNumberOfThings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继承接口的类：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;DoSomeThings.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;SomeThingsActor.generated.h&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token function">UCLASS</span><span class="token punctuation">(</span>Blueprintable<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">YOURPROJECT_API</span> ASomeThingsActor <span class="token operator">:</span> <span class="token keyword">public</span> AActor<span class="token punctuation">,</span> <span class="token keyword">public</span> IDoSomeThings</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">GetNumberOfThings_Implementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;SomeThingsActor.h&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token class-name">ASomeThingsActor</span><span class="token double-colon punctuation">::</span><span class="token function">GetNumberOfThings_Implementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UE中C++的接口有一些特别使用方法，下面记录一下：</p><h2 id="blueprintnativeevent" tabindex="-1"><a class="header-anchor" href="#blueprintnativeevent"><span>BlueprintNativeEvent</span></a></h2><p>在接口里使用<code>BlueprintNativeEvent</code>来标记方法为虚方法，而不是直接使用<code>virtual</code>。这样做的好处是可以在蓝图实现也可以在C++里使用，与此同时可以在C++中不实现该接口方法也是可以的。</p><p>最重要的是在调用接口方法时不需要手动强转一次，虚幻提供了专用的调用方式：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">int</span> Num <span class="token operator">=</span> <span class="token class-name">IDoSomeThings</span><span class="token double-colon punctuation">::</span><span class="token function">Execute_GetNumberOfThings</span><span class="token punctuation">(</span>SomethingInstance<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="implements" tabindex="-1"><a class="header-anchor" href="#implements"><span>Implements</span></a></h2><p>判断一个对象是否继承与一个接口，使用U开头的类来判读，而不是I开头的。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>Actor <span class="token operator">&amp;&amp;</span> Actor<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">Implements</span><span class="token generic class-name"><span class="token operator">&lt;</span>UDoSomeThings<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Use the interface</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="storing-interfaces-as-variables" tabindex="-1"><a class="header-anchor" href="#storing-interfaces-as-variables"><span>Storing Interfaces As Variables</span></a></h2><p>把接口作为类的变量，官方提供了<code>TScriptInterface&lt;&gt;</code>来存储，不过这种方式很容易出错，所以这里并不推荐。直接使用<code>UObject</code>存储更加合适。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">)</span></span>
<span class="line">UObject<span class="token operator">*</span> SomethingInstance<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用接口函数时也更加方便，因为Execute方法传入的时UObject：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// I&#39;m assuming here that we checked the object supported the interface before saving</span></span>
<span class="line"><span class="token comment">// it to the variable; if not we should check for that as well as nulls</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>SomethingInstance<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> Num <span class="token operator">=</span> <span class="token class-name">IDoSomeThings</span><span class="token double-colon punctuation">::</span><span class="token function">Execute_GetNumberOfThings</span><span class="token punctuation">(</span>SomethingInstance<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ul><li><a href="https://www.stevestreeting.com/2020/11/02/ue4-c-interfaces-hints-n-tips/" target="_blank" rel="noopener noreferrer">UE4 C++ Interfaces - Hints n Tips</a></li><li><a href="https://dev.epicgames.com/community/learning/tutorials/bLXe/interfaces-bp-c" target="_blank" rel="noopener noreferrer">https://dev.epicgames.com/community/learning/tutorials/bLXe/interfaces-bp-c</a></li><li><a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/interfaces-in-unreal-engine" target="_blank" rel="noopener noreferrer">https://dev.epicgames.com/documentation/en-us/unreal-engine/interfaces-in-unreal-engine</a></li></ul>`,21)]))}const r=s(i,[["render",t],["__file","Interface.html.vue"]]),u=JSON.parse('{"path":"/GameEngine/Unreal/manual/Interface.html","title":"Interface","lang":"en-US","frontmatter":{"date":"2023-12-29T18:03:06.000Z","tag":["Unreal Engine","C++"]},"git":{"createdTime":1731835496000,"updatedTime":1731835786000,"contributors":[{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":2,"url":"https://github.com/BanMing"}]},"readingTime":{"minutes":1.39,"words":417},"filePathRelative":"GameEngine/Unreal/manual/Interface.md","localizedDate":"December 29, 2023","excerpt":"\\n<p>下面是一个简单的接口示例：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"cpp\\"><pre><code><span class=\\"line\\"><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">pragma</span> <span class=\\"token expression\\">once</span></span></span>\\n<span class=\\"line\\"><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">\\"CoreMinimal.h\\"</span></span></span>\\n<span class=\\"line\\"><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">\\"DoSomeThings.generated.h\\"</span></span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token function\\">UINTERFACE</span><span class=\\"token punctuation\\">(</span>MinimalAPI<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">UDoSomeThings</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">UInterface</span></span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token function\\">GENERATED_BODY</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">    <span class=\\"token comment\\">// This will always be empty!</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">YOURPROJECT_API</span> IDoSomeThings</span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token function\\">GENERATED_BODY</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span></span>\\n<span class=\\"line\\">    <span class=\\"token comment\\">// Get the number of things</span></span>\\n<span class=\\"line\\">    <span class=\\"token function\\">UFUNCTION</span><span class=\\"token punctuation\\">(</span>BlueprintCallable<span class=\\"token punctuation\\">,</span> BlueprintNativeEvent<span class=\\"token punctuation\\">,</span> Category<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Things\\"</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">GetNumberOfThings</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{r as comp,u as data};
