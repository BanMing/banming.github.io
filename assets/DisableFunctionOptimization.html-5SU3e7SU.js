import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o,c as p,e as n,d as s,f as e,b as c}from"./app-gmnTxx6m.js";const l={},r=c(`<h1 id="disable-function-optimization-with-attribute" tabindex="-1"><a class="header-anchor" href="#disable-function-optimization-with-attribute" aria-hidden="true">#</a> Disable Function Optimization with Attribute</h1><h2 id="single-function-definition" tabindex="-1"><a class="header-anchor" href="#single-function-definition" aria-hidden="true">#</a> Single function definition</h2><h3 id="clang" tabindex="-1"><a class="header-anchor" href="#clang" aria-hidden="true">#</a> Clang</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// Clang</span>
<span class="token comment">// GNU-style attribute</span>
<span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>optnone<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// C++11 attribute</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span>clang<span class="token double-colon punctuation">::</span>optnone<span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gcc" tabindex="-1"><a class="header-anchor" href="#gcc" aria-hidden="true">#</a> GCC</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">optimize</span><span class="token punctuation">(</span><span class="token string">&quot;O0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="multiply-function-definition" tabindex="-1"><a class="header-anchor" href="#multiply-function-definition" aria-hidden="true">#</a> Multiply function definition</h2><h3 id="clang-1" tabindex="-1"><a class="header-anchor" href="#clang-1" aria-hidden="true">#</a> Clang</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">clang optimize off</span></span>
<span class="token comment">// This function will be decorated with optnone.</span>
<span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// optnone conflicts with always_inline, so bar() will not be decorated.</span>
<span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>always_inline<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">clang optimize on</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="visual-studio" tabindex="-1"><a class="header-anchor" href="#visual-studio" aria-hidden="true">#</a> Visual Studio</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">optimize</span><span class="token punctuation">(</span> </span><span class="token string">&quot;&quot;</span><span class="token expression"><span class="token punctuation">,</span> off <span class="token punctuation">)</span></span></span>
<span class="token comment">/* unoptimized code section */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">optimize</span><span class="token punctuation">(</span> </span><span class="token string">&quot;&quot;</span><span class="token expression"><span class="token punctuation">,</span> on <span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gcc-1" tabindex="-1"><a class="header-anchor" href="#gcc-1" aria-hidden="true">#</a> GCC</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC push_options</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span><span class="token punctuation">(</span></span><span class="token string">&quot;O0&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token comment">/* unoptimized code section */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC pop_options</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,14),u={href:"https://bcain-llvm.readthedocs.io/projects/clang/en/latest/LanguageExtensions/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://learn.microsoft.com/en-us/cpp/preprocessor/optimize?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},k={href:"https://codeforces.com/blog/entry/96344",target:"_blank",rel:"noopener noreferrer"};function m(h,v){const a=i("ExternalLinkIcon");return o(),p("div",null,[r,n("p",null,[n("a",u,[s("Clang Language Extensions â€” Clang 8 documentation (bcain-llvm.readthedocs.io)"),e(a)]),n("a",d,[s("optimize pragma | Microsoft Learn"),e(a)]),n("a",k,[s("[Tutorial] GCC Optimization Pragmas - Codeforces"),e(a)])])])}const g=t(l,[["render",m],["__file","DisableFunctionOptimization.html.vue"]]);export{g as default};
