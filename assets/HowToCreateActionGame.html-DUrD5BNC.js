import{_ as a}from"./2025-05-09-13-05-37-URaaW8uN.js";import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e,f as n,o}from"./app-NW-ua5u5.js";const t="/assets/2025-05-09-13-17-00-mUJSMFpJ.png",r="/assets/2025-05-09-13-25-19-DzBxgNJC.png",s={};function p(c,i){return o(),e("div",null,i[0]||(i[0]=[n('<h1 id="使用虚幻引擎5开发3d动作游戏" tabindex="-1"><a class="header-anchor" href="#使用虚幻引擎5开发3d动作游戏"><span>使用虚幻引擎5开发3D动作游戏</span></a></h1><p>这是一篇视频记录文档，视频地址<a href="https://www.bilibili.com/video/BV1SF2oYAEDq" target="_blank" rel="noopener noreferrer">[UFSH2024]使用虚幻引擎5开发3D动作游戏 | 槐宏文 凉屋上海工作室负责人，《楼兰》制作人</a>。</p><p>他讲了一些开发时使用的技术栈，挺有启发意义的。</p><h2 id="动画相关" tabindex="-1"><a class="header-anchor" href="#动画相关"><span>动画相关</span></a></h2><ul><li>Animation逻辑层：State Machine，Notify等</li><li>Animation表现层：Blending，Feathering，Morphing等</li><li>Procedural Animation：IK，Ragdool，Gameplay控制和修改等</li><li>Synced Aniamtion</li></ul><h3 id="ue相关" tabindex="-1"><a class="header-anchor" href="#ue相关"><span>UE相关</span></a></h3><ul><li>Animation Sequence，Montages，Blend Spaces等</li><li>Animation Notify/Notify State</li><li>Animation Blueprint，Animation State Machine，Animation Nodes</li><li><strong>Animation Warping</strong></li><li>Procedural Animation</li></ul><h3 id="synced-animation" tabindex="-1"><a class="header-anchor" href="#synced-animation"><span>Synced Animation</span></a></h3><ul><li>对齐两个或者多个角色，一起播放动画，处决交互等</li></ul><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>使用一个<code>Reference Joint</code>位置对准两个角色</li><li>动画长度一般需要一样长</li><li>需要处理Blending问题</li><li>需要处理如何Align主从</li></ul><p>使用到工具：</p><ul><li>使用<code>Curve</code>定义Motion和Blending</li><li>用<code>Control Rig</code>修改骨骼的位移和旋转</li><li>用<code>Animation Nodes</code>修改骨骼，模拟简单的IK和丰富敌人行为Variations</li><li><code>Motion Warping</code>：重用敌人的攻击动画，修改玩家 Traversal/Interaction动画等。</li></ul><h2 id="战斗相关" tabindex="-1"><a class="header-anchor" href="#战斗相关"><span>战斗相关</span></a></h2><ul><li>Melee Combat基础架构：冷兵器，拳脚等</li><li>Ranged Combat基础框架：Projectiles，Cocussions，Beams等</li><li>Collision Detection基础层：Query和Events</li><li>伤害计算</li></ul><h3 id="ue相关-1" tabindex="-1"><a class="header-anchor" href="#ue相关-1"><span>UE相关</span></a></h3><ul><li><p>Collision Tests，Queries和Events</p></li><li><p>在UE World Query上面建立一层自定义的Collision Query层</p></li><li><p>复制的Combat Shapes</p></li><li><p>角色的Capsule和Physical Asset的设置</p></li><li><p>系统计算相关，GAS的应用，比如GE伤害计算，GA技能管理</p></li></ul><h2 id="战场管理" tabindex="-1"><a class="header-anchor" href="#战场管理"><span>战场管理</span></a></h2><ul><li>角色Positioning</li><li>角色Aggression</li><li>入站，出站检测等</li></ul><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="enemy-aggression" tabindex="-1"><a class="header-anchor" href="#enemy-aggression"><span>Enemy Aggression</span></a></h3><ul><li><p>Aggression Score系统</p><ul><li>计算Aggression Score：Priority + Distance，Current Player Target？ On/Off Screen，Camera Angle 等</li></ul></li><li><p>Token Pool系统</p><ul><li>每个敌人需要若干Token，从一个Pool里面取出，取完了剩下的敌人就不能Aggro</li></ul></li><li><p><strong>UE的EQS（打分） + GE（管理Token）实现</strong></p></li></ul><h3 id="enemy-positioning" tabindex="-1"><a class="header-anchor" href="#enemy-positioning"><span>Enemy Positioning</span></a></h3><ul><li><p>AI应该去哪里</p><ul><li>在Player Space产生若干Positions，然后给每个计算分数</li></ul></li><li><p><strong>UE EQS支持 Generate + Evaluate Positions</strong></p></li><li><p>Zone-Based <br><img src="'+r+'" alt="" loading="lazy"></p><ul><li><code>Gradient Descent</code>算法</li><li>可以支持多种区域</li><li>指定可以去，不能去的区域</li><li>把Nav Mesh考虑进来</li><li>可以加更多的限制，容易扩展</li><li>容易调试且直观</li></ul></li></ul><h2 id="角色移动相关" tabindex="-1"><a class="header-anchor" href="#角色移动相关"><span>角色移动相关</span></a></h2><ul><li>Locomotion：走跑跳，加速减速，转身等</li><li>基础Motion和Movement</li><li>Traversal：攀爬，Gap Jump等</li><li>碰撞检测：推挤</li></ul><h2 id="player相关" tabindex="-1"><a class="header-anchor" href="#player相关"><span>Player相关</span></a></h2><ul><li>Character，Camera，Control</li><li>Player Input：Input Buffer等</li><li>Player Combat：Targeting，Combat Assist等</li><li>Player Traversal：攀爬，钩索等</li><li>Player Interaction：开门，开箱子等</li></ul><h3 id="player-targeting" tabindex="-1"><a class="header-anchor" href="#player-targeting"><span>Player Targeting</span></a></h3><ul><li><p>选择Target，谁应该是我的target？玩家的意图是什么？</p></li><li><p>Scoring系统，综合各种影响因素，计算一个综合最高分</p></li><li><p>以摇杆举例子，左摇杆方向，敌人和玩家的距离，角度，敌人On/Off Screen，敌人是否Aggro，Camera Facing角度等。</p></li><li><p><strong>UE的EQS + GE（Gameplay Tags）等很方便实现</strong></p></li></ul><h3 id="战斗辅助" tabindex="-1"><a class="header-anchor" href="#战斗辅助"><span>战斗辅助</span></a></h3><ul><li>Auto Rotation</li><li>Auto Translation</li><li>Auto Targeting</li><li>让玩家无敌</li></ul><h2 id="敌人相关" tabindex="-1"><a class="header-anchor" href="#敌人相关"><span>敌人相关</span></a></h2><ul><li>AI主要框架：State Machine，Behavior，脚本等</li><li>Navigation相关：Nav Mesh，Nav Link等</li></ul><h3 id="ue相关-2" tabindex="-1"><a class="header-anchor" href="#ue相关-2"><span>UE相关</span></a></h3><ul><li>BT + SM + BP混合</li><li>使用Behavior Tree提供主要 Execution Flow</li><li>使用State Machine管理AI大框架和结构</li><li>使用自定义的AI Combo系统</li><li>使用EQS做AI主要查询手段</li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><ul><li>Companions</li><li>Vehicles</li><li>Bosses</li><li>特殊玩法：游泳，飞行等</li></ul><h2 id="迭代" tabindex="-1"><a class="header-anchor" href="#迭代"><span>迭代</span></a></h2><ul><li><p>快速原型测试想法，可以Hack</p></li><li><p>使用低精度内容制作底层系统，不要Hack</p></li><li><p>低精度制作，高准确度设计，确定核心玩法</p></li><li><p><strong>Play TEST</strong></p></li><li><p><a href="https://www.youtube.com/watch?v=6TB62YKHwRQ&amp;t=10s" target="_blank" rel="noopener noreferrer">Animating Dauntless: Slaying AAA Animation on the Indie Scale</a></p></li></ul><h2 id="gameplay程序关键" tabindex="-1"><a class="header-anchor" href="#gameplay程序关键"><span>Gameplay程序关键</span></a></h2><ul><li>底层系统需要扎实，清晰</li><li>对于未确定的想法，快速Hack测试，快速放弃</li><li>对于确定的功能，用迭代的思路去制作，保证底层系统和框架正确性</li><li>最重要的是好玩，感觉好</li><li>物理的真实并不一定是最好的，基础的物理往往效果好而且简单</li><li>复杂的计算并不一定是最好的</li></ul>',42)]))}const g=l(s,[["render",p],["__file","HowToCreateActionGame.html.vue"]]),u=JSON.parse('{"path":"/Gameplay/HowToCreateActionGame.html","title":"使用虚幻引擎5开发3D动作游戏","lang":"en-US","frontmatter":{"date":"2025-05-02T18:03:06.000Z","tag":["Unreal Engine","Gameplay"]},"git":{"createdTime":1746770105000,"updatedTime":1746770105000,"contributors":[{"name":"ban-ming@foxmail.com","username":"ban-ming@foxmail.com","email":"ban-ming@foxmail.com","commits":1,"url":"https://github.com/ban-ming@foxmail.com"}]},"readingTime":{"minutes":3.31,"words":994},"filePathRelative":"Gameplay/HowToCreateActionGame.md","localizedDate":"May 2, 2025","excerpt":"\\n<p>这是一篇视频记录文档，视频地址<a href=\\"https://www.bilibili.com/video/BV1SF2oYAEDq\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">[UFSH2024]使用虚幻引擎5开发3D动作游戏 | 槐宏文 凉屋上海工作室负责人，《楼兰》制作人</a>。</p>\\n<p>他讲了一些开发时使用的技术栈，挺有启发意义的。</p>\\n<h2>动画相关</h2>\\n<ul>\\n<li>Animation逻辑层：State Machine，Notify等</li>\\n<li>Animation表现层：Blending，Feathering，Morphing等</li>\\n<li>Procedural Animation：IK，Ragdool，Gameplay控制和修改等</li>\\n<li>Synced Aniamtion</li>\\n</ul>"}');export{g as comp,u as data};
