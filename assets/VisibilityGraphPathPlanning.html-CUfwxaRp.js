import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as n,f as t,o as i}from"./app-CCOPQzyQ.js";const r="/assets/20210730162538-D8HhbZrI.png",o={};function p(l,a){return i(),n("div",null,a[0]||(a[0]=[t('<h1 id="可见性路径规划" tabindex="-1"><a class="header-anchor" href="#可见性路径规划"><span>可见性路径规划</span></a></h1><p>我不知道翻译是不是对的,英文是：<code>Visibility Graph Path Planning</code>，简称：<code>VGAPH</code>。</p><h2 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么"><span>是什么</span></a></h2><p>我们从实际问题出发，如下图，当我们在游戏中需要使一个角色自动从<code>start</code>点移动到<code>goal</code>点并且绕开障碍物，蓝色为障碍物。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们第一个想到的使用的方法就是寻路，那么我们说的<code>VGAPH</code>就是一种寻路的策略。</p><h2 id="为什么" tabindex="-1"><a class="header-anchor" href="#为什么"><span>为什么</span></a></h2><p>我们常见的寻路方案中，需要在角色移动或者是在规划路线时检测物理碰撞，从而找到顺畅通过的路线。检测碰撞也是一个比较耗时的工作，如果使用不当的话。 <code>VGAPH</code>这个寻路的方案是直接跳过碰撞检测。</p><h2 id="怎么用" tabindex="-1"><a class="header-anchor" href="#怎么用"><span>怎么用</span></a></h2><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://lis.csail.mit.edu/pubs/tlp/collision-free-planning-cacm.pdf" target="_blank" rel="noopener noreferrer">https://lis.csail.mit.edu/pubs/tlp/collision-free-planning-cacm.pdf</a></p><p><a href="http://ntur.lib.ntu.edu.tw/bitstream/246246/200704191001565/1/01389835.pdf" target="_blank" rel="noopener noreferrer">http://ntur.lib.ntu.edu.tw/bitstream/246246/200704191001565/1/01389835.pdf</a></p><p><a href="https://github.com/christopher-boustros/Unity-Visibility-Graph-Path-Planning-Simulation" target="_blank" rel="noopener noreferrer">https://github.com/christopher-boustros/Unity-Visibility-Graph-Path-Planning-Simulation</a></p><p><a href="http://www.ijoar.org/journals/IJOARM/papers/Visibility-Graph-Shortest-Path-in-Polygonal-Arena-Motion-Planning.pdf" target="_blank" rel="noopener noreferrer">http://www.ijoar.org/journals/IJOARM/papers/Visibility-Graph-Shortest-Path-in-Polygonal-Arena-Motion-Planning.pdf</a></p><p><a href="http://lavalle.pl/planning/" target="_blank" rel="noopener noreferrer">http://lavalle.pl/planning/</a></p>',16)]))}const c=e(o,[["render",p],["__file","VisibilityGraphPathPlanning.html.vue"]]),d=JSON.parse('{"path":"/Gameplay/AI/PathFinding/VisibilityGraphPathPlanning.html","title":"可见性路径规划","lang":"en-US","frontmatter":{"date":"2021-07-30T18:44:02.000Z","tag":["Game AI"]},"git":{"createdTime":1627641842000,"updatedTime":1707213711000,"contributors":[{"name":"BanMing","username":"BanMing","email":"ban-ming@foxmail.com","commits":5,"url":"https://github.com/BanMing"},{"name":"wupeng","username":"wupeng","email":"wupeng_a2484@virtuos.com.cn","commits":2,"url":"https://github.com/wupeng"}]},"readingTime":{"minutes":0.81,"words":244},"filePathRelative":"Gameplay/AI/PathFinding/VisibilityGraphPathPlanning.md","localizedDate":"July 30, 2021","excerpt":"\\n<p>我不知道翻译是不是对的,英文是：<code>Visibility Graph Path Planning</code>，简称：<code>VGAPH</code>。</p>\\n<h2>是什么</h2>\\n<p>我们从实际问题出发，如下图，当我们在游戏中需要使一个角色自动从<code>start</code>点移动到<code>goal</code>点并且绕开障碍物，蓝色为障碍物。</p>\\n<figure><figcaption></figcaption></figure>\\n<p>我们第一个想到的使用的方法就是寻路，那么我们说的<code>VGAPH</code>就是一种寻路的策略。</p>"}');export{c as comp,d as data};
