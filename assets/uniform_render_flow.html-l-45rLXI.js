import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as i,b as n}from"./app-XPAK2k99.js";const a={},t=n('<h1 id="uniform-render-flow" tabindex="-1"><a class="header-anchor" href="#uniform-render-flow" aria-hidden="true">#</a> Uniform Render Flow</h1><h2 id="bgfx-setuniform" tabindex="-1"><a class="header-anchor" href="#bgfx-setuniform" aria-hidden="true">#</a> bgfx::setUniform</h2><ul><li>Params:(UniformHandle _handle, const void* _value, uint16_t _num = 1)</li></ul><h2 id="encoder-setuniform" tabindex="-1"><a class="header-anchor" href="#encoder-setuniform" aria-hidden="true">#</a> Encoder::setUniform</h2><ul><li>Params:(UniformHandle _handle, const void* _value, uint16_t _num = 1)</li></ul><h2 id="encoderimpl-setuniform" tabindex="-1"><a class="header-anchor" href="#encoderimpl-setuniform" aria-hidden="true">#</a> EncoderImpl::setUniform</h2><ul><li>Write value to UniformBuffer</li><li>Params:(UniformType::Enum _type, UniformHandle _handle, const void* _value, uint16_t _num)</li><li>File: bgfx_p.h</li></ul><h2 id="encoderimpl-submit" tabindex="-1"><a class="header-anchor" href="#encoderimpl-submit" aria-hidden="true">#</a> EncoderImpl::submit</h2><ul><li>Set RenderDraw uniformIDx, uniformBegain, UniformEnd</li><li>Params: (ViewId _id, ProgramHandle _program, OcclusionQueryHandle _occlusionQuery, uint32_t _depth, uint8_t _flags);</li><li>File: bgfx.cpp</li></ul><h2 id="renderercontext-submit" tabindex="-1"><a class="header-anchor" href="#renderercontext-submit" aria-hidden="true">#</a> RendererContext::submit</h2><ul><li>Params: (Frame* _render, ClearQuad&amp; /<em>_clearQuad</em>/, TextVideoMemBlitter&amp; _textVideoMemBlitter)</li><li>File: Platform Renderer(renderer_d3d12.cpp)</li></ul><h2 id="bgfx-rendererupdateuniforms" tabindex="-1"><a class="header-anchor" href="#bgfx-rendererupdateuniforms" aria-hidden="true">#</a> bgfx::rendererUpdateUniforms</h2><ul><li>Copy/Move uniform buffer to renderer native uniform buffer</li><li>Params: (RendererContextI* _renderCtx, UniformBuffer* _uniformBuffer, uint32_t _begin, uint32_t _end)</li><li>File: bgfx.cpp</li></ul><h2 id="renderercontext-updateuniform" tabindex="-1"><a class="header-anchor" href="#renderercontext-updateuniform" aria-hidden="true">#</a> RendererContext::updateUniform</h2><ul><li>Cache uniform buffer in local <code>m_uniforms</code>. Make up constant buffer.</li><li>Params: (uint16_t _loc, const void* _data, uint32_t _size)</li><li>File: Platform Renderer(renderer_d3d12.cpp)</li></ul><h2 id="renderercontext-commit" tabindex="-1"><a class="header-anchor" href="#renderercontext-commit" aria-hidden="true">#</a> RendererContext::commit</h2><ul><li>Set <code>m_uniforms</code> data to <code>m_fsCcratch</code>/<code>m_vsScratch</code> array by uniform type</li><li>File: Platform Renderer(renderer_d3d12.cpp)</li></ul><h2 id="renderercontext-commit-1" tabindex="-1"><a class="header-anchor" href="#renderercontext-commit-1" aria-hidden="true">#</a> RendererContext::commit</h2><ul><li>Write <code>m_vsScratch</code>/<code>m_fsScratch</code> to m_scratchBUffer</li><li>File: Platform Renderer(renderer_d3d12.cpp)</li></ul>',19),d=[t];function o(l,c){return r(),i("div",null,d)}const f=e(a,[["render",o],["__file","uniform_render_flow.html.vue"]]);export{f as default};
